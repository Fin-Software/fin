// SPDX-License-Identifier: Apache-2.0
// Copyright Â© 2024 The Whixy Authors. All rights reserved.
// Contributors responsible for this file:
// @p7r0x7 <mattrbonnette@pm.me>

DOUBLEQUOTESTRING '"' ('\\"' | ~["])* '"';
BACKTICKSTRING    '`' ('\\`' | ~[`])* '`';
BACKSLASHSTRING   (WHITESPACE? '\\ ' ~[\r\n]* [\r\n])+;
BLOCKDOCCOMMENT   (WHITESPACE? '##' ~[\r\n]* [\r\n])+ -> channel(HIDDEN);
BLOCKCOMMENT      (WHITESPACE? '#' ~[\r\n]* [\r\n])+ -> channel(HIDDEN);
DOCCOMMENT        '##' ~[\r\n]* -> channel(HIDDEN);
COMMENT           '#' ~[\r\n]* -> channel(HIDDEN);
WHITESPACE        [ \t]+ -> channel(HIDDEN);
NEWLINE           [\r\n]+;

// SORTED ^^

OPENPARENTHESIS        '(';  // open group expression
CLOSEDPARENTHESIS      ')';  // close group expression
DOT                    '.';  // postfix op: access field (after DOT...)
COMMA                  ',';  // expression separator
UNDERSCORE             '_';  // type inferrence directive or 
EXCLAMATION            '!';  // infix op: logical NOT; bitwise NOT (after EXCLAMATION...)
OPENBRACE              '{';  // open type expression
CLOSEDBRACE            '}';  // close type expression
OPENBRACKET            '[';  // open indexing expression
CLOSEDBRACKET          ']';  // close indexing expression
SEMICOLON              ';';  // statement separator
QUESTION               '?';  // postfix op: explicitly unwrap optional
DOLLAR_OPENPARENTHESIS '$('; //
SINGLEQUOTE            '\''; //

GREATERTHAN_GREATERTHAN_PERCENT_EQUAL '>>%='; // combined assignment: rotr
GREATERTHAN_GREATERTHAN_PERCENT       '>>%';  //
GREATERTHAN_GREATERTHAN_EQUAL         '>>=';  // combined assignment: right shift
GREATERTHAN_GREATERTHAN               '>>';   //
GREATERTHAN_EQUAL                     '>=';   // infix op: greater than or equal to comparison
GREATERTHAN                           '>';    // infix op: greater than comparison
LESSTHAN_LESSTHAN_PERCENT_EQUAL       '<<%='; // combined assignment: rotl
LESSTHAN_LESSTHAN_PERCENT             '<<%';  // rotl
LESSTHAN_LESSTHAN_EQUAL               '<<=';  // combined assignment: left shift
LESSTHAN_LESSTHAN                     '<<';   // left shift
LESSTHAN_EQUAL                        '<=';   // infix op: less than or equal to comparison
LESSTHAN                              '<';    // infix op: less than comparison
ASTERISK_PERCENT_EQUAL                '*%=';  // combined wrapping assignment: multiplication
ASTERISK_PERCENT                      '*%';   //
ASTERISK_EQUAL                        '*=';   // combined assignment: multiplication
ASTERISK_ASTERISK                     '**';   // infix op: comptime value repetition
ASTERISK                              '*';    // (after ASTERISK...)
PLUS_PERCENT_EQUAL                    '+%=';  // combined wrapping assignment: addition
PLUS_PERCENT                          '+%';   //
PLUS_EQUAL                            '+=';   // combined assignment: addition
PLUS_PLUS                             '++';   // infix op: comptime value concatenation
PLUS                                  '+';    // infix op: addition (after PLUS...)
MINUS_PERCENT_EQUAL                   '-%=';  // combined wrapping assignment: subtraction
MINUS_PERCENT                         '-%';   //
MINUS_EQUAL                           '-=';   // combined assignment: subtraction
MINUS                                 '-';    // infix op: subtraction; prefix: negation (after MINUS...)
TILDE_EQUAL                           '~=';   // infix op: inequality comparison
TILDE                                 '~';    // infix op: logical NOT; bitwise NOT (after EXCLAMATION...)
AMPERSAND_EQUAL                       '&=';   // combined assignment: bitwise AND
AMPERSAND                             '&';    // infix op: logical AND; bitwise AND (after AMPERSAND...)
PERCENT_EQUAL                         '%=';   // combined assignment: modulus
PERCENT                               '%';    // (after PERCENT...)
CARROT_EQUAL                          '^=';   // combined assignment: bitwise XOR
CARROT                                '^';    // infix op: logical XOR bitwise XOR (after CARROT...)
SLASH_EQUAL                           '/=';   // combined assignment: division
SLASH                                 '/';    // (after SLASH...)
EQUAL_EQUAL                           '==';   // infix op: equality comparison
EQUAL                                 '=';    // infix op: assign type instance to value; declare default type instance of value (after EQUAL...)
PIPE_EQUAL                            '|=';   // combined assignment: bitwise OR
PIPE                                  '|';    // infix op: logical OR; bitwise OR; routine overloading (after PIPE...)

AND         'and';         //
OR          'or';          // logical or operator
TYPE        'type';        // postfix: access comptime type
LEN         'len';         // postfix: access length
THIS        'this';        // immediately encapsulating type directive
MUT         'mut';         // value mutability modifier
INLINE      'inline';      // routine inlining modifier
RETURN      'return';      // return statement
CONTINUE    'continue';    // goto continue statement
BREAK       'break';       // goto break statement
GOTO        'goto';        // goto label statement
WHILE       'while';       // while loop statement/expression
FOR         'for';         // for loop statement/expression
IF          'if';          // if statement statement/expression
ELSEIF      'elseif';      // elseif statement/expression
ELSE        'else';        // else statement/expression
WHERE       'where';       // enhanced switch statement/expression
DEFER       'defer';       // defer statement
ERRDEFER    'errdefer';    // errdefer statement
FAST        'fast';        // routine fastcall convention modifier
BARE        'bare';        // routine freestanding convention modifier
IMPORT      'import';      // import statement/expression
ALIGN       'align';       // value alignment modifier
THREADL     'threadl';     // value thread-local modifier
UNREACHABLE 'unreachable'; // unreachable statement/expression
VOLATILE    'volatile';    // value volatile modifier
UNROLL      'unroll';      // loop inlining modifier
COMPT       'compt';       // type/statement/expression comptime modifier
TEST        'test';        // routine test modifier
ENUM        'enum';        // enumeration type expression
EMBED       'embed';       // disk data embed directive
UNION       'union';       // union type expression
STD         'std';         // standard library value
ORELSE      'orelse';      // optional unwrapping operator
CATCH       'catch';       // error handling operator
AS          'as';          // coercion operator

// SORTED vv

srcFile: NEWLINE? stmt (stmtSep stmt)* NEWLINE? EOF;

//
//    Statements
//

stmtSep: SEMICOLON | NEWLINE;
stmt
    : field
    | assignStmt
    | call
    | blockStmt
    | routineStmt
    | returnStmt
    | ifStmt
    | whereStmt
    | loopStmt
    | comptStmt
    | unreachable
    | deferStmt
    | errdeferStmt;

field:    mutable? volatile? threadl? atom token+ (EQUAL NEWLINE? expr)?;
mutable:  MUT;
volatile: VOLATILE;
threadl:  THREADL;

assignStmt: atom assignOp atom;
assignOp
    : AMPERSAND_EQUAL                       # andEqualsOp
    | PIPE_EQUAL                            # orEqualsOp
    | PERCENT_EQUAL                         # modEqualsOp
    | CARROT_EQUAL                          # xorEqualsOp
    | SLASH_EQUAL                           # divideEqualsOp
    | PLUS_EQUAL                            # addEqualsOp
    | MINUS_EQUAL                           # subEqualsOp
    | ASTERISK_EQUAL                        # timesEqualsOp
    | LESSTHAN_LESSTHAN_EQUAL               # leftShiftEqualsOp
    | GREATERTHAN_GREATERTHAN_EQUAL         # rightShiftEqualsOp
    | ASTERISK_PERCENT_EQUAL                # wrappingTimesEqualsOp
    | PLUS_PERCENT_EQUAL                    # wrappingAddEqualsOp
    | MINUS_PERCENT_EQUAL                   # wrappingSubEqualsOp
    | GREATERTHAN_GREATERTHAN_PERCENT_EQUAL # rightRotateEqualsOp
    | LESSTHAN_LESSTHAN_PERCENT_EQUAL       # leftRotateEqualsOp; // TODO(@p7r0x7): Needs reordering.

call: atom (atom+ | expr);

blockStmt:    (oParen | dollarOParen) (stmt (stmtSep stmt)*)? cParen;
dollarOParen: NEWLINE? DOLLAR_OPENPARENTHESIS NEWLINE?;

routineStmt: inline? (fast | bare)? typeExpr token structExpr blockStmt;
inline:      INLINE;
fast:        FAST;
bare:        BARE;

returnStmt: RETURN (atom+ | expr);

ifStmt: IF atom stmt (ELSEIF atom stmt)* (ELSE stmt)?;

whereStmt:     WHERE atom comparisonOp caseStmtBlock;
comparisonOp:  ;
caseStmtBlock: ;

loopStmt: unroll? (while | for) atom? atom? stmt;
unroll:   UNROLL;
while:    WHILE;
for:      FOR;

comptStmt: COMPT stmt;

unreachable: UNREACHABLE;

deferStmt: DEFER stmt;

errdeferStmt: ERRDEFER stmt;

//
//    Expressions
//

exprSep: COMMA | NEWLINE;
expr
    : field
    | typeExpr
    | call
    | binaryExpr
    | postExpr
    | preExpr
    | ifExpr
    | whereExpr
    | comptExpr
    | unreachable
    | routineExpr
    | string
    | rune
    | atom;

typeExpr:   underscore | pointer? this | atom;
underscore: UNDERSCORE;
pointer:    ASTERISK;
this:       THIS;

binaryExpr
    : atom NEWLINE? (
        asOp
        | (
            timesOp
            | divideOp
            | modOp
            | bitwiseAndOp
            | leftShiftOp
            | rightShiftOp
            | wrappingTimesOp
            | leftRotateOp
            | rightRotateOp
        )
        | (addOp | subOp | bitwiseOrOp | xorOp | wrappingAddOp | wrappingSubOp)
        | (
            equalityOp
            | inequalityOp
            | lessThanOp
            | greaterThanOp
            | lessThanOrEqualToOp
            | greaterThanOrEqualToOp
        )
        | logicalAndOp
        | logicalOrOp
    ) NEWLINE? atom;
asOp:                   AS;
concatOp:               PLUS_PLUS;
repeatOp:               ASTERISK_ASTERISK;
addOp:                  PLUS;
subOp:                  MINUS;
timesOp:                ASTERISK;
divideOp:               SLASH;
lessThanOp:             LESSTHAN;
greaterThanOp:          GREATERTHAN;
lessThanOrEqualToOp:    LESSTHAN_EQUAL;
greaterThanOrEqualToOp: GREATERTHAN_EQUAL;
wrappingAddOp:          PLUS_PERCENT;
wrappingSubOp:          MINUS_PERCENT;
wrappingTimesOp:        ASTERISK_PERCENT;
leftShiftOp:            LESSTHAN_LESSTHAN;
rightShiftOp:           GREATERTHAN_GREATERTHAN;
leftRotateOp:           LESSTHAN_LESSTHAN_PERCENT;
rightRotateOp:          GREATERTHAN_GREATERTHAN_PERCENT;
equalityOp:             EQUAL_EQUAL;
inequalityOp:           TILDE_EQUAL;
logicalAndOp:           AND;
logicalOrOp:            OR;
bitwiseAndOp:           AMPERSAND;
bitwiseOrOp:            PIPE;
modOp:                  PERCENT;
xorOp:                  CARROT;

postExpr: atom postOp;
postOp
    : DOT atom                                         # accessMemberOp
    | OPENBRACKET NEWLINE? expr NEWLINE? CLOSEDBRACKET # accessIndexOp
    | DOT TYPE                                         # accessTypeOp
    | DOT LEN                                          # accessLengthOp
    | DOT ASTERISK                                     # dereferencePointerOp
    | DOT AMPERSAND                                    # addressOfOp
    | QUESTION                                         # unwrapOptionalOp
    | EXCLAMATION                                      # tryOp;

preExpr: preOp atom;
preOp:   TILDE # notOp | MINUS # negateOp;

ifExpr: IF atom expr (ELSEIF atom expr)* (ELSE expr)?;

whereExpr:     WHERE atom comparisonOp caseExprBlock;
caseExprBlock: ;

comptExpr: COMPT expr;

routineExpr: inline? (fast | bare)? typeExpr structExpr blockStmt;

string: DOUBLEQUOTESTRING # dQString | BACKSLASHSTRING # bSString | BACKTICKSTRING # bTString;

rune: SINGLEQUOTE token SINGLEQUOTE;

atom: token | tupleExpr | blockExpr | structExpr;

token: TOKEN;

tupleExpr: oParen (expr (exprSep expr)*)? cParen;

blockExpr: oParen ((stmt (stmtSep stmt)* stmtSep)? expr)? cParen;

structExpr: oBrace (field (exprSep field)*)? cBrace;

// NL? ID NL?; NL? ID
oParen: NEWLINE? OPENPARENTHESIS NEWLINE?;
cParen: NEWLINE? CLOSEDPARENTHESIS;
oBrace: NEWLINE? OPENBRACE NEWLINE?;
cBrace: NEWLINE? CLOSEDBRACE;