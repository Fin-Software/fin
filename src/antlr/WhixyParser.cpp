
// Generated from WhixyParser.g4 by ANTLR 4.13.2

#include "WhixyParserListener.h"

#include "WhixyParser.h"

using namespace antlrcpp;
using namespace Whixy;

using namespace antlr4;

namespace {

struct WhixyParserStaticData final {
    WhixyParserStaticData(
        std::vector<std::string> ruleNames, std::vector<std::string> literalNames,
        std::vector<std::string> symbolicNames
    )
        : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
          symbolicNames(std::move(symbolicNames)), vocabulary(this->literalNames, this->symbolicNames)
    {}

    WhixyParserStaticData(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData(WhixyParserStaticData&&) = delete;
    WhixyParserStaticData& operator=(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData& operator=(WhixyParserStaticData&&) = delete;

    std::vector<antlr4::dfa::DFA> decisionToDFA;
    antlr4::atn::PredictionContextCache sharedContextCache;
    const std::vector<std::string> ruleNames;
    const std::vector<std::string> literalNames;
    const std::vector<std::string> symbolicNames;
    const antlr4::dfa::Vocabulary vocabulary;
    antlr4::atn::SerializedATNView serializedATN;
    std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag whixyparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
    std::unique_ptr<WhixyParserStaticData>
        whixyparserParserStaticData = nullptr;

void whixyparserParserInitialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    if (whixyparserParserStaticData != nullptr) { return; }
#else
    assert(whixyparserParserStaticData == nullptr);
#endif
    auto staticData = std::make_unique<WhixyParserStaticData>(
        std::vector<std::string>{"srcFile",   "stmtSep",     "stmt",         "field",         "assignStmt",
                                 "assignOp",  "call",        "blockStmt",    "routineStmt",   "returnStmt",
                                 "ifStmt",    "whereStmt",   "comparisonOp", "caseStmtBlock", "loopStmt",
                                 "comptStmt", "unreachable", "deferStmt",    "errdeferStmt",  "exprSep",
                                 "expr",      "binaryExpr",  "binaryOp",     "postExpr",      "postOp",
                                 "preExpr",   "preOp",       "ifExpr",       "whereExpr",     "caseExprBlock",
                                 "loopExpr",  "comptExpr",   "routineExpr",  "string",        "atom",
                                 "token",     "blockExpr",   "structExpr",   "tupleExpr",     "oParen",
                                 "cParen",    "oBrace",      "cBrace"},
        std::vector<std::string>{"",           "",           "",         "",        "",          "",
                                 "",           "",           "'.'",      "','",     "';'",       "'('",
                                 "')'",        "'{'",        "'}'",      "'['",     "']'",       "'!'",
                                 "'$'",        "'\\u003F'",  "'>>%='",   "'>>%'",   "'>>='",     "'>>'",
                                 "'>='",       "'>'",        "'<<%='",   "'<<%'",   "'<<='",     "'<<'",
                                 "'<='",       "'<'",        "'*%='",    "'*%'",    "'*='",      "'**'",
                                 "'*'",        "'+%='",      "'+%'",     "'+='",    "'++'",      "'+'",
                                 "'-%='",      "'-%'",       "'-='",     "'-'",     "'~='",      "'~'",
                                 "'&='",       "'&'",        "'%='",     "'%'",     "'^='",      "'^'",
                                 "'/='",       "'/'",        "'=='",     "'='",     "'|='",      "'|'",
                                 "'type'",     "'len'",      "'this'",   "'auto'",  "'mut'",     "'inline'",
                                 "'return'",   "'continue'", "'break'",  "'goto'",  "'while'",   "'for'",
                                 "'if'",       "'elseif'",   "'else'",   "'where'", "'defer'",   "'errdefer'",
                                 "'fast'",     "'bare'",     "'import'", "'align'", "'threadl'", "'unreachable'",
                                 "'volatile'", "'unroll'",   "'compt'",  "'test'",  "'enum'",    "'union'",
                                 "'std'",      "'orelse'",   "'catch'",  "'as'"},
        std::vector<std::string>{
            "",
            "DOUBLEQUOTESTRING",
            "BACKTICKSTRING",
            "DOCCOMMENT",
            "COMMENT",
            "RUNE",
            "NEWLINE",
            "WHITESPACE",
            "DOT",
            "COMMA",
            "SEMICOLON",
            "OPENPARENTHESIS",
            "CLOSEDPARENTHESIS",
            "OPENBRACE",
            "CLOSEDBRACE",
            "OPENBRACKET",
            "CLOSEDBRACKET",
            "EXCLAMATION",
            "DOLLAR",
            "QUESTION",
            "GREATERTHAN_GREATERTHAN_PERCENT_EQUAL",
            "GREATERTHAN_GREATERTHAN_PERCENT",
            "GREATERTHAN_GREATERTHAN_EQUAL",
            "GREATERTHAN_GREATERTHAN",
            "GREATERTHAN_EQUAL",
            "GREATERTHAN",
            "LESSTHAN_LESSTHAN_PERCENT_EQUAL",
            "LESSTHAN_LESSTHAN_PERCENT",
            "LESSTHAN_LESSTHAN_EQUAL",
            "LESSTHAN_LESSTHAN",
            "LESSTHAN_EQUAL",
            "LESSTHAN",
            "ASTERISK_PERCENT_EQUAL",
            "ASTERISK_PERCENT",
            "ASTERISK_EQUAL",
            "ASTERISK_ASTERISK",
            "ASTERISK",
            "PLUS_PERCENT_EQUAL",
            "PLUS_PERCENT",
            "PLUS_EQUAL",
            "PLUS_PLUS",
            "PLUS",
            "MINUS_PERCENT_EQUAL",
            "MINUS_PERCENT",
            "MINUS_EQUAL",
            "MINUS",
            "TILDE_EQUAL",
            "TILDE",
            "AMPERSAND_EQUAL",
            "AMPERSAND",
            "PERCENT_EQUAL",
            "PERCENT",
            "CARROT_EQUAL",
            "CARROT",
            "SLASH_EQUAL",
            "SLASH",
            "EQUAL_EQUAL",
            "EQUAL",
            "PIPE_EQUAL",
            "PIPE",
            "TYPE",
            "LEN",
            "THIS",
            "AUTO",
            "MUT",
            "INLINE",
            "RETURN",
            "CONTINUE",
            "BREAK",
            "GOTO",
            "WHILE",
            "FOR",
            "IF",
            "ELSEIF",
            "ELSE",
            "WHERE",
            "DEFER",
            "ERRDEFER",
            "FAST",
            "BARE",
            "IMPORT",
            "ALIGN",
            "THREADL",
            "UNREACHABLE",
            "VOLATILE",
            "UNROLL",
            "COMPT",
            "TEST",
            "ENUM",
            "UNION",
            "STD",
            "ORELSE",
            "CATCH",
            "AS",
            "TOKEN"
        }
    );
    static const int32_t serializedATNSegment[] = {
        4,   1,   94,  551, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,   4,
        7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,   7,   9,
        2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,   14,  2,   15,
        7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,  2,   20,  7,   20,
        2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,   25,  7,   25,  2,   26,
        7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,  7,   30,  2,   31,  7,   31,
        2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,   35,  2,   36,  7,   36,  2,   37,
        7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,  2,   41,  7,   41,  2,   42,  7,   42,
        1,   0,   3,   0,   88,  8,   0,   1,   0,   1,   0,   1,   0,   1,   0,   5,   0,   94,  8,   0,   10,  0,
        12,  0,   97,  9,   0,   1,   0,   3,   0,   100, 8,   0,   1,   0,   1,   0,   1,   1,   1,   1,   1,   2,
        1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,
        1,   2,   3,   2,   119, 8,   2,   1,   3,   1,   3,   1,   3,   1,   3,   3,   3,   125, 8,   3,   1,   3,
        4,   3,   128, 8,   3,   11,  3,   12,  3,   129, 1,   3,   1,   3,   3,   3,   134, 8,   3,   1,   3,   3,
        3,   137, 8,   3,   1,   3,   1,   3,   1,   3,   1,   3,   1,   3,   3,   3,   144, 8,   3,   1,   3,   4,
        3,   147, 8,   3,   11,  3,   12,  3,   148, 1,   3,   1,   3,   3,   3,   153, 8,   3,   1,   3,   3,   3,
        156, 8,   3,   3,   3,   158, 8,   3,   1,   4,   1,   4,   1,   4,   1,   4,   1,   5,   1,   5,   1,   5,
        1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,
        1,   5,   3,   5,   179, 8,   5,   1,   6,   1,   6,   1,   6,   1,   7,   1,   7,   1,   7,   1,   7,   1,
        7,   5,   7,   189, 8,   7,   10,  7,   12,  7,   192, 9,   7,   3,   7,   194, 8,   7,   1,   7,   1,   7,
        1,   7,   3,   7,   199, 8,   7,   1,   7,   1,   7,   1,   7,   3,   7,   204, 8,   7,   1,   7,   1,   7,
        1,   7,   1,   7,   5,   7,   210, 8,   7,   10,  7,   12,  7,   213, 9,   7,   3,   7,   215, 8,   7,   1,
        7,   3,   7,   218, 8,   7,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,
        1,   8,   1,   8,   1,   8,   3,   8,   231, 8,   8,   1,   9,   1,   9,   1,   9,   1,   10,  1,   10,  1,
        10,  1,   10,  1,   10,  1,   10,  1,   10,  5,   10,  243, 8,   10,  10,  10,  12,  10,  246, 9,   10,  1,
        10,  1,   10,  3,   10,  250, 8,   10,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   12,  1,   12,
        1,   13,  1,   13,  1,   14,  1,   14,  1,   14,  3,   14,  264, 8,   14,  1,   14,  3,   14,  267, 8,   14,
        1,   14,  1,   14,  1,   14,  1,   14,  3,   14,  273, 8,   14,  1,   14,  3,   14,  276, 8,   14,  1,   14,
        1,   14,  1,   14,  3,   14,  281, 8,   14,  1,   14,  3,   14,  284, 8,   14,  1,   14,  1,   14,  1,   14,
        3,   14,  289, 8,   14,  1,   14,  3,   14,  292, 8,   14,  1,   14,  3,   14,  295, 8,   14,  1,   15,  1,
        15,  1,   15,  1,   16,  1,   16,  1,   17,  1,   17,  1,   17,  1,   18,  1,   18,  1,   18,  1,   19,  1,
        19,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,   20,  1,
        20,  1,   20,  1,   20,  3,   20,  323, 8,   20,  1,   21,  1,   21,  3,   21,  327, 8,   21,  1,   21,  1,
        21,  3,   21,  331, 8,   21,  1,   21,  1,   21,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,
        1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,
        1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  1,   22,  3,   22,  359, 8,   22,  1,   23,  1,
        23,  1,   23,  1,   24,  1,   24,  1,   24,  1,   24,  3,   24,  368, 8,   24,  1,   24,  1,   24,  3,   24,
        372, 8,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,   24,  1,
        24,  1,   24,  1,   24,  3,   24,  386, 8,   24,  1,   25,  1,   25,  1,   25,  1,   26,  1,   26,  3,   26,
        393, 8,   26,  1,   27,  1,   27,  1,   27,  1,   27,  1,   27,  1,   27,  1,   27,  5,   27,  402, 8,   27,
        10,  27,  12,  27,  405, 9,   27,  1,   27,  1,   27,  3,   27,  409, 8,   27,  1,   28,  1,   28,  1,   28,
        1,   28,  1,   28,  1,   29,  1,   29,  1,   30,  1,   30,  1,   30,  3,   30,  421, 8,   30,  1,   30,  3,
        30,  424, 8,   30,  1,   30,  1,   30,  1,   30,  1,   30,  3,   30,  430, 8,   30,  1,   30,  3,   30,  433,
        8,   30,  1,   30,  1,   30,  1,   30,  3,   30,  438, 8,   30,  1,   30,  3,   30,  441, 8,   30,  1,   30,
        1,   30,  1,   30,  3,   30,  446, 8,   30,  1,   30,  3,   30,  449, 8,   30,  1,   30,  3,   30,  452, 8,
        30,  1,   31,  1,   31,  1,   31,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,   32,  1,
        32,  1,   32,  3,   32,  466, 8,   32,  1,   33,  1,   33,  3,   33,  470, 8,   33,  1,   34,  1,   34,  1,
        34,  1,   34,  3,   34,  476, 8,   34,  1,   35,  1,   35,  1,   36,  1,   36,  1,   36,  1,   36,  1,   36,
        5,   36,  485, 8,   36,  10,  36,  12,  36,  488, 9,   36,  1,   36,  1,   36,  3,   36,  492, 8,   36,  1,
        36,  3,   36,  495, 8,   36,  1,   36,  1,   36,  1,   37,  1,   37,  1,   37,  1,   37,  1,   37,  5,   37,
        504, 8,   37,  10,  37,  12,  37,  507, 9,   37,  3,   37,  509, 8,   37,  1,   37,  1,   37,  1,   38,  1,
        38,  1,   38,  1,   38,  1,   38,  5,   38,  518, 8,   38,  10,  38,  12,  38,  521, 9,   38,  3,   38,  523,
        8,   38,  1,   38,  1,   38,  1,   39,  3,   39,  528, 8,   39,  1,   39,  1,   39,  3,   39,  532, 8,   39,
        1,   40,  3,   40,  535, 8,   40,  1,   40,  1,   40,  1,   41,  3,   41,  540, 8,   41,  1,   41,  1,   41,
        3,   41,  544, 8,   41,  1,   42,  3,   42,  547, 8,   42,  1,   42,  1,   42,  1,   42,  0,   0,   43,  0,
        2,   4,   6,   8,   10,  12,  14,  16,  18,  20,  22,  24,  26,  28,  30,  32,  34,  36,  38,  40,  42,  44,
        46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,  80,  82,  84,  0,   2,
        2,   0,   6,   6,   10,  10,  2,   0,   6,   6,   9,   9,   646, 0,   87,  1,   0,   0,   0,   2,   103, 1,
        0,   0,   0,   4,   118, 1,   0,   0,   0,   6,   157, 1,   0,   0,   0,   8,   159, 1,   0,   0,   0,   10,
        178, 1,   0,   0,   0,   12,  180, 1,   0,   0,   0,   14,  217, 1,   0,   0,   0,   16,  230, 1,   0,   0,
        0,   18,  232, 1,   0,   0,   0,   20,  235, 1,   0,   0,   0,   22,  251, 1,   0,   0,   0,   24,  256, 1,
        0,   0,   0,   26,  258, 1,   0,   0,   0,   28,  294, 1,   0,   0,   0,   30,  296, 1,   0,   0,   0,   32,
        299, 1,   0,   0,   0,   34,  301, 1,   0,   0,   0,   36,  304, 1,   0,   0,   0,   38,  307, 1,   0,   0,
        0,   40,  322, 1,   0,   0,   0,   42,  324, 1,   0,   0,   0,   44,  358, 1,   0,   0,   0,   46,  360, 1,
        0,   0,   0,   48,  385, 1,   0,   0,   0,   50,  387, 1,   0,   0,   0,   52,  392, 1,   0,   0,   0,   54,
        394, 1,   0,   0,   0,   56,  410, 1,   0,   0,   0,   58,  415, 1,   0,   0,   0,   60,  451, 1,   0,   0,
        0,   62,  453, 1,   0,   0,   0,   64,  465, 1,   0,   0,   0,   66,  469, 1,   0,   0,   0,   68,  475, 1,
        0,   0,   0,   70,  477, 1,   0,   0,   0,   72,  479, 1,   0,   0,   0,   74,  498, 1,   0,   0,   0,   76,
        512, 1,   0,   0,   0,   78,  527, 1,   0,   0,   0,   80,  534, 1,   0,   0,   0,   82,  539, 1,   0,   0,
        0,   84,  546, 1,   0,   0,   0,   86,  88,  5,   6,   0,   0,   87,  86,  1,   0,   0,   0,   87,  88,  1,
        0,   0,   0,   88,  89,  1,   0,   0,   0,   89,  95,  3,   4,   2,   0,   90,  91,  3,   2,   1,   0,   91,
        92,  3,   4,   2,   0,   92,  94,  1,   0,   0,   0,   93,  90,  1,   0,   0,   0,   94,  97,  1,   0,   0,
        0,   95,  93,  1,   0,   0,   0,   95,  96,  1,   0,   0,   0,   96,  99,  1,   0,   0,   0,   97,  95,  1,
        0,   0,   0,   98,  100, 5,   6,   0,   0,   99,  98,  1,   0,   0,   0,   99,  100, 1,   0,   0,   0,   100,
        101, 1,   0,   0,   0,   101, 102, 5,   0,   0,   1,   102, 1,   1,   0,   0,   0,   103, 104, 7,   0,   0,
        0,   104, 3,   1,   0,   0,   0,   105, 119, 3,   6,   3,   0,   106, 119, 3,   8,   4,   0,   107, 119, 3,
        12,  6,   0,   108, 119, 3,   14,  7,   0,   109, 119, 3,   16,  8,   0,   110, 119, 3,   18,  9,   0,   111,
        119, 3,   20,  10,  0,   112, 119, 3,   22,  11,  0,   113, 119, 3,   28,  14,  0,   114, 119, 3,   30,  15,
        0,   115, 119, 3,   32,  16,  0,   116, 119, 3,   34,  17,  0,   117, 119, 3,   36,  18,  0,   118, 105, 1,
        0,   0,   0,   118, 106, 1,   0,   0,   0,   118, 107, 1,   0,   0,   0,   118, 108, 1,   0,   0,   0,   118,
        109, 1,   0,   0,   0,   118, 110, 1,   0,   0,   0,   118, 111, 1,   0,   0,   0,   118, 112, 1,   0,   0,
        0,   118, 113, 1,   0,   0,   0,   118, 114, 1,   0,   0,   0,   118, 115, 1,   0,   0,   0,   118, 116, 1,
        0,   0,   0,   118, 117, 1,   0,   0,   0,   119, 5,   1,   0,   0,   0,   120, 125, 5,   63,  0,   0,   121,
        122, 5,   36,  0,   0,   122, 125, 5,   62,  0,   0,   123, 125, 3,   68,  34,  0,   124, 120, 1,   0,   0,
        0,   124, 121, 1,   0,   0,   0,   124, 123, 1,   0,   0,   0,   125, 127, 1,   0,   0,   0,   126, 128, 3,
        70,  35,  0,   127, 126, 1,   0,   0,   0,   128, 129, 1,   0,   0,   0,   129, 127, 1,   0,   0,   0,   129,
        130, 1,   0,   0,   0,   130, 136, 1,   0,   0,   0,   131, 133, 5,   57,  0,   0,   132, 134, 5,   6,   0,
        0,   133, 132, 1,   0,   0,   0,   133, 134, 1,   0,   0,   0,   134, 135, 1,   0,   0,   0,   135, 137, 3,
        40,  20,  0,   136, 131, 1,   0,   0,   0,   136, 137, 1,   0,   0,   0,   137, 158, 1,   0,   0,   0,   138,
        143, 5,   64,  0,   0,   139, 144, 5,   63,  0,   0,   140, 141, 5,   36,  0,   0,   141, 144, 5,   62,  0,
        0,   142, 144, 3,   68,  34,  0,   143, 139, 1,   0,   0,   0,   143, 140, 1,   0,   0,   0,   143, 142, 1,
        0,   0,   0,   144, 146, 1,   0,   0,   0,   145, 147, 3,   70,  35,  0,   146, 145, 1,   0,   0,   0,   147,
        148, 1,   0,   0,   0,   148, 146, 1,   0,   0,   0,   148, 149, 1,   0,   0,   0,   149, 155, 1,   0,   0,
        0,   150, 152, 5,   57,  0,   0,   151, 153, 5,   6,   0,   0,   152, 151, 1,   0,   0,   0,   152, 153, 1,
        0,   0,   0,   153, 154, 1,   0,   0,   0,   154, 156, 3,   40,  20,  0,   155, 150, 1,   0,   0,   0,   155,
        156, 1,   0,   0,   0,   156, 158, 1,   0,   0,   0,   157, 124, 1,   0,   0,   0,   157, 138, 1,   0,   0,
        0,   158, 7,   1,   0,   0,   0,   159, 160, 3,   68,  34,  0,   160, 161, 3,   10,  5,   0,   161, 162, 3,
        68,  34,  0,   162, 9,   1,   0,   0,   0,   163, 179, 5,   48,  0,   0,   164, 179, 5,   58,  0,   0,   165,
        179, 5,   50,  0,   0,   166, 179, 5,   52,  0,   0,   167, 179, 5,   54,  0,   0,   168, 179, 5,   39,  0,
        0,   169, 179, 5,   44,  0,   0,   170, 179, 5,   34,  0,   0,   171, 179, 5,   28,  0,   0,   172, 179, 5,
        22,  0,   0,   173, 179, 5,   32,  0,   0,   174, 179, 5,   37,  0,   0,   175, 179, 5,   42,  0,   0,   176,
        179, 5,   20,  0,   0,   177, 179, 5,   26,  0,   0,   178, 163, 1,   0,   0,   0,   178, 164, 1,   0,   0,
        0,   178, 165, 1,   0,   0,   0,   178, 166, 1,   0,   0,   0,   178, 167, 1,   0,   0,   0,   178, 168, 1,
        0,   0,   0,   178, 169, 1,   0,   0,   0,   178, 170, 1,   0,   0,   0,   178, 171, 1,   0,   0,   0,   178,
        172, 1,   0,   0,   0,   178, 173, 1,   0,   0,   0,   178, 174, 1,   0,   0,   0,   178, 175, 1,   0,   0,
        0,   178, 176, 1,   0,   0,   0,   178, 177, 1,   0,   0,   0,   179, 11,  1,   0,   0,   0,   180, 181, 3,
        68,  34,  0,   181, 182, 3,   40,  20,  0,   182, 13,  1,   0,   0,   0,   183, 193, 3,   78,  39,  0,   184,
        190, 3,   4,   2,   0,   185, 186, 3,   2,   1,   0,   186, 187, 3,   4,   2,   0,   187, 189, 1,   0,   0,
        0,   188, 185, 1,   0,   0,   0,   189, 192, 1,   0,   0,   0,   190, 188, 1,   0,   0,   0,   190, 191, 1,
        0,   0,   0,   191, 194, 1,   0,   0,   0,   192, 190, 1,   0,   0,   0,   193, 184, 1,   0,   0,   0,   193,
        194, 1,   0,   0,   0,   194, 195, 1,   0,   0,   0,   195, 196, 3,   80,  40,  0,   196, 218, 1,   0,   0,
        0,   197, 199, 5,   6,   0,   0,   198, 197, 1,   0,   0,   0,   198, 199, 1,   0,   0,   0,   199, 200, 1,
        0,   0,   0,   200, 201, 5,   18,  0,   0,   201, 203, 5,   11,  0,   0,   202, 204, 5,   6,   0,   0,   203,
        202, 1,   0,   0,   0,   203, 204, 1,   0,   0,   0,   204, 214, 1,   0,   0,   0,   205, 211, 3,   4,   2,
        0,   206, 207, 3,   2,   1,   0,   207, 208, 3,   4,   2,   0,   208, 210, 1,   0,   0,   0,   209, 206, 1,
        0,   0,   0,   210, 213, 1,   0,   0,   0,   211, 209, 1,   0,   0,   0,   211, 212, 1,   0,   0,   0,   212,
        215, 1,   0,   0,   0,   213, 211, 1,   0,   0,   0,   214, 205, 1,   0,   0,   0,   214, 215, 1,   0,   0,
        0,   215, 216, 1,   0,   0,   0,   216, 218, 3,   80,  40,  0,   217, 183, 1,   0,   0,   0,   217, 198, 1,
        0,   0,   0,   218, 15,  1,   0,   0,   0,   219, 220, 3,   70,  35,  0,   220, 221, 3,   68,  34,  0,   221,
        222, 3,   68,  34,  0,   222, 223, 3,   14,  7,   0,   223, 231, 1,   0,   0,   0,   224, 225, 5,   65,  0,
        0,   225, 226, 3,   70,  35,  0,   226, 227, 3,   68,  34,  0,   227, 228, 3,   68,  34,  0,   228, 229, 3,
        14,  7,   0,   229, 231, 1,   0,   0,   0,   230, 219, 1,   0,   0,   0,   230, 224, 1,   0,   0,   0,   231,
        17,  1,   0,   0,   0,   232, 233, 5,   66,  0,   0,   233, 234, 3,   40,  20,  0,   234, 19,  1,   0,   0,
        0,   235, 236, 5,   72,  0,   0,   236, 237, 3,   68,  34,  0,   237, 244, 3,   4,   2,   0,   238, 239, 5,
        73,  0,   0,   239, 240, 3,   68,  34,  0,   240, 241, 3,   4,   2,   0,   241, 243, 1,   0,   0,   0,   242,
        238, 1,   0,   0,   0,   243, 246, 1,   0,   0,   0,   244, 242, 1,   0,   0,   0,   244, 245, 1,   0,   0,
        0,   245, 249, 1,   0,   0,   0,   246, 244, 1,   0,   0,   0,   247, 248, 5,   74,  0,   0,   248, 250, 3,
        4,   2,   0,   249, 247, 1,   0,   0,   0,   249, 250, 1,   0,   0,   0,   250, 21,  1,   0,   0,   0,   251,
        252, 5,   75,  0,   0,   252, 253, 3,   68,  34,  0,   253, 254, 3,   24,  12,  0,   254, 255, 3,   26,  13,
        0,   255, 23,  1,   0,   0,   0,   256, 257, 1,   0,   0,   0,   257, 25,  1,   0,   0,   0,   258, 259, 1,
        0,   0,   0,   259, 27,  1,   0,   0,   0,   260, 261, 5,   85,  0,   0,   261, 263, 5,   70,  0,   0,   262,
        264, 3,   68,  34,  0,   263, 262, 1,   0,   0,   0,   263, 264, 1,   0,   0,   0,   264, 266, 1,   0,   0,
        0,   265, 267, 3,   68,  34,  0,   266, 265, 1,   0,   0,   0,   266, 267, 1,   0,   0,   0,   267, 268, 1,
        0,   0,   0,   268, 295, 3,   4,   2,   0,   269, 270, 5,   85,  0,   0,   270, 272, 5,   71,  0,   0,   271,
        273, 3,   68,  34,  0,   272, 271, 1,   0,   0,   0,   272, 273, 1,   0,   0,   0,   273, 275, 1,   0,   0,
        0,   274, 276, 3,   68,  34,  0,   275, 274, 1,   0,   0,   0,   275, 276, 1,   0,   0,   0,   276, 277, 1,
        0,   0,   0,   277, 295, 3,   4,   2,   0,   278, 280, 5,   70,  0,   0,   279, 281, 3,   68,  34,  0,   280,
        279, 1,   0,   0,   0,   280, 281, 1,   0,   0,   0,   281, 283, 1,   0,   0,   0,   282, 284, 3,   68,  34,
        0,   283, 282, 1,   0,   0,   0,   283, 284, 1,   0,   0,   0,   284, 285, 1,   0,   0,   0,   285, 295, 3,
        4,   2,   0,   286, 288, 5,   71,  0,   0,   287, 289, 3,   68,  34,  0,   288, 287, 1,   0,   0,   0,   288,
        289, 1,   0,   0,   0,   289, 291, 1,   0,   0,   0,   290, 292, 3,   68,  34,  0,   291, 290, 1,   0,   0,
        0,   291, 292, 1,   0,   0,   0,   292, 293, 1,   0,   0,   0,   293, 295, 3,   4,   2,   0,   294, 260, 1,
        0,   0,   0,   294, 269, 1,   0,   0,   0,   294, 278, 1,   0,   0,   0,   294, 286, 1,   0,   0,   0,   295,
        29,  1,   0,   0,   0,   296, 297, 5,   86,  0,   0,   297, 298, 3,   4,   2,   0,   298, 31,  1,   0,   0,
        0,   299, 300, 5,   83,  0,   0,   300, 33,  1,   0,   0,   0,   301, 302, 5,   76,  0,   0,   302, 303, 3,
        4,   2,   0,   303, 35,  1,   0,   0,   0,   304, 305, 5,   77,  0,   0,   305, 306, 3,   4,   2,   0,   306,
        37,  1,   0,   0,   0,   307, 308, 7,   1,   0,   0,   308, 39,  1,   0,   0,   0,   309, 323, 3,   6,   3,
        0,   310, 323, 3,   12,  6,   0,   311, 323, 3,   42,  21,  0,   312, 323, 3,   46,  23,  0,   313, 323, 3,
        50,  25,  0,   314, 323, 3,   54,  27,  0,   315, 323, 3,   56,  28,  0,   316, 323, 3,   60,  30,  0,   317,
        323, 3,   62,  31,  0,   318, 323, 3,   32,  16,  0,   319, 323, 3,   64,  32,  0,   320, 323, 3,   66,  33,
        0,   321, 323, 3,   68,  34,  0,   322, 309, 1,   0,   0,   0,   322, 310, 1,   0,   0,   0,   322, 311, 1,
        0,   0,   0,   322, 312, 1,   0,   0,   0,   322, 313, 1,   0,   0,   0,   322, 314, 1,   0,   0,   0,   322,
        315, 1,   0,   0,   0,   322, 316, 1,   0,   0,   0,   322, 317, 1,   0,   0,   0,   322, 318, 1,   0,   0,
        0,   322, 319, 1,   0,   0,   0,   322, 320, 1,   0,   0,   0,   322, 321, 1,   0,   0,   0,   323, 41,  1,
        0,   0,   0,   324, 326, 3,   68,  34,  0,   325, 327, 5,   6,   0,   0,   326, 325, 1,   0,   0,   0,   326,
        327, 1,   0,   0,   0,   327, 328, 1,   0,   0,   0,   328, 330, 3,   44,  22,  0,   329, 331, 5,   6,   0,
        0,   330, 329, 1,   0,   0,   0,   330, 331, 1,   0,   0,   0,   331, 332, 1,   0,   0,   0,   332, 333, 3,
        68,  34,  0,   333, 43,  1,   0,   0,   0,   334, 359, 5,   93,  0,   0,   335, 359, 5,   40,  0,   0,   336,
        359, 5,   35,  0,   0,   337, 359, 5,   41,  0,   0,   338, 359, 5,   45,  0,   0,   339, 359, 5,   36,  0,
        0,   340, 359, 5,   55,  0,   0,   341, 359, 5,   31,  0,   0,   342, 359, 5,   25,  0,   0,   343, 359, 5,
        30,  0,   0,   344, 359, 5,   24,  0,   0,   345, 359, 5,   38,  0,   0,   346, 359, 5,   43,  0,   0,   347,
        359, 5,   33,  0,   0,   348, 359, 5,   29,  0,   0,   349, 359, 5,   23,  0,   0,   350, 359, 5,   27,  0,
        0,   351, 359, 5,   21,  0,   0,   352, 359, 5,   56,  0,   0,   353, 359, 5,   46,  0,   0,   354, 359, 5,
        49,  0,   0,   355, 359, 5,   59,  0,   0,   356, 359, 5,   51,  0,   0,   357, 359, 5,   53,  0,   0,   358,
        334, 1,   0,   0,   0,   358, 335, 1,   0,   0,   0,   358, 336, 1,   0,   0,   0,   358, 337, 1,   0,   0,
        0,   358, 338, 1,   0,   0,   0,   358, 339, 1,   0,   0,   0,   358, 340, 1,   0,   0,   0,   358, 341, 1,
        0,   0,   0,   358, 342, 1,   0,   0,   0,   358, 343, 1,   0,   0,   0,   358, 344, 1,   0,   0,   0,   358,
        345, 1,   0,   0,   0,   358, 346, 1,   0,   0,   0,   358, 347, 1,   0,   0,   0,   358, 348, 1,   0,   0,
        0,   358, 349, 1,   0,   0,   0,   358, 350, 1,   0,   0,   0,   358, 351, 1,   0,   0,   0,   358, 352, 1,
        0,   0,   0,   358, 353, 1,   0,   0,   0,   358, 354, 1,   0,   0,   0,   358, 355, 1,   0,   0,   0,   358,
        356, 1,   0,   0,   0,   358, 357, 1,   0,   0,   0,   359, 45,  1,   0,   0,   0,   360, 361, 3,   68,  34,
        0,   361, 362, 3,   48,  24,  0,   362, 47,  1,   0,   0,   0,   363, 364, 5,   8,   0,   0,   364, 386, 3,
        68,  34,  0,   365, 367, 5,   15,  0,   0,   366, 368, 5,   6,   0,   0,   367, 366, 1,   0,   0,   0,   367,
        368, 1,   0,   0,   0,   368, 369, 1,   0,   0,   0,   369, 371, 3,   40,  20,  0,   370, 372, 5,   6,   0,
        0,   371, 370, 1,   0,   0,   0,   371, 372, 1,   0,   0,   0,   372, 373, 1,   0,   0,   0,   373, 374, 5,
        16,  0,   0,   374, 386, 1,   0,   0,   0,   375, 376, 5,   8,   0,   0,   376, 386, 5,   60,  0,   0,   377,
        378, 5,   8,   0,   0,   378, 386, 5,   61,  0,   0,   379, 380, 5,   8,   0,   0,   380, 386, 5,   36,  0,
        0,   381, 382, 5,   8,   0,   0,   382, 386, 5,   49,  0,   0,   383, 386, 5,   19,  0,   0,   384, 386, 5,
        17,  0,   0,   385, 363, 1,   0,   0,   0,   385, 365, 1,   0,   0,   0,   385, 375, 1,   0,   0,   0,   385,
        377, 1,   0,   0,   0,   385, 379, 1,   0,   0,   0,   385, 381, 1,   0,   0,   0,   385, 383, 1,   0,   0,
        0,   385, 384, 1,   0,   0,   0,   386, 49,  1,   0,   0,   0,   387, 388, 3,   52,  26,  0,   388, 389, 3,
        68,  34,  0,   389, 51,  1,   0,   0,   0,   390, 393, 5,   47,  0,   0,   391, 393, 5,   45,  0,   0,   392,
        390, 1,   0,   0,   0,   392, 391, 1,   0,   0,   0,   393, 53,  1,   0,   0,   0,   394, 395, 5,   72,  0,
        0,   395, 396, 3,   68,  34,  0,   396, 403, 3,   40,  20,  0,   397, 398, 5,   73,  0,   0,   398, 399, 3,
        68,  34,  0,   399, 400, 3,   40,  20,  0,   400, 402, 1,   0,   0,   0,   401, 397, 1,   0,   0,   0,   402,
        405, 1,   0,   0,   0,   403, 401, 1,   0,   0,   0,   403, 404, 1,   0,   0,   0,   404, 408, 1,   0,   0,
        0,   405, 403, 1,   0,   0,   0,   406, 407, 5,   74,  0,   0,   407, 409, 3,   40,  20,  0,   408, 406, 1,
        0,   0,   0,   408, 409, 1,   0,   0,   0,   409, 55,  1,   0,   0,   0,   410, 411, 5,   75,  0,   0,   411,
        412, 3,   68,  34,  0,   412, 413, 3,   24,  12,  0,   413, 414, 3,   58,  29,  0,   414, 57,  1,   0,   0,
        0,   415, 416, 1,   0,   0,   0,   416, 59,  1,   0,   0,   0,   417, 418, 5,   85,  0,   0,   418, 420, 5,
        70,  0,   0,   419, 421, 3,   68,  34,  0,   420, 419, 1,   0,   0,   0,   420, 421, 1,   0,   0,   0,   421,
        423, 1,   0,   0,   0,   422, 424, 3,   68,  34,  0,   423, 422, 1,   0,   0,   0,   423, 424, 1,   0,   0,
        0,   424, 425, 1,   0,   0,   0,   425, 452, 3,   40,  20,  0,   426, 427, 5,   85,  0,   0,   427, 429, 5,
        71,  0,   0,   428, 430, 3,   68,  34,  0,   429, 428, 1,   0,   0,   0,   429, 430, 1,   0,   0,   0,   430,
        432, 1,   0,   0,   0,   431, 433, 3,   68,  34,  0,   432, 431, 1,   0,   0,   0,   432, 433, 1,   0,   0,
        0,   433, 434, 1,   0,   0,   0,   434, 452, 3,   40,  20,  0,   435, 437, 5,   70,  0,   0,   436, 438, 3,
        68,  34,  0,   437, 436, 1,   0,   0,   0,   437, 438, 1,   0,   0,   0,   438, 440, 1,   0,   0,   0,   439,
        441, 3,   68,  34,  0,   440, 439, 1,   0,   0,   0,   440, 441, 1,   0,   0,   0,   441, 442, 1,   0,   0,
        0,   442, 452, 3,   40,  20,  0,   443, 445, 5,   71,  0,   0,   444, 446, 3,   68,  34,  0,   445, 444, 1,
        0,   0,   0,   445, 446, 1,   0,   0,   0,   446, 448, 1,   0,   0,   0,   447, 449, 3,   68,  34,  0,   448,
        447, 1,   0,   0,   0,   448, 449, 1,   0,   0,   0,   449, 450, 1,   0,   0,   0,   450, 452, 3,   40,  20,
        0,   451, 417, 1,   0,   0,   0,   451, 426, 1,   0,   0,   0,   451, 435, 1,   0,   0,   0,   451, 443, 1,
        0,   0,   0,   452, 61,  1,   0,   0,   0,   453, 454, 5,   86,  0,   0,   454, 455, 3,   40,  20,  0,   455,
        63,  1,   0,   0,   0,   456, 457, 3,   68,  34,  0,   457, 458, 3,   68,  34,  0,   458, 459, 3,   14,  7,
        0,   459, 466, 1,   0,   0,   0,   460, 461, 5,   65,  0,   0,   461, 462, 3,   68,  34,  0,   462, 463, 3,
        68,  34,  0,   463, 464, 3,   14,  7,   0,   464, 466, 1,   0,   0,   0,   465, 456, 1,   0,   0,   0,   465,
        460, 1,   0,   0,   0,   466, 65,  1,   0,   0,   0,   467, 470, 5,   1,   0,   0,   468, 470, 5,   2,   0,
        0,   469, 467, 1,   0,   0,   0,   469, 468, 1,   0,   0,   0,   470, 67,  1,   0,   0,   0,   471, 476, 3,
        70,  35,  0,   472, 476, 3,   72,  36,  0,   473, 476, 3,   74,  37,  0,   474, 476, 3,   76,  38,  0,   475,
        471, 1,   0,   0,   0,   475, 472, 1,   0,   0,   0,   475, 473, 1,   0,   0,   0,   475, 474, 1,   0,   0,
        0,   476, 69,  1,   0,   0,   0,   477, 478, 5,   94,  0,   0,   478, 71,  1,   0,   0,   0,   479, 494, 3,
        78,  39,  0,   480, 486, 3,   4,   2,   0,   481, 482, 3,   2,   1,   0,   482, 483, 3,   4,   2,   0,   483,
        485, 1,   0,   0,   0,   484, 481, 1,   0,   0,   0,   485, 488, 1,   0,   0,   0,   486, 484, 1,   0,   0,
        0,   486, 487, 1,   0,   0,   0,   487, 489, 1,   0,   0,   0,   488, 486, 1,   0,   0,   0,   489, 490, 3,
        2,   1,   0,   490, 492, 1,   0,   0,   0,   491, 480, 1,   0,   0,   0,   491, 492, 1,   0,   0,   0,   492,
        493, 1,   0,   0,   0,   493, 495, 3,   40,  20,  0,   494, 491, 1,   0,   0,   0,   494, 495, 1,   0,   0,
        0,   495, 496, 1,   0,   0,   0,   496, 497, 3,   80,  40,  0,   497, 73,  1,   0,   0,   0,   498, 508, 3,
        82,  41,  0,   499, 505, 3,   6,   3,   0,   500, 501, 3,   38,  19,  0,   501, 502, 3,   6,   3,   0,   502,
        504, 1,   0,   0,   0,   503, 500, 1,   0,   0,   0,   504, 507, 1,   0,   0,   0,   505, 503, 1,   0,   0,
        0,   505, 506, 1,   0,   0,   0,   506, 509, 1,   0,   0,   0,   507, 505, 1,   0,   0,   0,   508, 499, 1,
        0,   0,   0,   508, 509, 1,   0,   0,   0,   509, 510, 1,   0,   0,   0,   510, 511, 3,   84,  42,  0,   511,
        75,  1,   0,   0,   0,   512, 522, 3,   78,  39,  0,   513, 519, 3,   40,  20,  0,   514, 515, 3,   38,  19,
        0,   515, 516, 3,   40,  20,  0,   516, 518, 1,   0,   0,   0,   517, 514, 1,   0,   0,   0,   518, 521, 1,
        0,   0,   0,   519, 517, 1,   0,   0,   0,   519, 520, 1,   0,   0,   0,   520, 523, 1,   0,   0,   0,   521,
        519, 1,   0,   0,   0,   522, 513, 1,   0,   0,   0,   522, 523, 1,   0,   0,   0,   523, 524, 1,   0,   0,
        0,   524, 525, 3,   80,  40,  0,   525, 77,  1,   0,   0,   0,   526, 528, 5,   6,   0,   0,   527, 526, 1,
        0,   0,   0,   527, 528, 1,   0,   0,   0,   528, 529, 1,   0,   0,   0,   529, 531, 5,   11,  0,   0,   530,
        532, 5,   6,   0,   0,   531, 530, 1,   0,   0,   0,   531, 532, 1,   0,   0,   0,   532, 79,  1,   0,   0,
        0,   533, 535, 5,   6,   0,   0,   534, 533, 1,   0,   0,   0,   534, 535, 1,   0,   0,   0,   535, 536, 1,
        0,   0,   0,   536, 537, 5,   12,  0,   0,   537, 81,  1,   0,   0,   0,   538, 540, 5,   6,   0,   0,   539,
        538, 1,   0,   0,   0,   539, 540, 1,   0,   0,   0,   540, 541, 1,   0,   0,   0,   541, 543, 5,   13,  0,
        0,   542, 544, 5,   6,   0,   0,   543, 542, 1,   0,   0,   0,   543, 544, 1,   0,   0,   0,   544, 83,  1,
        0,   0,   0,   545, 547, 5,   6,   0,   0,   546, 545, 1,   0,   0,   0,   546, 547, 1,   0,   0,   0,   547,
        548, 1,   0,   0,   0,   548, 549, 5,   14,  0,   0,   549, 85,  1,   0,   0,   0,   68,  87,  95,  99,  118,
        124, 129, 133, 136, 143, 148, 152, 155, 157, 178, 190, 193, 198, 203, 211, 214, 217, 230, 244, 249, 263, 266,
        272, 275, 280, 283, 288, 291, 294, 322, 326, 330, 358, 367, 371, 385, 392, 403, 408, 420, 423, 429, 432, 437,
        440, 445, 448, 451, 465, 469, 475, 486, 491, 494, 505, 508, 519, 522, 527, 531, 534, 539, 543, 546
    };
    staticData->serializedATN = antlr4::atn::SerializedATNView(
        serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0])
    );

    antlr4::atn::ATNDeserializer deserializer;
    staticData->atn = deserializer.deserialize(staticData->serializedATN);

    const size_t count = staticData->atn->getNumberOfDecisions();
    staticData->decisionToDFA.reserve(count);
    for (size_t i = 0; i < count; i++) {
        staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
    }
    whixyparserParserStaticData = std::move(staticData);
}

} // namespace

WhixyParser::WhixyParser(TokenStream* input): WhixyParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WhixyParser::WhixyParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options): Parser(input)
{
    WhixyParser::initialize();
    _interpreter = new atn::ParserATNSimulator(
        this, *whixyparserParserStaticData->atn, whixyparserParserStaticData->decisionToDFA,
        whixyparserParserStaticData->sharedContextCache, options
    );
}

WhixyParser::~WhixyParser() { delete _interpreter; }

const atn::ATN& WhixyParser::getATN() const { return *whixyparserParserStaticData->atn; }

std::string WhixyParser::getGrammarFileName() const { return "WhixyParser.g4"; }

const std::vector<std::string>& WhixyParser::getRuleNames() const { return whixyparserParserStaticData->ruleNames; }

const dfa::Vocabulary& WhixyParser::getVocabulary() const { return whixyparserParserStaticData->vocabulary; }

antlr4::atn::SerializedATNView WhixyParser::getSerializedATN() const
{
    return whixyparserParserStaticData->serializedATN;
}

//----------------- SrcFileContext ------------------------------------------------------------------

WhixyParser::SrcFileContext::SrcFileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::StmtContext*> WhixyParser::SrcFileContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::SrcFileContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

tree::TerminalNode* WhixyParser::SrcFileContext::EOF() { return getToken(WhixyParser::EOF, 0); }

std::vector<tree::TerminalNode*> WhixyParser::SrcFileContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::SrcFileContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

std::vector<WhixyParser::StmtSepContext*> WhixyParser::SrcFileContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::SrcFileContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::SrcFileContext::getRuleIndex() const { return WhixyParser::RuleSrcFile; }

void WhixyParser::SrcFileContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSrcFile(this);
}

void WhixyParser::SrcFileContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSrcFile(this);
}

WhixyParser::SrcFileContext* WhixyParser::srcFile()
{
    SrcFileContext* _localctx = _tracker.createInstance<SrcFileContext>(_ctx, getState());
    enterRule(_localctx, 0, WhixyParser::RuleSrcFile);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(87);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
        case 1: {
            setState(86);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(89);
        stmt();
        setState(95);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(90);
                stmtSep();
                setState(91);
                stmt();
            }
            setState(97);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        }
        setState(99);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(98);
            match(WhixyParser::NEWLINE);
        }
        setState(101);
        match(WhixyParser::EOF);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtSepContext ------------------------------------------------------------------

WhixyParser::StmtSepContext::StmtSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StmtSepContext::SEMICOLON() { return getToken(WhixyParser::SEMICOLON, 0); }

tree::TerminalNode* WhixyParser::StmtSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::StmtSepContext::getRuleIndex() const { return WhixyParser::RuleStmtSep; }

void WhixyParser::StmtSepContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterStmtSep(this);
}

void WhixyParser::StmtSepContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitStmtSep(this);
}

WhixyParser::StmtSepContext* WhixyParser::stmtSep()
{
    StmtSepContext* _localctx = _tracker.createInstance<StmtSepContext>(_ctx, getState());
    enterRule(_localctx, 2, WhixyParser::RuleStmtSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(103);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::NEWLINE

              || _la == WhixyParser::SEMICOLON)) {
            _errHandler->recoverInline(this);
        }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

WhixyParser::StmtContext::StmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::StmtContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::AssignStmtContext* WhixyParser::StmtContext::assignStmt()
{
    return getRuleContext<WhixyParser::AssignStmtContext>(0);
}

WhixyParser::CallContext* WhixyParser::StmtContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BlockStmtContext* WhixyParser::StmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::RoutineStmtContext* WhixyParser::StmtContext::routineStmt()
{
    return getRuleContext<WhixyParser::RoutineStmtContext>(0);
}

WhixyParser::ReturnStmtContext* WhixyParser::StmtContext::returnStmt()
{
    return getRuleContext<WhixyParser::ReturnStmtContext>(0);
}

WhixyParser::IfStmtContext* WhixyParser::StmtContext::ifStmt() { return getRuleContext<WhixyParser::IfStmtContext>(0); }

WhixyParser::WhereStmtContext* WhixyParser::StmtContext::whereStmt()
{
    return getRuleContext<WhixyParser::WhereStmtContext>(0);
}

WhixyParser::LoopStmtContext* WhixyParser::StmtContext::loopStmt()
{
    return getRuleContext<WhixyParser::LoopStmtContext>(0);
}

WhixyParser::ComptStmtContext* WhixyParser::StmtContext::comptStmt()
{
    return getRuleContext<WhixyParser::ComptStmtContext>(0);
}

WhixyParser::UnreachableContext* WhixyParser::StmtContext::unreachable()
{
    return getRuleContext<WhixyParser::UnreachableContext>(0);
}

WhixyParser::DeferStmtContext* WhixyParser::StmtContext::deferStmt()
{
    return getRuleContext<WhixyParser::DeferStmtContext>(0);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::StmtContext::errdeferStmt()
{
    return getRuleContext<WhixyParser::ErrdeferStmtContext>(0);
}

size_t WhixyParser::StmtContext::getRuleIndex() const { return WhixyParser::RuleStmt; }

void WhixyParser::StmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterStmt(this);
}

void WhixyParser::StmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitStmt(this);
}

WhixyParser::StmtContext* WhixyParser::stmt()
{
    StmtContext* _localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
    enterRule(_localctx, 4, WhixyParser::RuleStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(118);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(105);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(106);
            assignStmt();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(107);
            call();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(108);
            blockStmt();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(109);
            routineStmt();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(110);
            returnStmt();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(111);
            ifStmt();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(112);
            whereStmt();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(113);
            loopStmt();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(114);
            comptStmt();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(115);
            unreachable();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(116);
            deferStmt();
            break;
        }

        case 13: {
            enterOuterAlt(_localctx, 13);
            setState(117);
            errdeferStmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FieldContext ------------------------------------------------------------------

WhixyParser::FieldContext::FieldContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::FieldContext::getRuleIndex() const { return WhixyParser::RuleField; }

void WhixyParser::FieldContext::copyFrom(FieldContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- MutableValsContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::MutableValsContext::MUT() { return getToken(WhixyParser::MUT, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::AUTO() { return getToken(WhixyParser::AUTO, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::THIS() { return getToken(WhixyParser::THIS, 0); }

WhixyParser::AtomContext* WhixyParser::MutableValsContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::MutableValsContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::MutableValsContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::MutableValsContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

WhixyParser::ExprContext* WhixyParser::MutableValsContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::MutableValsContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

WhixyParser::MutableValsContext::MutableValsContext(FieldContext* ctx) { copyFrom(ctx); }

void WhixyParser::MutableValsContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterMutableVals(this);
}
void WhixyParser::MutableValsContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitMutableVals(this);
}
//----------------- ImmutableValsContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ImmutableValsContext::AUTO() { return getToken(WhixyParser::AUTO, 0); }

tree::TerminalNode* WhixyParser::ImmutableValsContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

tree::TerminalNode* WhixyParser::ImmutableValsContext::THIS() { return getToken(WhixyParser::THIS, 0); }

WhixyParser::AtomContext* WhixyParser::ImmutableValsContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::ImmutableValsContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::ImmutableValsContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::ImmutableValsContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

WhixyParser::ExprContext* WhixyParser::ImmutableValsContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::ImmutableValsContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

WhixyParser::ImmutableValsContext::ImmutableValsContext(FieldContext* ctx) { copyFrom(ctx); }

void WhixyParser::ImmutableValsContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterImmutableVals(this);
}
void WhixyParser::ImmutableValsContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitImmutableVals(this);
}
WhixyParser::FieldContext* WhixyParser::field()
{
    FieldContext* _localctx = _tracker.createInstance<FieldContext>(_ctx, getState());
    enterRule(_localctx, 6, WhixyParser::RuleField);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(157);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::NEWLINE:
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::ASTERISK:
        case WhixyParser::AUTO:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::ImmutableValsContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(124);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::AUTO: {
                setState(120);
                match(WhixyParser::AUTO);
                break;
            }

            case WhixyParser::ASTERISK: {
                setState(121);
                match(WhixyParser::ASTERISK);
                setState(122);
                match(WhixyParser::THIS);
                break;
            }

            case WhixyParser::NEWLINE:
            case WhixyParser::OPENPARENTHESIS:
            case WhixyParser::OPENBRACE:
            case WhixyParser::TOKEN: {
                setState(123);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(127);
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
                setState(126);
                token();
                setState(129);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            while (_la == WhixyParser::TOKEN);
            setState(136);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::EQUAL) {
                setState(131);
                match(WhixyParser::EQUAL);
                setState(133);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
                case 1: {
                    setState(132);
                    match(WhixyParser::NEWLINE);
                    break;
                }

                default: break;
                }
                setState(135);
                expr();
            }
            break;
        }

        case WhixyParser::MUT: {
            _localctx = _tracker.createInstance<WhixyParser::MutableValsContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(138);
            match(WhixyParser::MUT);
            setState(143);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::AUTO: {
                setState(139);
                match(WhixyParser::AUTO);
                break;
            }

            case WhixyParser::ASTERISK: {
                setState(140);
                match(WhixyParser::ASTERISK);
                setState(141);
                match(WhixyParser::THIS);
                break;
            }

            case WhixyParser::NEWLINE:
            case WhixyParser::OPENPARENTHESIS:
            case WhixyParser::OPENBRACE:
            case WhixyParser::TOKEN: {
                setState(142);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(146);
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
                setState(145);
                token();
                setState(148);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            while (_la == WhixyParser::TOKEN);
            setState(155);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::EQUAL) {
                setState(150);
                match(WhixyParser::EQUAL);
                setState(152);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
                case 1: {
                    setState(151);
                    match(WhixyParser::NEWLINE);
                    break;
                }

                default: break;
                }
                setState(154);
                expr();
            }
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignStmtContext ------------------------------------------------------------------

WhixyParser::AssignStmtContext::AssignStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::AssignStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::AssignStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::AssignOpContext* WhixyParser::AssignStmtContext::assignOp()
{
    return getRuleContext<WhixyParser::AssignOpContext>(0);
}

size_t WhixyParser::AssignStmtContext::getRuleIndex() const { return WhixyParser::RuleAssignStmt; }

void WhixyParser::AssignStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAssignStmt(this);
}

void WhixyParser::AssignStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAssignStmt(this);
}

WhixyParser::AssignStmtContext* WhixyParser::assignStmt()
{
    AssignStmtContext* _localctx = _tracker.createInstance<AssignStmtContext>(_ctx, getState());
    enterRule(_localctx, 8, WhixyParser::RuleAssignStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(159);
        atom();
        setState(160);
        assignOp();
        setState(161);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignOpContext ------------------------------------------------------------------

WhixyParser::AssignOpContext::AssignOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::AssignOpContext::getRuleIndex() const { return WhixyParser::RuleAssignOp; }

void WhixyParser::AssignOpContext::copyFrom(AssignOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- SubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::SubEqualsOpContext::MINUS_EQUAL() { return getToken(WhixyParser::MINUS_EQUAL, 0); }

WhixyParser::SubEqualsOpContext::SubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::SubEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSubEqualsOp(this);
}
void WhixyParser::SubEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSubEqualsOp(this);
}
//----------------- WrappingTimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingTimesEqualsOpContext::ASTERISK_PERCENT_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingTimesEqualsOpContext::WrappingTimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingTimesEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingTimesEqualsOp(this);
}
void WhixyParser::WrappingTimesEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingTimesEqualsOp(this);
}
//----------------- AndEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AndEqualsOpContext::AMPERSAND_EQUAL()
{
    return getToken(WhixyParser::AMPERSAND_EQUAL, 0);
}

WhixyParser::AndEqualsOpContext::AndEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AndEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAndEqualsOp(this);
}
void WhixyParser::AndEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAndEqualsOp(this);
}
//----------------- LeftRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftRotateEqualsOpContext::LESSTHAN_LESSTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::LeftRotateEqualsOpContext::LeftRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftRotateEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftRotateEqualsOp(this);
}
void WhixyParser::LeftRotateEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftRotateEqualsOp(this);
}
//----------------- LeftShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftShiftEqualsOpContext::LESSTHAN_LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_EQUAL, 0);
}

WhixyParser::LeftShiftEqualsOpContext::LeftShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftShiftEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftShiftEqualsOp(this);
}
void WhixyParser::LeftShiftEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftShiftEqualsOp(this);
}
//----------------- OrEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::OrEqualsOpContext::PIPE_EQUAL() { return getToken(WhixyParser::PIPE_EQUAL, 0); }

WhixyParser::OrEqualsOpContext::OrEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::OrEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOrEqualsOp(this);
}
void WhixyParser::OrEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOrEqualsOp(this);
}
//----------------- RightRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightRotateEqualsOpContext::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::RightRotateEqualsOpContext::RightRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightRotateEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightRotateEqualsOp(this);
}
void WhixyParser::RightRotateEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightRotateEqualsOp(this);
}
//----------------- TimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TimesEqualsOpContext::ASTERISK_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_EQUAL, 0);
}

WhixyParser::TimesEqualsOpContext::TimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::TimesEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTimesEqualsOp(this);
}
void WhixyParser::TimesEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTimesEqualsOp(this);
}
//----------------- AddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddEqualsOpContext::PLUS_EQUAL() { return getToken(WhixyParser::PLUS_EQUAL, 0); }

WhixyParser::AddEqualsOpContext::AddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddEqualsOp(this);
}
void WhixyParser::AddEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddEqualsOp(this);
}
//----------------- RightShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightShiftEqualsOpContext::GREATERTHAN_GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL, 0);
}

WhixyParser::RightShiftEqualsOpContext::RightShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightShiftEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightShiftEqualsOp(this);
}
void WhixyParser::RightShiftEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightShiftEqualsOp(this);
}
//----------------- WrappingAddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingAddEqualsOpContext::PLUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::PLUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingAddEqualsOpContext::WrappingAddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingAddEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingAddEqualsOp(this);
}
void WhixyParser::WrappingAddEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingAddEqualsOp(this);
}
//----------------- ModEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ModEqualsOpContext::PERCENT_EQUAL() { return getToken(WhixyParser::PERCENT_EQUAL, 0); }

WhixyParser::ModEqualsOpContext::ModEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ModEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterModEqualsOp(this);
}
void WhixyParser::ModEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitModEqualsOp(this);
}
//----------------- DivideEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DivideEqualsOpContext::SLASH_EQUAL() { return getToken(WhixyParser::SLASH_EQUAL, 0); }

WhixyParser::DivideEqualsOpContext::DivideEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DivideEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDivideEqualsOp(this);
}
void WhixyParser::DivideEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDivideEqualsOp(this);
}
//----------------- WrappingSubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingSubEqualsOpContext::MINUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::MINUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingSubEqualsOpContext::WrappingSubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingSubEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingSubEqualsOp(this);
}
void WhixyParser::WrappingSubEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingSubEqualsOp(this);
}
//----------------- XorEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::XorEqualsOpContext::CARROT_EQUAL() { return getToken(WhixyParser::CARROT_EQUAL, 0); }

WhixyParser::XorEqualsOpContext::XorEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::XorEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterXorEqualsOp(this);
}
void WhixyParser::XorEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitXorEqualsOp(this);
}
WhixyParser::AssignOpContext* WhixyParser::assignOp()
{
    AssignOpContext* _localctx = _tracker.createInstance<AssignOpContext>(_ctx, getState());
    enterRule(_localctx, 10, WhixyParser::RuleAssignOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(178);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AMPERSAND_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AndEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(163);
            match(WhixyParser::AMPERSAND_EQUAL);
            break;
        }

        case WhixyParser::PIPE_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::OrEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(164);
            match(WhixyParser::PIPE_EQUAL);
            break;
        }

        case WhixyParser::PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::ModEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(165);
            match(WhixyParser::PERCENT_EQUAL);
            break;
        }

        case WhixyParser::CARROT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::XorEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(166);
            match(WhixyParser::CARROT_EQUAL);
            break;
        }

        case WhixyParser::SLASH_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::DivideEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(167);
            match(WhixyParser::SLASH_EQUAL);
            break;
        }

        case WhixyParser::PLUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(168);
            match(WhixyParser::PLUS_EQUAL);
            break;
        }

        case WhixyParser::MINUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::SubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(169);
            match(WhixyParser::MINUS_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::TimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(170);
            match(WhixyParser::ASTERISK_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 9);
            setState(171);
            match(WhixyParser::LESSTHAN_LESSTHAN_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 10);
            setState(172);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingTimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 11);
            setState(173);
            match(WhixyParser::ASTERISK_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::PLUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingAddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 12);
            setState(174);
            match(WhixyParser::PLUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::MINUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingSubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 13);
            setState(175);
            match(WhixyParser::MINUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 14);
            setState(176);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 15);
            setState(177);
            match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CallContext ------------------------------------------------------------------

WhixyParser::CallContext::CallContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::CallContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ExprContext* WhixyParser::CallContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::CallContext::getRuleIndex() const { return WhixyParser::RuleCall; }

void WhixyParser::CallContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCall(this);
}

void WhixyParser::CallContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCall(this);
}

WhixyParser::CallContext* WhixyParser::call()
{
    CallContext* _localctx = _tracker.createInstance<CallContext>(_ctx, getState());
    enterRule(_localctx, 12, WhixyParser::RuleCall);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(180);
        atom();
        setState(181);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockStmtContext ------------------------------------------------------------------

WhixyParser::BlockStmtContext::BlockStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::BlockStmtContext::getRuleIndex() const { return WhixyParser::RuleBlockStmt; }

void WhixyParser::BlockStmtContext::copyFrom(BlockStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- FuncBlockStmtContext ------------------------------------------------------------------

WhixyParser::OParenContext* WhixyParser::FuncBlockStmtContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::FuncBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::FuncBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::FuncBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::FuncBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::FuncBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::FuncBlockStmtContext::FuncBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::FuncBlockStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterFuncBlockStmt(this);
}
void WhixyParser::FuncBlockStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitFuncBlockStmt(this);
}
//----------------- ProcBlockStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ProcBlockStmtContext::DOLLAR() { return getToken(WhixyParser::DOLLAR, 0); }

tree::TerminalNode* WhixyParser::ProcBlockStmtContext::OPENPARENTHESIS()
{
    return getToken(WhixyParser::OPENPARENTHESIS, 0);
}

WhixyParser::CParenContext* WhixyParser::ProcBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<tree::TerminalNode*> WhixyParser::ProcBlockStmtContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::ProcBlockStmtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

std::vector<WhixyParser::StmtContext*> WhixyParser::ProcBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::ProcBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::ProcBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::ProcBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::ProcBlockStmtContext::ProcBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::ProcBlockStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterProcBlockStmt(this);
}
void WhixyParser::ProcBlockStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitProcBlockStmt(this);
}
WhixyParser::BlockStmtContext* WhixyParser::blockStmt()
{
    BlockStmtContext* _localctx = _tracker.createInstance<BlockStmtContext>(_ctx, getState());
    enterRule(_localctx, 14, WhixyParser::RuleBlockStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        setState(217);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::FuncBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(183);
            oParen();
            setState(193);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
            case 1: {
                setState(184);
                stmt();
                setState(190);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(185);
                        stmtSep();
                        setState(186);
                        stmt();
                    }
                    setState(192);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(195);
            cParen();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::ProcBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(198);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::NEWLINE) {
                setState(197);
                match(WhixyParser::NEWLINE);
            }
            setState(200);
            match(WhixyParser::DOLLAR);
            setState(201);
            match(WhixyParser::OPENPARENTHESIS);
            setState(203);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
            case 1: {
                setState(202);
                match(WhixyParser::NEWLINE);
                break;
            }

            default: break;
            }
            setState(214);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
            case 1: {
                setState(205);
                stmt();
                setState(211);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(206);
                        stmtSep();
                        setState(207);
                        stmt();
                    }
                    setState(213);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(216);
            cParen();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineStmtContext ------------------------------------------------------------------

WhixyParser::RoutineStmtContext::RoutineStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineStmtContext::getRuleIndex() const { return WhixyParser::RuleRoutineStmt; }

void WhixyParser::RoutineStmtContext::copyFrom(RoutineStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainRoutineStmtContext ------------------------------------------------------------------

WhixyParser::TokenContext* WhixyParser::PlainRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainRoutineStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainRoutineStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineStmtContext::PlainRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainRoutineStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainRoutineStmt(this);
}
void WhixyParser::PlainRoutineStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainRoutineStmt(this);
}
//----------------- InlineRoutineStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineStmtContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

WhixyParser::TokenContext* WhixyParser::InlineRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::InlineRoutineStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::InlineRoutineStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineStmtContext::InlineRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::InlineRoutineStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInlineRoutineStmt(this);
}
void WhixyParser::InlineRoutineStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInlineRoutineStmt(this);
}
WhixyParser::RoutineStmtContext* WhixyParser::routineStmt()
{
    RoutineStmtContext* _localctx = _tracker.createInstance<RoutineStmtContext>(_ctx, getState());
    enterRule(_localctx, 16, WhixyParser::RuleRoutineStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(230);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(219);
            token();
            setState(220);
            atom();
            setState(221);
            atom();
            setState(222);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(224);
            match(WhixyParser::INLINE);
            setState(225);
            token();
            setState(226);
            atom();
            setState(227);
            atom();
            setState(228);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

WhixyParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ReturnStmtContext::RETURN() { return getToken(WhixyParser::RETURN, 0); }

WhixyParser::ExprContext* WhixyParser::ReturnStmtContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::ReturnStmtContext::getRuleIndex() const { return WhixyParser::RuleReturnStmt; }

void WhixyParser::ReturnStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterReturnStmt(this);
}

void WhixyParser::ReturnStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitReturnStmt(this);
}

WhixyParser::ReturnStmtContext* WhixyParser::returnStmt()
{
    ReturnStmtContext* _localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
    enterRule(_localctx, 18, WhixyParser::RuleReturnStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(232);
        match(WhixyParser::RETURN);
        setState(233);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

WhixyParser::IfStmtContext::IfStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfStmtContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::IfStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::IfStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfStmtContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfStmtContext::getRuleIndex() const { return WhixyParser::RuleIfStmt; }

void WhixyParser::IfStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterIfStmt(this);
}

void WhixyParser::IfStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitIfStmt(this);
}

WhixyParser::IfStmtContext* WhixyParser::ifStmt()
{
    IfStmtContext* _localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
    enterRule(_localctx, 20, WhixyParser::RuleIfStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(235);
        match(WhixyParser::IF);
        setState(236);
        atom();
        setState(237);
        stmt();
        setState(244);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(238);
                match(WhixyParser::ELSEIF);
                setState(239);
                atom();
                setState(240);
                stmt();
            }
            setState(246);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
        }
        setState(249);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
        case 1: {
            setState(247);
            match(WhixyParser::ELSE);
            setState(248);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereStmtContext ------------------------------------------------------------------

WhixyParser::WhereStmtContext::WhereStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereStmtContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereStmtContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereStmtContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::WhereStmtContext::caseStmtBlock()
{
    return getRuleContext<WhixyParser::CaseStmtBlockContext>(0);
}

size_t WhixyParser::WhereStmtContext::getRuleIndex() const { return WhixyParser::RuleWhereStmt; }

void WhixyParser::WhereStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWhereStmt(this);
}

void WhixyParser::WhereStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWhereStmt(this);
}

WhixyParser::WhereStmtContext* WhixyParser::whereStmt()
{
    WhereStmtContext* _localctx = _tracker.createInstance<WhereStmtContext>(_ctx, getState());
    enterRule(_localctx, 22, WhixyParser::RuleWhereStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(251);
        match(WhixyParser::WHERE);
        setState(252);
        atom();
        setState(253);
        comparisonOp();
        setState(254);
        caseStmtBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComparisonOpContext ------------------------------------------------------------------

WhixyParser::ComparisonOpContext::ComparisonOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::ComparisonOpContext::getRuleIndex() const { return WhixyParser::RuleComparisonOp; }

void WhixyParser::ComparisonOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComparisonOp(this);
}

void WhixyParser::ComparisonOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComparisonOp(this);
}

WhixyParser::ComparisonOpContext* WhixyParser::comparisonOp()
{
    ComparisonOpContext* _localctx = _tracker.createInstance<ComparisonOpContext>(_ctx, getState());
    enterRule(_localctx, 24, WhixyParser::RuleComparisonOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseStmtBlockContext ------------------------------------------------------------------

WhixyParser::CaseStmtBlockContext::CaseStmtBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseStmtBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseStmtBlock; }

void WhixyParser::CaseStmtBlockContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCaseStmtBlock(this);
}

void WhixyParser::CaseStmtBlockContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCaseStmtBlock(this);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::caseStmtBlock()
{
    CaseStmtBlockContext* _localctx = _tracker.createInstance<CaseStmtBlockContext>(_ctx, getState());
    enterRule(_localctx, 26, WhixyParser::RuleCaseStmtBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

WhixyParser::LoopStmtContext::LoopStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::LoopStmtContext::getRuleIndex() const { return WhixyParser::RuleLoopStmt; }

void WhixyParser::LoopStmtContext::copyFrom(LoopStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::PlainForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainForStmtContext::PlainForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainForStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainForStmt(this);
}
void WhixyParser::PlainForStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainForStmt(this);
}
//----------------- UnrollWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollWhileStmtContext::UnrollWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollWhileStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollWhileStmt(this);
}
void WhixyParser::UnrollWhileStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollWhileStmt(this);
}
//----------------- PlainWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::PlainWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainWhileStmtContext::PlainWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainWhileStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainWhileStmt(this);
}
void WhixyParser::PlainWhileStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainWhileStmt(this);
}
//----------------- UnrollForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollForStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollForStmtContext::UnrollForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollForStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollForStmt(this);
}
void WhixyParser::UnrollForStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollForStmt(this);
}
WhixyParser::LoopStmtContext* WhixyParser::loopStmt()
{
    LoopStmtContext* _localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
    enterRule(_localctx, 28, WhixyParser::RuleLoopStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(294);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(260);
            match(WhixyParser::UNROLL);
            setState(261);
            match(WhixyParser::WHILE);
            setState(263);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
            case 1: {
                setState(262);
                atom();
                break;
            }

            default: break;
            }
            setState(266);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
            case 1: {
                setState(265);
                atom();
                break;
            }

            default: break;
            }
            setState(268);
            stmt();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(269);
            match(WhixyParser::UNROLL);
            setState(270);
            match(WhixyParser::FOR);
            setState(272);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
            case 1: {
                setState(271);
                atom();
                break;
            }

            default: break;
            }
            setState(275);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
            case 1: {
                setState(274);
                atom();
                break;
            }

            default: break;
            }
            setState(277);
            stmt();
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::PlainWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(278);
            match(WhixyParser::WHILE);
            setState(280);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
            case 1: {
                setState(279);
                atom();
                break;
            }

            default: break;
            }
            setState(283);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
            case 1: {
                setState(282);
                atom();
                break;
            }

            default: break;
            }
            setState(285);
            stmt();
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::PlainForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(286);
            match(WhixyParser::FOR);
            setState(288);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
            case 1: {
                setState(287);
                atom();
                break;
            }

            default: break;
            }
            setState(291);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
            case 1: {
                setState(290);
                atom();
                break;
            }

            default: break;
            }
            setState(293);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptStmtContext ------------------------------------------------------------------

WhixyParser::ComptStmtContext::ComptStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptStmtContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::StmtContext* WhixyParser::ComptStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::ComptStmtContext::getRuleIndex() const { return WhixyParser::RuleComptStmt; }

void WhixyParser::ComptStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComptStmt(this);
}

void WhixyParser::ComptStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComptStmt(this);
}

WhixyParser::ComptStmtContext* WhixyParser::comptStmt()
{
    ComptStmtContext* _localctx = _tracker.createInstance<ComptStmtContext>(_ctx, getState());
    enterRule(_localctx, 30, WhixyParser::RuleComptStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(296);
        match(WhixyParser::COMPT);
        setState(297);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- UnreachableContext ------------------------------------------------------------------

WhixyParser::UnreachableContext::UnreachableContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::UnreachableContext::UNREACHABLE() { return getToken(WhixyParser::UNREACHABLE, 0); }

size_t WhixyParser::UnreachableContext::getRuleIndex() const { return WhixyParser::RuleUnreachable; }

void WhixyParser::UnreachableContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnreachable(this);
}

void WhixyParser::UnreachableContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnreachable(this);
}

WhixyParser::UnreachableContext* WhixyParser::unreachable()
{
    UnreachableContext* _localctx = _tracker.createInstance<UnreachableContext>(_ctx, getState());
    enterRule(_localctx, 32, WhixyParser::RuleUnreachable);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(299);
        match(WhixyParser::UNREACHABLE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DeferStmtContext ------------------------------------------------------------------

WhixyParser::DeferStmtContext::DeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::DeferStmtContext::DEFER() { return getToken(WhixyParser::DEFER, 0); }

WhixyParser::StmtContext* WhixyParser::DeferStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::DeferStmtContext::getRuleIndex() const { return WhixyParser::RuleDeferStmt; }

void WhixyParser::DeferStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDeferStmt(this);
}

void WhixyParser::DeferStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDeferStmt(this);
}

WhixyParser::DeferStmtContext* WhixyParser::deferStmt()
{
    DeferStmtContext* _localctx = _tracker.createInstance<DeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 34, WhixyParser::RuleDeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(301);
        match(WhixyParser::DEFER);
        setState(302);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ErrdeferStmtContext ------------------------------------------------------------------

WhixyParser::ErrdeferStmtContext::ErrdeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ErrdeferStmtContext::ERRDEFER() { return getToken(WhixyParser::ERRDEFER, 0); }

WhixyParser::StmtContext* WhixyParser::ErrdeferStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

size_t WhixyParser::ErrdeferStmtContext::getRuleIndex() const { return WhixyParser::RuleErrdeferStmt; }

void WhixyParser::ErrdeferStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterErrdeferStmt(this);
}

void WhixyParser::ErrdeferStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitErrdeferStmt(this);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::errdeferStmt()
{
    ErrdeferStmtContext* _localctx = _tracker.createInstance<ErrdeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 36, WhixyParser::RuleErrdeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(304);
        match(WhixyParser::ERRDEFER);
        setState(305);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprSepContext ------------------------------------------------------------------

WhixyParser::ExprSepContext::ExprSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExprSepContext::COMMA() { return getToken(WhixyParser::COMMA, 0); }

tree::TerminalNode* WhixyParser::ExprSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::ExprSepContext::getRuleIndex() const { return WhixyParser::RuleExprSep; }

void WhixyParser::ExprSepContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterExprSep(this);
}

void WhixyParser::ExprSepContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitExprSep(this);
}

WhixyParser::ExprSepContext* WhixyParser::exprSep()
{
    ExprSepContext* _localctx = _tracker.createInstance<ExprSepContext>(_ctx, getState());
    enterRule(_localctx, 38, WhixyParser::RuleExprSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(307);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::NEWLINE

              || _la == WhixyParser::COMMA)) {
            _errHandler->recoverInline(this);
        }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WhixyParser::ExprContext::ExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::ExprContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::CallContext* WhixyParser::ExprContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BinaryExprContext* WhixyParser::ExprContext::binaryExpr()
{
    return getRuleContext<WhixyParser::BinaryExprContext>(0);
}

WhixyParser::PostExprContext* WhixyParser::ExprContext::postExpr()
{
    return getRuleContext<WhixyParser::PostExprContext>(0);
}

WhixyParser::PreExprContext* WhixyParser::ExprContext::preExpr()
{
    return getRuleContext<WhixyParser::PreExprContext>(0);
}

WhixyParser::IfExprContext* WhixyParser::ExprContext::ifExpr() { return getRuleContext<WhixyParser::IfExprContext>(0); }

WhixyParser::WhereExprContext* WhixyParser::ExprContext::whereExpr()
{
    return getRuleContext<WhixyParser::WhereExprContext>(0);
}

WhixyParser::LoopExprContext* WhixyParser::ExprContext::loopExpr()
{
    return getRuleContext<WhixyParser::LoopExprContext>(0);
}

WhixyParser::ComptExprContext* WhixyParser::ExprContext::comptExpr()
{
    return getRuleContext<WhixyParser::ComptExprContext>(0);
}

WhixyParser::UnreachableContext* WhixyParser::ExprContext::unreachable()
{
    return getRuleContext<WhixyParser::UnreachableContext>(0);
}

WhixyParser::RoutineExprContext* WhixyParser::ExprContext::routineExpr()
{
    return getRuleContext<WhixyParser::RoutineExprContext>(0);
}

WhixyParser::StringContext* WhixyParser::ExprContext::string() { return getRuleContext<WhixyParser::StringContext>(0); }

WhixyParser::AtomContext* WhixyParser::ExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::ExprContext::getRuleIndex() const { return WhixyParser::RuleExpr; }

void WhixyParser::ExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterExpr(this);
}

void WhixyParser::ExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitExpr(this);
}

WhixyParser::ExprContext* WhixyParser::expr()
{
    ExprContext* _localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
    enterRule(_localctx, 40, WhixyParser::RuleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(322);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(309);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(310);
            call();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(311);
            binaryExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(312);
            postExpr();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(313);
            preExpr();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(314);
            ifExpr();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(315);
            whereExpr();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(316);
            loopExpr();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(317);
            comptExpr();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(318);
            unreachable();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(319);
            routineExpr();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(320);
            string();
            break;
        }

        case 13: {
            enterOuterAlt(_localctx, 13);
            setState(321);
            atom();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryExprContext ------------------------------------------------------------------

WhixyParser::BinaryExprContext::BinaryExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::BinaryExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::BinaryExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BinaryOpContext* WhixyParser::BinaryExprContext::binaryOp()
{
    return getRuleContext<WhixyParser::BinaryOpContext>(0);
}

std::vector<tree::TerminalNode*> WhixyParser::BinaryExprContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::BinaryExprContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::BinaryExprContext::getRuleIndex() const { return WhixyParser::RuleBinaryExpr; }

void WhixyParser::BinaryExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBinaryExpr(this);
}

void WhixyParser::BinaryExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBinaryExpr(this);
}

WhixyParser::BinaryExprContext* WhixyParser::binaryExpr()
{
    BinaryExprContext* _localctx = _tracker.createInstance<BinaryExprContext>(_ctx, getState());
    enterRule(_localctx, 42, WhixyParser::RuleBinaryExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(324);
        atom();
        setState(326);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(325);
            match(WhixyParser::NEWLINE);
        }
        setState(328);
        binaryOp();
        setState(330);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
        case 1: {
            setState(329);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(332);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOpContext ------------------------------------------------------------------

WhixyParser::BinaryOpContext::BinaryOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::BinaryOpContext::getRuleIndex() const { return WhixyParser::RuleBinaryOp; }

void WhixyParser::BinaryOpContext::copyFrom(BinaryOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- GreaterThanOrEqualToOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::GreaterThanOrEqualToOpContext::GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_EQUAL, 0);
}

WhixyParser::GreaterThanOrEqualToOpContext::GreaterThanOrEqualToOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::GreaterThanOrEqualToOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterGreaterThanOrEqualToOp(this);
}
void WhixyParser::GreaterThanOrEqualToOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitGreaterThanOrEqualToOp(this);
}
//----------------- GreaterThanOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::GreaterThanOpContext::GREATERTHAN() { return getToken(WhixyParser::GREATERTHAN, 0); }

WhixyParser::GreaterThanOpContext::GreaterThanOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::GreaterThanOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterGreaterThanOp(this);
}
void WhixyParser::GreaterThanOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitGreaterThanOp(this);
}
//----------------- EqualityOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::EqualityOpContext::EQUAL_EQUAL() { return getToken(WhixyParser::EQUAL_EQUAL, 0); }

WhixyParser::EqualityOpContext::EqualityOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::EqualityOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterEqualityOp(this);
}
void WhixyParser::EqualityOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitEqualityOp(this);
}
//----------------- LeftRotateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftRotateOpContext::LESSTHAN_LESSTHAN_PERCENT()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT, 0);
}

WhixyParser::LeftRotateOpContext::LeftRotateOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftRotateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftRotateOp(this);
}
void WhixyParser::LeftRotateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftRotateOp(this);
}
//----------------- AddOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddOpContext::PLUS() { return getToken(WhixyParser::PLUS, 0); }

WhixyParser::AddOpContext::AddOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddOp(this);
}
void WhixyParser::AddOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddOp(this);
}
//----------------- TimesOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TimesOpContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

WhixyParser::TimesOpContext::TimesOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::TimesOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTimesOp(this);
}
void WhixyParser::TimesOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTimesOp(this);
}
//----------------- SubOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::SubOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

WhixyParser::SubOpContext::SubOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::SubOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSubOp(this);
}
void WhixyParser::SubOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSubOp(this);
}
//----------------- WrappingAddOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingAddOpContext::PLUS_PERCENT() { return getToken(WhixyParser::PLUS_PERCENT, 0); }

WhixyParser::WrappingAddOpContext::WrappingAddOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingAddOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingAddOp(this);
}
void WhixyParser::WrappingAddOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingAddOp(this);
}
//----------------- LeftShiftOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftShiftOpContext::LESSTHAN_LESSTHAN()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN, 0);
}

WhixyParser::LeftShiftOpContext::LeftShiftOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftShiftOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftShiftOp(this);
}
void WhixyParser::LeftShiftOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftShiftOp(this);
}
//----------------- ConcatOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ConcatOpContext::PLUS_PLUS() { return getToken(WhixyParser::PLUS_PLUS, 0); }

WhixyParser::ConcatOpContext::ConcatOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ConcatOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterConcatOp(this);
}
void WhixyParser::ConcatOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitConcatOp(this);
}
//----------------- RepeatOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RepeatOpContext::ASTERISK_ASTERISK()
{
    return getToken(WhixyParser::ASTERISK_ASTERISK, 0);
}

WhixyParser::RepeatOpContext::RepeatOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RepeatOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRepeatOp(this);
}
void WhixyParser::RepeatOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRepeatOp(this);
}
//----------------- DivideOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DivideOpContext::SLASH() { return getToken(WhixyParser::SLASH, 0); }

WhixyParser::DivideOpContext::DivideOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DivideOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDivideOp(this);
}
void WhixyParser::DivideOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDivideOp(this);
}
//----------------- OrOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::OrOpContext::PIPE() { return getToken(WhixyParser::PIPE, 0); }

WhixyParser::OrOpContext::OrOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::OrOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOrOp(this);
}
void WhixyParser::OrOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOrOp(this);
}
//----------------- ModOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ModOpContext::PERCENT() { return getToken(WhixyParser::PERCENT, 0); }

WhixyParser::ModOpContext::ModOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ModOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterModOp(this);
}
void WhixyParser::ModOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitModOp(this);
}
//----------------- AndOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AndOpContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

WhixyParser::AndOpContext::AndOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AndOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAndOp(this);
}
void WhixyParser::AndOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAndOp(this);
}
//----------------- XorOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::XorOpContext::CARROT() { return getToken(WhixyParser::CARROT, 0); }

WhixyParser::XorOpContext::XorOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::XorOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterXorOp(this);
}
void WhixyParser::XorOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitXorOp(this);
}
//----------------- WrappingSubOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingSubOpContext::MINUS_PERCENT()
{
    return getToken(WhixyParser::MINUS_PERCENT, 0);
}

WhixyParser::WrappingSubOpContext::WrappingSubOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingSubOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingSubOp(this);
}
void WhixyParser::WrappingSubOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingSubOp(this);
}
//----------------- LessThanOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LessThanOpContext::LESSTHAN() { return getToken(WhixyParser::LESSTHAN, 0); }

WhixyParser::LessThanOpContext::LessThanOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LessThanOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLessThanOp(this);
}
void WhixyParser::LessThanOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLessThanOp(this);
}
//----------------- RightShiftOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightShiftOpContext::GREATERTHAN_GREATERTHAN()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN, 0);
}

WhixyParser::RightShiftOpContext::RightShiftOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightShiftOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightShiftOp(this);
}
void WhixyParser::RightShiftOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightShiftOp(this);
}
//----------------- LessThanOrEqualToOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LessThanOrEqualToOpContext::LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_EQUAL, 0);
}

WhixyParser::LessThanOrEqualToOpContext::LessThanOrEqualToOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LessThanOrEqualToOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLessThanOrEqualToOp(this);
}
void WhixyParser::LessThanOrEqualToOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLessThanOrEqualToOp(this);
}
//----------------- WrappingTimesOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingTimesOpContext::ASTERISK_PERCENT()
{
    return getToken(WhixyParser::ASTERISK_PERCENT, 0);
}

WhixyParser::WrappingTimesOpContext::WrappingTimesOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingTimesOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingTimesOp(this);
}
void WhixyParser::WrappingTimesOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingTimesOp(this);
}
//----------------- RightRotateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightRotateOpContext::GREATERTHAN_GREATERTHAN_PERCENT()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT, 0);
}

WhixyParser::RightRotateOpContext::RightRotateOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightRotateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightRotateOp(this);
}
void WhixyParser::RightRotateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightRotateOp(this);
}
//----------------- AsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AsOpContext::AS() { return getToken(WhixyParser::AS, 0); }

WhixyParser::AsOpContext::AsOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAsOp(this);
}
void WhixyParser::AsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAsOp(this);
}
//----------------- InequalityOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InequalityOpContext::TILDE_EQUAL() { return getToken(WhixyParser::TILDE_EQUAL, 0); }

WhixyParser::InequalityOpContext::InequalityOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::InequalityOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInequalityOp(this);
}
void WhixyParser::InequalityOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInequalityOp(this);
}
WhixyParser::BinaryOpContext* WhixyParser::binaryOp()
{
    BinaryOpContext* _localctx = _tracker.createInstance<BinaryOpContext>(_ctx, getState());
    enterRule(_localctx, 44, WhixyParser::RuleBinaryOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(358);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AS: {
            _localctx = _tracker.createInstance<WhixyParser::AsOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(334);
            match(WhixyParser::AS);
            break;
        }

        case WhixyParser::PLUS_PLUS: {
            _localctx = _tracker.createInstance<WhixyParser::ConcatOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(335);
            match(WhixyParser::PLUS_PLUS);
            break;
        }

        case WhixyParser::ASTERISK_ASTERISK: {
            _localctx = _tracker.createInstance<WhixyParser::RepeatOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(336);
            match(WhixyParser::ASTERISK_ASTERISK);
            break;
        }

        case WhixyParser::PLUS: {
            _localctx = _tracker.createInstance<WhixyParser::AddOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(337);
            match(WhixyParser::PLUS);
            break;
        }

        case WhixyParser::MINUS: {
            _localctx = _tracker.createInstance<WhixyParser::SubOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(338);
            match(WhixyParser::MINUS);
            break;
        }

        case WhixyParser::ASTERISK: {
            _localctx = _tracker.createInstance<WhixyParser::TimesOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(339);
            match(WhixyParser::ASTERISK);
            break;
        }

        case WhixyParser::SLASH: {
            _localctx = _tracker.createInstance<WhixyParser::DivideOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(340);
            match(WhixyParser::SLASH);
            break;
        }

        case WhixyParser::LESSTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::LessThanOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(341);
            match(WhixyParser::LESSTHAN);
            break;
        }

        case WhixyParser::GREATERTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::GreaterThanOpContext>(_localctx);
            enterOuterAlt(_localctx, 9);
            setState(342);
            match(WhixyParser::GREATERTHAN);
            break;
        }

        case WhixyParser::LESSTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LessThanOrEqualToOpContext>(_localctx);
            enterOuterAlt(_localctx, 10);
            setState(343);
            match(WhixyParser::LESSTHAN_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::GreaterThanOrEqualToOpContext>(_localctx);
            enterOuterAlt(_localctx, 11);
            setState(344);
            match(WhixyParser::GREATERTHAN_EQUAL);
            break;
        }

        case WhixyParser::PLUS_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingAddOpContext>(_localctx);
            enterOuterAlt(_localctx, 12);
            setState(345);
            match(WhixyParser::PLUS_PERCENT);
            break;
        }

        case WhixyParser::MINUS_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingSubOpContext>(_localctx);
            enterOuterAlt(_localctx, 13);
            setState(346);
            match(WhixyParser::MINUS_PERCENT);
            break;
        }

        case WhixyParser::ASTERISK_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingTimesOpContext>(_localctx);
            enterOuterAlt(_localctx, 14);
            setState(347);
            match(WhixyParser::ASTERISK_PERCENT);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::LeftShiftOpContext>(_localctx);
            enterOuterAlt(_localctx, 15);
            setState(348);
            match(WhixyParser::LESSTHAN_LESSTHAN);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::RightShiftOpContext>(_localctx);
            enterOuterAlt(_localctx, 16);
            setState(349);
            match(WhixyParser::GREATERTHAN_GREATERTHAN);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::LeftRotateOpContext>(_localctx);
            enterOuterAlt(_localctx, 17);
            setState(350);
            match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::RightRotateOpContext>(_localctx);
            enterOuterAlt(_localctx, 18);
            setState(351);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT);
            break;
        }

        case WhixyParser::EQUAL_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::EqualityOpContext>(_localctx);
            enterOuterAlt(_localctx, 19);
            setState(352);
            match(WhixyParser::EQUAL_EQUAL);
            break;
        }

        case WhixyParser::TILDE_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::InequalityOpContext>(_localctx);
            enterOuterAlt(_localctx, 20);
            setState(353);
            match(WhixyParser::TILDE_EQUAL);
            break;
        }

        case WhixyParser::AMPERSAND: {
            _localctx = _tracker.createInstance<WhixyParser::AndOpContext>(_localctx);
            enterOuterAlt(_localctx, 21);
            setState(354);
            match(WhixyParser::AMPERSAND);
            break;
        }

        case WhixyParser::PIPE: {
            _localctx = _tracker.createInstance<WhixyParser::OrOpContext>(_localctx);
            enterOuterAlt(_localctx, 22);
            setState(355);
            match(WhixyParser::PIPE);
            break;
        }

        case WhixyParser::PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::ModOpContext>(_localctx);
            enterOuterAlt(_localctx, 23);
            setState(356);
            match(WhixyParser::PERCENT);
            break;
        }

        case WhixyParser::CARROT: {
            _localctx = _tracker.createInstance<WhixyParser::XorOpContext>(_localctx);
            enterOuterAlt(_localctx, 24);
            setState(357);
            match(WhixyParser::CARROT);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostExprContext ------------------------------------------------------------------

WhixyParser::PostExprContext::PostExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::PostExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::PostOpContext* WhixyParser::PostExprContext::postOp()
{
    return getRuleContext<WhixyParser::PostOpContext>(0);
}

size_t WhixyParser::PostExprContext::getRuleIndex() const { return WhixyParser::RulePostExpr; }

void WhixyParser::PostExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPostExpr(this);
}

void WhixyParser::PostExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPostExpr(this);
}

WhixyParser::PostExprContext* WhixyParser::postExpr()
{
    PostExprContext* _localctx = _tracker.createInstance<PostExprContext>(_ctx, getState());
    enterRule(_localctx, 46, WhixyParser::RulePostExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(360);
        atom();
        setState(361);
        postOp();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostOpContext ------------------------------------------------------------------

WhixyParser::PostOpContext::PostOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PostOpContext::getRuleIndex() const { return WhixyParser::RulePostOp; }

void WhixyParser::PostOpContext::copyFrom(PostOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- AccessTypeOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessTypeOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AccessTypeOpContext::TYPE() { return getToken(WhixyParser::TYPE, 0); }

WhixyParser::AccessTypeOpContext::AccessTypeOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessTypeOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessTypeOp(this);
}
void WhixyParser::AccessTypeOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessTypeOp(this);
}
//----------------- TryOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TryOpContext::EXCLAMATION() { return getToken(WhixyParser::EXCLAMATION, 0); }

WhixyParser::TryOpContext::TryOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::TryOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTryOp(this);
}
void WhixyParser::TryOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTryOp(this);
}
//----------------- AccessLengthOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessLengthOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AccessLengthOpContext::LEN() { return getToken(WhixyParser::LEN, 0); }

WhixyParser::AccessLengthOpContext::AccessLengthOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessLengthOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessLengthOp(this);
}
void WhixyParser::AccessLengthOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessLengthOp(this);
}
//----------------- AddressOfOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddressOfOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AddressOfOpContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

WhixyParser::AddressOfOpContext::AddressOfOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddressOfOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddressOfOp(this);
}
void WhixyParser::AddressOfOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddressOfOp(this);
}
//----------------- AccessIndexOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessIndexOpContext::OPENBRACKET() { return getToken(WhixyParser::OPENBRACKET, 0); }

WhixyParser::ExprContext* WhixyParser::AccessIndexOpContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::AccessIndexOpContext::CLOSEDBRACKET()
{
    return getToken(WhixyParser::CLOSEDBRACKET, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::AccessIndexOpContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::AccessIndexOpContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

WhixyParser::AccessIndexOpContext::AccessIndexOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessIndexOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessIndexOp(this);
}
void WhixyParser::AccessIndexOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessIndexOp(this);
}
//----------------- UnwrapOptionalOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnwrapOptionalOpContext::QUESTION() { return getToken(WhixyParser::QUESTION, 0); }

WhixyParser::UnwrapOptionalOpContext::UnwrapOptionalOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnwrapOptionalOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnwrapOptionalOp(this);
}
void WhixyParser::UnwrapOptionalOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnwrapOptionalOp(this);
}
//----------------- AccessMemberOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessMemberOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

WhixyParser::AtomContext* WhixyParser::AccessMemberOpContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

WhixyParser::AccessMemberOpContext::AccessMemberOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessMemberOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessMemberOp(this);
}
void WhixyParser::AccessMemberOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessMemberOp(this);
}
//----------------- DereferencePointerOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DereferencePointerOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::DereferencePointerOpContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

WhixyParser::DereferencePointerOpContext::DereferencePointerOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DereferencePointerOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDereferencePointerOp(this);
}
void WhixyParser::DereferencePointerOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDereferencePointerOp(this);
}
WhixyParser::PostOpContext* WhixyParser::postOp()
{
    PostOpContext* _localctx = _tracker.createInstance<PostOpContext>(_ctx, getState());
    enterRule(_localctx, 48, WhixyParser::RulePostOp);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(385);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::AccessMemberOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(363);
            match(WhixyParser::DOT);
            setState(364);
            atom();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::AccessIndexOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(365);
            match(WhixyParser::OPENBRACKET);
            setState(367);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
            case 1: {
                setState(366);
                match(WhixyParser::NEWLINE);
                break;
            }

            default: break;
            }
            setState(369);
            expr();
            setState(371);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::NEWLINE) {
                setState(370);
                match(WhixyParser::NEWLINE);
            }
            setState(373);
            match(WhixyParser::CLOSEDBRACKET);
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::AccessTypeOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(375);
            match(WhixyParser::DOT);
            setState(376);
            match(WhixyParser::TYPE);
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::AccessLengthOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(377);
            match(WhixyParser::DOT);
            setState(378);
            match(WhixyParser::LEN);
            break;
        }

        case 5: {
            _localctx = _tracker.createInstance<WhixyParser::DereferencePointerOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(379);
            match(WhixyParser::DOT);
            setState(380);
            match(WhixyParser::ASTERISK);
            break;
        }

        case 6: {
            _localctx = _tracker.createInstance<WhixyParser::AddressOfOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(381);
            match(WhixyParser::DOT);
            setState(382);
            match(WhixyParser::AMPERSAND);
            break;
        }

        case 7: {
            _localctx = _tracker.createInstance<WhixyParser::UnwrapOptionalOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(383);
            match(WhixyParser::QUESTION);
            break;
        }

        case 8: {
            _localctx = _tracker.createInstance<WhixyParser::TryOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(384);
            match(WhixyParser::EXCLAMATION);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreExprContext ------------------------------------------------------------------

WhixyParser::PreExprContext::PreExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::PreOpContext* WhixyParser::PreExprContext::preOp() { return getRuleContext<WhixyParser::PreOpContext>(0); }

WhixyParser::AtomContext* WhixyParser::PreExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::PreExprContext::getRuleIndex() const { return WhixyParser::RulePreExpr; }

void WhixyParser::PreExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPreExpr(this);
}

void WhixyParser::PreExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPreExpr(this);
}

WhixyParser::PreExprContext* WhixyParser::preExpr()
{
    PreExprContext* _localctx = _tracker.createInstance<PreExprContext>(_ctx, getState());
    enterRule(_localctx, 50, WhixyParser::RulePreExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(387);
        preOp();
        setState(388);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreOpContext ------------------------------------------------------------------

WhixyParser::PreOpContext::PreOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PreOpContext::getRuleIndex() const { return WhixyParser::RulePreOp; }

void WhixyParser::PreOpContext::copyFrom(PreOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- NegateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NegateOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

WhixyParser::NegateOpContext::NegateOpContext(PreOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::NegateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterNegateOp(this);
}
void WhixyParser::NegateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitNegateOp(this);
}
//----------------- NotOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NotOpContext::TILDE() { return getToken(WhixyParser::TILDE, 0); }

WhixyParser::NotOpContext::NotOpContext(PreOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::NotOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterNotOp(this);
}
void WhixyParser::NotOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitNotOp(this);
}
WhixyParser::PreOpContext* WhixyParser::preOp()
{
    PreOpContext* _localctx = _tracker.createInstance<PreOpContext>(_ctx, getState());
    enterRule(_localctx, 52, WhixyParser::RulePreOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(392);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::TILDE: {
            _localctx = _tracker.createInstance<WhixyParser::NotOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(390);
            match(WhixyParser::TILDE);
            break;
        }

        case WhixyParser::MINUS: {
            _localctx = _tracker.createInstance<WhixyParser::NegateOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(391);
            match(WhixyParser::MINUS);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfExprContext ------------------------------------------------------------------

WhixyParser::IfExprContext::IfExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfExprContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::IfExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::IfExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfExprContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfExprContext::getRuleIndex() const { return WhixyParser::RuleIfExpr; }

void WhixyParser::IfExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterIfExpr(this);
}

void WhixyParser::IfExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitIfExpr(this);
}

WhixyParser::IfExprContext* WhixyParser::ifExpr()
{
    IfExprContext* _localctx = _tracker.createInstance<IfExprContext>(_ctx, getState());
    enterRule(_localctx, 54, WhixyParser::RuleIfExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(394);
        match(WhixyParser::IF);
        setState(395);
        atom();
        setState(396);
        expr();
        setState(403);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(397);
                match(WhixyParser::ELSEIF);
                setState(398);
                atom();
                setState(399);
                expr();
            }
            setState(405);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
        }
        setState(408);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
        case 1: {
            setState(406);
            match(WhixyParser::ELSE);
            setState(407);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereExprContext ------------------------------------------------------------------

WhixyParser::WhereExprContext::WhereExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereExprContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereExprContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseExprBlockContext* WhixyParser::WhereExprContext::caseExprBlock()
{
    return getRuleContext<WhixyParser::CaseExprBlockContext>(0);
}

size_t WhixyParser::WhereExprContext::getRuleIndex() const { return WhixyParser::RuleWhereExpr; }

void WhixyParser::WhereExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWhereExpr(this);
}

void WhixyParser::WhereExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWhereExpr(this);
}

WhixyParser::WhereExprContext* WhixyParser::whereExpr()
{
    WhereExprContext* _localctx = _tracker.createInstance<WhereExprContext>(_ctx, getState());
    enterRule(_localctx, 56, WhixyParser::RuleWhereExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(410);
        match(WhixyParser::WHERE);
        setState(411);
        atom();
        setState(412);
        comparisonOp();
        setState(413);
        caseExprBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseExprBlockContext ------------------------------------------------------------------

WhixyParser::CaseExprBlockContext::CaseExprBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseExprBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseExprBlock; }

void WhixyParser::CaseExprBlockContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCaseExprBlock(this);
}

void WhixyParser::CaseExprBlockContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCaseExprBlock(this);
}

WhixyParser::CaseExprBlockContext* WhixyParser::caseExprBlock()
{
    CaseExprBlockContext* _localctx = _tracker.createInstance<CaseExprBlockContext>(_ctx, getState());
    enterRule(_localctx, 58, WhixyParser::RuleCaseExprBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LoopExprContext ------------------------------------------------------------------

WhixyParser::LoopExprContext::LoopExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::LoopExprContext::getRuleIndex() const { return WhixyParser::RuleLoopExpr; }

void WhixyParser::LoopExprContext::copyFrom(LoopExprContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- UnrollWhileExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollWhileExprContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollWhileExprContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::ExprContext* WhixyParser::UnrollWhileExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollWhileExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollWhileExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollWhileExprContext::UnrollWhileExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollWhileExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollWhileExpr(this);
}
void WhixyParser::UnrollWhileExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollWhileExpr(this);
}
//----------------- UnrollForExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollForExprContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollForExprContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::ExprContext* WhixyParser::UnrollForExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollForExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollForExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollForExprContext::UnrollForExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollForExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollForExpr(this);
}
void WhixyParser::UnrollForExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollForExpr(this);
}
//----------------- PlainForExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainForExprContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::ExprContext* WhixyParser::PlainForExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainForExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainForExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainForExprContext::PlainForExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainForExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainForExpr(this);
}
void WhixyParser::PlainForExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainForExpr(this);
}
//----------------- PlainWhileExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainWhileExprContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::ExprContext* WhixyParser::PlainWhileExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainWhileExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainWhileExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainWhileExprContext::PlainWhileExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainWhileExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainWhileExpr(this);
}
void WhixyParser::PlainWhileExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainWhileExpr(this);
}
WhixyParser::LoopExprContext* WhixyParser::loopExpr()
{
    LoopExprContext* _localctx = _tracker.createInstance<LoopExprContext>(_ctx, getState());
    enterRule(_localctx, 60, WhixyParser::RuleLoopExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(451);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollWhileExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(417);
            match(WhixyParser::UNROLL);
            setState(418);
            match(WhixyParser::WHILE);
            setState(420);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
            case 1: {
                setState(419);
                atom();
                break;
            }

            default: break;
            }
            setState(423);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
            case 1: {
                setState(422);
                atom();
                break;
            }

            default: break;
            }
            setState(425);
            expr();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollForExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(426);
            match(WhixyParser::UNROLL);
            setState(427);
            match(WhixyParser::FOR);
            setState(429);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
            case 1: {
                setState(428);
                atom();
                break;
            }

            default: break;
            }
            setState(432);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
            case 1: {
                setState(431);
                atom();
                break;
            }

            default: break;
            }
            setState(434);
            expr();
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::PlainWhileExprContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(435);
            match(WhixyParser::WHILE);
            setState(437);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
            case 1: {
                setState(436);
                atom();
                break;
            }

            default: break;
            }
            setState(440);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
            case 1: {
                setState(439);
                atom();
                break;
            }

            default: break;
            }
            setState(442);
            expr();
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::PlainForExprContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(443);
            match(WhixyParser::FOR);
            setState(445);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
            case 1: {
                setState(444);
                atom();
                break;
            }

            default: break;
            }
            setState(448);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
            case 1: {
                setState(447);
                atom();
                break;
            }

            default: break;
            }
            setState(450);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptExprContext ------------------------------------------------------------------

WhixyParser::ComptExprContext::ComptExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptExprContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::ExprContext* WhixyParser::ComptExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::ComptExprContext::getRuleIndex() const { return WhixyParser::RuleComptExpr; }

void WhixyParser::ComptExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComptExpr(this);
}

void WhixyParser::ComptExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComptExpr(this);
}

WhixyParser::ComptExprContext* WhixyParser::comptExpr()
{
    ComptExprContext* _localctx = _tracker.createInstance<ComptExprContext>(_ctx, getState());
    enterRule(_localctx, 62, WhixyParser::RuleComptExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(453);
        match(WhixyParser::COMPT);
        setState(454);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineExprContext ------------------------------------------------------------------

WhixyParser::RoutineExprContext::RoutineExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineExprContext::getRuleIndex() const { return WhixyParser::RuleRoutineExpr; }

void WhixyParser::RoutineExprContext::copyFrom(RoutineExprContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- InlineRoutineExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineExprContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::InlineRoutineExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::InlineRoutineExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineExprContext::InlineRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::InlineRoutineExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInlineRoutineExpr(this);
}
void WhixyParser::InlineRoutineExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInlineRoutineExpr(this);
}
//----------------- PlainRoutineExprContext ------------------------------------------------------------------

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainRoutineExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainRoutineExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineExprContext::PlainRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainRoutineExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainRoutineExpr(this);
}
void WhixyParser::PlainRoutineExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainRoutineExpr(this);
}
WhixyParser::RoutineExprContext* WhixyParser::routineExpr()
{
    RoutineExprContext* _localctx = _tracker.createInstance<RoutineExprContext>(_ctx, getState());
    enterRule(_localctx, 64, WhixyParser::RuleRoutineExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(465);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::NEWLINE:
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(456);
            atom();
            setState(457);
            atom();
            setState(458);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(460);
            match(WhixyParser::INLINE);
            setState(461);
            atom();
            setState(462);
            atom();
            setState(463);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

WhixyParser::StringContext::StringContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::StringContext::getRuleIndex() const { return WhixyParser::RuleString; }

void WhixyParser::StringContext::copyFrom(StringContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- DQStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DQStringExprContext::DOUBLEQUOTESTRING()
{
    return getToken(WhixyParser::DOUBLEQUOTESTRING, 0);
}

WhixyParser::DQStringExprContext::DQStringExprContext(StringContext* ctx) { copyFrom(ctx); }

void WhixyParser::DQStringExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDQStringExpr(this);
}
void WhixyParser::DQStringExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDQStringExpr(this);
}
//----------------- BTStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::BTStringExprContext::BACKTICKSTRING()
{
    return getToken(WhixyParser::BACKTICKSTRING, 0);
}

WhixyParser::BTStringExprContext::BTStringExprContext(StringContext* ctx) { copyFrom(ctx); }

void WhixyParser::BTStringExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBTStringExpr(this);
}
void WhixyParser::BTStringExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBTStringExpr(this);
}
WhixyParser::StringContext* WhixyParser::string()
{
    StringContext* _localctx = _tracker.createInstance<StringContext>(_ctx, getState());
    enterRule(_localctx, 66, WhixyParser::RuleString);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(469);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::DOUBLEQUOTESTRING: {
            _localctx = _tracker.createInstance<WhixyParser::DQStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(467);
            match(WhixyParser::DOUBLEQUOTESTRING);
            break;
        }

        case WhixyParser::BACKTICKSTRING: {
            _localctx = _tracker.createInstance<WhixyParser::BTStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(468);
            match(WhixyParser::BACKTICKSTRING);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

WhixyParser::AtomContext::AtomContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::TokenContext* WhixyParser::AtomContext::token() { return getRuleContext<WhixyParser::TokenContext>(0); }

WhixyParser::BlockExprContext* WhixyParser::AtomContext::blockExpr()
{
    return getRuleContext<WhixyParser::BlockExprContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::AtomContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::AtomContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

size_t WhixyParser::AtomContext::getRuleIndex() const { return WhixyParser::RuleAtom; }

void WhixyParser::AtomContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAtom(this);
}

void WhixyParser::AtomContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAtom(this);
}

WhixyParser::AtomContext* WhixyParser::atom()
{
    AtomContext* _localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
    enterRule(_localctx, 68, WhixyParser::RuleAtom);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(475);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(471);
            token();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(472);
            blockExpr();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(473);
            structExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(474);
            tupleExpr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TokenContext ------------------------------------------------------------------

WhixyParser::TokenContext::TokenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TokenContext::TOKEN() { return getToken(WhixyParser::TOKEN, 0); }

size_t WhixyParser::TokenContext::getRuleIndex() const { return WhixyParser::RuleToken; }

void WhixyParser::TokenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterToken(this);
}

void WhixyParser::TokenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitToken(this);
}

WhixyParser::TokenContext* WhixyParser::token()
{
    TokenContext* _localctx = _tracker.createInstance<TokenContext>(_ctx, getState());
    enterRule(_localctx, 70, WhixyParser::RuleToken);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(477);
        match(WhixyParser::TOKEN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockExprContext ------------------------------------------------------------------

WhixyParser::BlockExprContext::BlockExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::BlockExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::BlockExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

WhixyParser::ExprContext* WhixyParser::BlockExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

std::vector<WhixyParser::StmtContext*> WhixyParser::BlockExprContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::BlockExprContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::BlockExprContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::BlockExprContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::BlockExprContext::getRuleIndex() const { return WhixyParser::RuleBlockExpr; }

void WhixyParser::BlockExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBlockExpr(this);
}

void WhixyParser::BlockExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBlockExpr(this);
}

WhixyParser::BlockExprContext* WhixyParser::blockExpr()
{
    BlockExprContext* _localctx = _tracker.createInstance<BlockExprContext>(_ctx, getState());
    enterRule(_localctx, 72, WhixyParser::RuleBlockExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(479);
        oParen();
        setState(494);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
        case 1: {
            setState(491);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
            case 1: {
                setState(480);
                stmt();
                setState(486);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(481);
                        stmtSep();
                        setState(482);
                        stmt();
                    }
                    setState(488);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
                }
                setState(489);
                stmtSep();
                break;
            }

            default: break;
            }
            setState(493);
            expr();
            break;
        }

        default: break;
        }
        setState(496);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StructExprContext ------------------------------------------------------------------

WhixyParser::StructExprContext::StructExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OBraceContext* WhixyParser::StructExprContext::oBrace()
{
    return getRuleContext<WhixyParser::OBraceContext>(0);
}

WhixyParser::CBraceContext* WhixyParser::StructExprContext::cBrace()
{
    return getRuleContext<WhixyParser::CBraceContext>(0);
}

std::vector<WhixyParser::FieldContext*> WhixyParser::StructExprContext::field()
{
    return getRuleContexts<WhixyParser::FieldContext>();
}

WhixyParser::FieldContext* WhixyParser::StructExprContext::field(size_t i)
{
    return getRuleContext<WhixyParser::FieldContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::StructExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::StructExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::StructExprContext::getRuleIndex() const { return WhixyParser::RuleStructExpr; }

void WhixyParser::StructExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterStructExpr(this);
}

void WhixyParser::StructExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitStructExpr(this);
}

WhixyParser::StructExprContext* WhixyParser::structExpr()
{
    StructExprContext* _localctx = _tracker.createInstance<StructExprContext>(_ctx, getState());
    enterRule(_localctx, 74, WhixyParser::RuleStructExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(498);
        oBrace();
        setState(508);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
        case 1: {
            setState(499);
            field();
            setState(505);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(500);
                    exprSep();
                    setState(501);
                    field();
                }
                setState(507);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(510);
        cBrace();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TupleExprContext ------------------------------------------------------------------

WhixyParser::TupleExprContext::TupleExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::TupleExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::TupleExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::TupleExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::TupleExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TupleExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TupleExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TupleExprContext::getRuleIndex() const { return WhixyParser::RuleTupleExpr; }

void WhixyParser::TupleExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTupleExpr(this);
}

void WhixyParser::TupleExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTupleExpr(this);
}

WhixyParser::TupleExprContext* WhixyParser::tupleExpr()
{
    TupleExprContext* _localctx = _tracker.createInstance<TupleExprContext>(_ctx, getState());
    enterRule(_localctx, 76, WhixyParser::RuleTupleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(512);
        oParen();
        setState(522);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
            setState(513);
            expr();
            setState(519);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(514);
                    exprSep();
                    setState(515);
                    expr();
                }
                setState(521);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(524);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OParenContext ------------------------------------------------------------------

WhixyParser::OParenContext::OParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OParenContext::OPENPARENTHESIS() { return getToken(WhixyParser::OPENPARENTHESIS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OParenContext::getRuleIndex() const { return WhixyParser::RuleOParen; }

void WhixyParser::OParenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOParen(this);
}

void WhixyParser::OParenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOParen(this);
}

WhixyParser::OParenContext* WhixyParser::oParen()
{
    OParenContext* _localctx = _tracker.createInstance<OParenContext>(_ctx, getState());
    enterRule(_localctx, 78, WhixyParser::RuleOParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(527);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(526);
            match(WhixyParser::NEWLINE);
        }
        setState(529);
        match(WhixyParser::OPENPARENTHESIS);
        setState(531);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
        case 1: {
            setState(530);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CParenContext ------------------------------------------------------------------

WhixyParser::CParenContext::CParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CParenContext::CLOSEDPARENTHESIS()
{
    return getToken(WhixyParser::CLOSEDPARENTHESIS, 0);
}

tree::TerminalNode* WhixyParser::CParenContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CParenContext::getRuleIndex() const { return WhixyParser::RuleCParen; }

void WhixyParser::CParenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCParen(this);
}

void WhixyParser::CParenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCParen(this);
}

WhixyParser::CParenContext* WhixyParser::cParen()
{
    CParenContext* _localctx = _tracker.createInstance<CParenContext>(_ctx, getState());
    enterRule(_localctx, 80, WhixyParser::RuleCParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(534);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(533);
            match(WhixyParser::NEWLINE);
        }
        setState(536);
        match(WhixyParser::CLOSEDPARENTHESIS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBraceContext ------------------------------------------------------------------

WhixyParser::OBraceContext::OBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBraceContext::OPENBRACE() { return getToken(WhixyParser::OPENBRACE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OBraceContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OBraceContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OBraceContext::getRuleIndex() const { return WhixyParser::RuleOBrace; }

void WhixyParser::OBraceContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOBrace(this);
}

void WhixyParser::OBraceContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOBrace(this);
}

WhixyParser::OBraceContext* WhixyParser::oBrace()
{
    OBraceContext* _localctx = _tracker.createInstance<OBraceContext>(_ctx, getState());
    enterRule(_localctx, 82, WhixyParser::RuleOBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(538);
            match(WhixyParser::NEWLINE);
        }
        setState(541);
        match(WhixyParser::OPENBRACE);
        setState(543);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
        case 1: {
            setState(542);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBraceContext ------------------------------------------------------------------

WhixyParser::CBraceContext::CBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBraceContext::CLOSEDBRACE() { return getToken(WhixyParser::CLOSEDBRACE, 0); }

tree::TerminalNode* WhixyParser::CBraceContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CBraceContext::getRuleIndex() const { return WhixyParser::RuleCBrace; }

void WhixyParser::CBraceContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCBrace(this);
}

void WhixyParser::CBraceContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCBrace(this);
}

WhixyParser::CBraceContext* WhixyParser::cBrace()
{
    CBraceContext* _localctx = _tracker.createInstance<CBraceContext>(_ctx, getState());
    enterRule(_localctx, 84, WhixyParser::RuleCBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(545);
            match(WhixyParser::NEWLINE);
        }
        setState(548);
        match(WhixyParser::CLOSEDBRACE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

void WhixyParser::initialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    whixyparserParserInitialize();
#else
    ::antlr4::internal::call_once(whixyparserParserOnceFlag, whixyparserParserInitialize);
#endif
}
