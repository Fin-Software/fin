
// Generated from WhixyParser.g4 by ANTLR 4.13.2

#include "WhixyParserVisitor.h"

#include "WhixyParser.h"

using namespace antlrcpp;
using namespace Whixy;

using namespace antlr4;

namespace {

struct WhixyParserStaticData final {
    WhixyParserStaticData(
        std::vector<std::string> ruleNames, std::vector<std::string> literalNames,
        std::vector<std::string> symbolicNames
    )
        : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
          symbolicNames(std::move(symbolicNames)), vocabulary(this->literalNames, this->symbolicNames)
    {}

    WhixyParserStaticData(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData(WhixyParserStaticData&&) = delete;
    WhixyParserStaticData& operator=(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData& operator=(WhixyParserStaticData&&) = delete;

    std::vector<antlr4::dfa::DFA> decisionToDFA;
    antlr4::atn::PredictionContextCache sharedContextCache;
    const std::vector<std::string> ruleNames;
    const std::vector<std::string> literalNames;
    const std::vector<std::string> symbolicNames;
    const antlr4::dfa::Vocabulary vocabulary;
    antlr4::atn::SerializedATNView serializedATN;
    std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag whixyparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
    std::unique_ptr<WhixyParserStaticData>
        whixyparserParserStaticData = nullptr;

void whixyparserParserInitialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    if (whixyparserParserStaticData != nullptr) { return; }
#else
    assert(whixyparserParserStaticData == nullptr);
#endif
    auto staticData = std::make_unique<WhixyParserStaticData>(
        std::vector<std::string>{
            "srcFile",
            "stmt",
            "valsStmt",
            "callStmt",
            "blockStmt",
            "returnStmt",
            "functionStmt",
            "procedureStmt",
            "ifStmt",
            "whileStmt",
            "forStmt",
            "expr",
            "ifExpr",
            "functionExpr",
            "procedureExpr",
            "string",
            "atom",
            "blockExpr",
            "typeExpr",
            "tupleExpr",
            "token",
            "eof",
            "equal",
            "oBracket",
            "cBracket",
            "oAngleBracket",
            "cAngleBracket",
            "oParen",
            "cParen",
            "oBrace",
            "cBrace",
            "gtGtPercentEq",
            "gtGtPercent",
            "gtGtEq",
            "gtGt",
            "gtEq",
            "gt",
            "ltLtPercentEq",
            "ltLtPercent",
            "ltLtEq",
            "ltLt",
            "ltEq",
            "lt",
            "starPercentEq",
            "starPercent",
            "starEq",
            "starStar",
            "star",
            "plusPercentEq",
            "plusPercent",
            "plusEq",
            "plusPlus",
            "plus",
            "minusPercentEq",
            "minusPercent",
            "minusEq",
            "minus",
            "exclamationEq",
            "exclamation",
            "ampersandEq",
            "ampersand",
            "percentEq",
            "percent",
            "carrotEq",
            "carrot",
            "slashEq",
            "slash",
            "equalEq",
            "pipeEq",
            "pipe",
            "as",
            "stmtSep",
            "exprSep"
        },
        std::vector<std::string>{"",
                                 "",
                                 "",
                                 "",
                                 "",
                                 "",
                                 "':'",
                                 "','",
                                 "';'",
                                 "'\\u003F'",
                                 "'('",
                                 "')'",
                                 "'{'",
                                 "'}'",
                                 "'<['",
                                 "']>'",
                                 "'['",
                                 "']'",
                                 "'.type'",
                                 "'.len'",
                                 "'.*'",
                                 "'.&'",
                                 "'.\\u003F'",
                                 "'.'",
                                 "'>>%='",
                                 "'>>%'",
                                 "'>>='",
                                 "'>>'",
                                 "'>='",
                                 "'>'",
                                 "'<<%='",
                                 "'<<%'",
                                 "'<<='",
                                 "'<<'",
                                 "'<='",
                                 "'<'",
                                 "'*%='",
                                 "'*%'",
                                 "'*='",
                                 "'**'",
                                 "'*'",
                                 "'+%='",
                                 "'+%'",
                                 "'+='",
                                 "'++'",
                                 "'+'",
                                 "'-%='",
                                 "'-%'",
                                 "'-='",
                                 "'-'",
                                 "'!='",
                                 "'!'",
                                 "'&='",
                                 "'&'",
                                 "'%='",
                                 "'%'",
                                 "'^='",
                                 "'^'",
                                 "'/='",
                                 "'/'",
                                 "'=='",
                                 "'='",
                                 "'|='",
                                 "'|'",
                                 "'proc'",
                                 "'func'",
                                 "'mut'",
                                 "'inline'",
                                 "'return'",
                                 "'continue'",
                                 "'break'",
                                 "'goto'",
                                 "'while'",
                                 "'for'",
                                 "'if'",
                                 "'elseif'",
                                 "'else'",
                                 "'match'",
                                 "'is'",
                                 "'defer'",
                                 "'errdefer'",
                                 "'orelse'",
                                 "'try'",
                                 "'catch'",
                                 "'import'",
                                 "'align'",
                                 "'threadlocal'",
                                 "'unreachable'",
                                 "'volatile'",
                                 "'unroll'",
                                 "'compt'",
                                 "'test'",
                                 "'enum'",
                                 "'union'",
                                 "'std'",
                                 "'as'"},
        std::vector<std::string>{
            "",
            "DOUBLEQUOTESTRING",
            "BACKTICKSTRING",
            "DOCCOMMENT",
            "COMMENT",
            "WHITESPACE",
            "COLON",
            "COMMA",
            "SEMICOLON",
            "QUESTION",
            "OPENPARENTHESIS",
            "CLOSEDPARENTHESIS",
            "OPENBRACE",
            "CLOSEDBRACE",
            "LESSTHAN_OPENBRACKET",
            "CLOSEDBRACKET_GREATERTHAN",
            "OPENBRACKET",
            "CLOSEDBRACKET",
            "DOT_TYPE",
            "DOT_LEN",
            "DOT_ASTERISK",
            "DOT_AMPERSAND",
            "DOT_QUESTION",
            "DOT",
            "GREATERTHAN_GREATERTHAN_PERCENT_EQUAL",
            "GREATERTHAN_GREATERTHAN_PERCENT",
            "GREATERTHAN_GREATERTHAN_EQUAL",
            "GREATERTHAN_GREATERTHAN",
            "GREATERTHAN_EQUAL",
            "GREATERTHAN",
            "LESSTHAN_LESSTHAN_PERCENT_EQUAL",
            "LESSTHAN_LESSTHAN_PERCENT",
            "LESSTHAN_LESSTHAN_EQUAL",
            "LESSTHAN_LESSTHAN",
            "LESSTHAN_EQUAL",
            "LESSTHAN",
            "ASTERISK_PERCENT_EQUAL",
            "ASTERISK_PERCENT",
            "ASTERISK_EQUAL",
            "ASTERISK_ASTERISK",
            "ASTERISK",
            "PLUS_PERCENT_EQUAL",
            "PLUS_PERCENT",
            "PLUS_EQUAL",
            "PLUS_PLUS",
            "PLUS",
            "MINUS_PERCENT_EQUAL",
            "MINUS_PERCENT",
            "MINUS_EQUAL",
            "MINUS",
            "EXCLAMATION_EQUAL",
            "EXCLAMATION",
            "AMPERSAND_EQUAL",
            "AMPERSAND",
            "PERCENT_EQUAL",
            "PERCENT",
            "CARROT_EQUAL",
            "CARROT",
            "SLASH_EQUAL",
            "SLASH",
            "EQUAL_EQUAL",
            "EQUAL",
            "PIPE_EQUAL",
            "PIPE",
            "PROC",
            "FUNC",
            "MUT",
            "INLINE",
            "RETURN",
            "CONTINUE",
            "BREAK",
            "GOTO",
            "WHILE",
            "FOR",
            "IF",
            "ELSEIF",
            "ELSE",
            "MATCH",
            "IS",
            "DEFER",
            "ERRDEFER",
            "ORELSE",
            "TRY",
            "CATCH",
            "IMPORT",
            "ALIGN",
            "THREADLOCAL",
            "UNREACHABLE",
            "VOLATILE",
            "UNROLL",
            "COMPT",
            "TEST",
            "ENUM",
            "UNION",
            "STD",
            "AS",
            "NEWLINE",
            "TOKEN"
        }
    );
    static const int32_t serializedATNSegment[] = {
        4,   1,   97,  705, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,   4,
        7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,   7,   9,
        2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,   14,  2,   15,
        7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,  2,   20,  7,   20,
        2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,   25,  7,   25,  2,   26,
        7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,  7,   30,  2,   31,  7,   31,
        2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,   35,  2,   36,  7,   36,  2,   37,
        7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,  2,   41,  7,   41,  2,   42,  7,   42,
        2,   43,  7,   43,  2,   44,  7,   44,  2,   45,  7,   45,  2,   46,  7,   46,  2,   47,  7,   47,  2,   48,
        7,   48,  2,   49,  7,   49,  2,   50,  7,   50,  2,   51,  7,   51,  2,   52,  7,   52,  2,   53,  7,   53,
        2,   54,  7,   54,  2,   55,  7,   55,  2,   56,  7,   56,  2,   57,  7,   57,  2,   58,  7,   58,  2,   59,
        7,   59,  2,   60,  7,   60,  2,   61,  7,   61,  2,   62,  7,   62,  2,   63,  7,   63,  2,   64,  7,   64,
        2,   65,  7,   65,  2,   66,  7,   66,  2,   67,  7,   67,  2,   68,  7,   68,  2,   69,  7,   69,  2,   70,
        7,   70,  2,   71,  7,   71,  2,   72,  7,   72,  1,   0,   1,   0,   1,   0,   1,   0,   5,   0,   151, 8,
        0,   10,  0,   12,  0,   154, 9,   0,   1,   0,   1,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   1,   1,   1,   1,   1,   3,   1,   167, 8,   1,   1,   2,   4,   2,   170, 8,   2,   11,  2,
        12,  2,   171, 1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   3,   2,   179, 8,   2,   1,   2,   1,   2,
        1,   3,   4,   3,   184, 8,   3,   11,  3,   12,  3,   185, 1,   4,   1,   4,   1,   4,   1,   4,   1,   4,
        5,   4,   193, 8,   4,   10,  4,   12,  4,   196, 9,   4,   3,   4,   198, 8,   4,   1,   4,   1,   4,   1,
        5,   1,   5,   4,   5,   204, 8,   5,   11,  5,   12,  5,   205, 1,   6,   3,   6,   209, 8,   6,   1,   6,
        1,   6,   1,   6,   1,   6,   1,   6,   1,   6,   1,   7,   3,   7,   218, 8,   7,   1,   7,   1,   7,   1,
        7,   1,   7,   1,   7,   1,   7,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   5,
        8,   233, 8,   8,   10,  8,   12,  8,   236, 9,   8,   1,   8,   1,   8,   3,   8,   240, 8,   8,   1,   9,
        3,   9,   243, 8,   9,   1,   9,   1,   9,   3,   9,   247, 8,   9,   1,   9,   3,   9,   250, 8,   9,   1,
        9,   1,   9,   1,   10,  3,   10,  255, 8,   10,  1,   10,  1,   10,  3,   10,  259, 8,   10,  1,   10,  3,
        10,  262, 8,   10,  1,   10,  1,   10,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,
        3,   11,  273, 8,   11,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  1,   12,  5,   12,  282,
        8,   12,  10,  12,  12,  12,  285, 9,   12,  1,   12,  1,   12,  3,   12,  289, 8,   12,  1,   13,  3,   13,
        292, 8,   13,  1,   13,  1,   13,  1,   13,  1,   13,  1,   13,  1,   14,  3,   14,  300, 8,   14,  1,   14,
        1,   14,  1,   14,  1,   14,  1,   14,  1,   15,  1,   15,  3,   15,  309, 8,   15,  1,   16,  1,   16,  1,
        16,  1,   16,  3,   16,  315, 8,   16,  1,   17,  1,   17,  1,   17,  1,   17,  1,   17,  5,   17,  322, 8,
        17,  10,  17,  12,  17,  325, 9,   17,  1,   17,  1,   17,  3,   17,  329, 8,   17,  1,   17,  3,   17,  332,
        8,   17,  1,   17,  1,   17,  1,   18,  1,   18,  1,   18,  1,   18,  1,   18,  5,   18,  341, 8,   18,  10,
        18,  12,  18,  344, 9,   18,  3,   18,  346, 8,   18,  1,   18,  1,   18,  1,   19,  1,   19,  1,   19,  1,
        19,  1,   19,  5,   19,  355, 8,   19,  10,  19,  12,  19,  358, 9,   19,  3,   19,  360, 8,   19,  1,   19,
        1,   19,  1,   20,  1,   20,  1,   21,  3,   21,  367, 8,   21,  1,   21,  1,   21,  1,   22,  1,   22,  3,
        22,  373, 8,   22,  1,   23,  1,   23,  3,   23,  377, 8,   23,  1,   24,  3,   24,  380, 8,   24,  1,   24,
        1,   24,  1,   25,  1,   25,  3,   25,  386, 8,   25,  1,   26,  3,   26,  389, 8,   26,  1,   26,  1,   26,
        1,   27,  3,   27,  394, 8,   27,  1,   27,  1,   27,  3,   27,  398, 8,   27,  1,   28,  3,   28,  401, 8,
        28,  1,   28,  1,   28,  3,   28,  405, 8,   28,  1,   29,  3,   29,  408, 8,   29,  1,   29,  1,   29,  3,
        29,  412, 8,   29,  1,   30,  3,   30,  415, 8,   30,  1,   30,  1,   30,  3,   30,  419, 8,   30,  1,   31,
        3,   31,  422, 8,   31,  1,   31,  1,   31,  3,   31,  426, 8,   31,  1,   32,  3,   32,  429, 8,   32,  1,
        32,  1,   32,  3,   32,  433, 8,   32,  1,   33,  3,   33,  436, 8,   33,  1,   33,  1,   33,  3,   33,  440,
        8,   33,  1,   34,  3,   34,  443, 8,   34,  1,   34,  1,   34,  3,   34,  447, 8,   34,  1,   35,  3,   35,
        450, 8,   35,  1,   35,  1,   35,  3,   35,  454, 8,   35,  1,   36,  3,   36,  457, 8,   36,  1,   36,  1,
        36,  3,   36,  461, 8,   36,  1,   37,  3,   37,  464, 8,   37,  1,   37,  1,   37,  3,   37,  468, 8,   37,
        1,   38,  3,   38,  471, 8,   38,  1,   38,  1,   38,  3,   38,  475, 8,   38,  1,   39,  3,   39,  478, 8,
        39,  1,   39,  1,   39,  3,   39,  482, 8,   39,  1,   40,  3,   40,  485, 8,   40,  1,   40,  1,   40,  3,
        40,  489, 8,   40,  1,   41,  3,   41,  492, 8,   41,  1,   41,  1,   41,  3,   41,  496, 8,   41,  1,   42,
        3,   42,  499, 8,   42,  1,   42,  1,   42,  3,   42,  503, 8,   42,  1,   43,  3,   43,  506, 8,   43,  1,
        43,  1,   43,  3,   43,  510, 8,   43,  1,   44,  3,   44,  513, 8,   44,  1,   44,  1,   44,  3,   44,  517,
        8,   44,  1,   45,  3,   45,  520, 8,   45,  1,   45,  1,   45,  3,   45,  524, 8,   45,  1,   46,  3,   46,
        527, 8,   46,  1,   46,  1,   46,  3,   46,  531, 8,   46,  1,   47,  3,   47,  534, 8,   47,  1,   47,  1,
        47,  3,   47,  538, 8,   47,  1,   48,  3,   48,  541, 8,   48,  1,   48,  1,   48,  3,   48,  545, 8,   48,
        1,   49,  3,   49,  548, 8,   49,  1,   49,  1,   49,  3,   49,  552, 8,   49,  1,   50,  3,   50,  555, 8,
        50,  1,   50,  1,   50,  3,   50,  559, 8,   50,  1,   51,  3,   51,  562, 8,   51,  1,   51,  1,   51,  3,
        51,  566, 8,   51,  1,   52,  3,   52,  569, 8,   52,  1,   52,  1,   52,  3,   52,  573, 8,   52,  1,   53,
        3,   53,  576, 8,   53,  1,   53,  1,   53,  3,   53,  580, 8,   53,  1,   54,  3,   54,  583, 8,   54,  1,
        54,  1,   54,  3,   54,  587, 8,   54,  1,   55,  3,   55,  590, 8,   55,  1,   55,  1,   55,  3,   55,  594,
        8,   55,  1,   56,  3,   56,  597, 8,   56,  1,   56,  1,   56,  3,   56,  601, 8,   56,  1,   57,  3,   57,
        604, 8,   57,  1,   57,  1,   57,  3,   57,  608, 8,   57,  1,   58,  3,   58,  611, 8,   58,  1,   58,  1,
        58,  3,   58,  615, 8,   58,  1,   59,  3,   59,  618, 8,   59,  1,   59,  1,   59,  3,   59,  622, 8,   59,
        1,   60,  3,   60,  625, 8,   60,  1,   60,  1,   60,  3,   60,  629, 8,   60,  1,   61,  3,   61,  632, 8,
        61,  1,   61,  1,   61,  3,   61,  636, 8,   61,  1,   62,  3,   62,  639, 8,   62,  1,   62,  1,   62,  3,
        62,  643, 8,   62,  1,   63,  3,   63,  646, 8,   63,  1,   63,  1,   63,  3,   63,  650, 8,   63,  1,   64,
        3,   64,  653, 8,   64,  1,   64,  1,   64,  3,   64,  657, 8,   64,  1,   65,  3,   65,  660, 8,   65,  1,
        65,  1,   65,  3,   65,  664, 8,   65,  1,   66,  3,   66,  667, 8,   66,  1,   66,  1,   66,  3,   66,  671,
        8,   66,  1,   67,  3,   67,  674, 8,   67,  1,   67,  1,   67,  3,   67,  678, 8,   67,  1,   68,  3,   68,
        681, 8,   68,  1,   68,  1,   68,  3,   68,  685, 8,   68,  1,   69,  3,   69,  688, 8,   69,  1,   69,  1,
        69,  3,   69,  692, 8,   69,  1,   70,  3,   70,  695, 8,   70,  1,   70,  1,   70,  3,   70,  699, 8,   70,
        1,   71,  1,   71,  1,   72,  1,   72,  1,   72,  0,   0,   73,  0,   2,   4,   6,   8,   10,  12,  14,  16,
        18,  20,  22,  24,  26,  28,  30,  32,  34,  36,  38,  40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,
        62,  64,  66,  68,  70,  72,  74,  76,  78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98,  100, 102, 104,
        106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 0,   2,
        2,   0,   8,   8,   96,  96,  2,   0,   7,   7,   96,  96,  772, 0,   146, 1,   0,   0,   0,   2,   166, 1,
        0,   0,   0,   4,   169, 1,   0,   0,   0,   6,   183, 1,   0,   0,   0,   8,   187, 1,   0,   0,   0,   10,
        201, 1,   0,   0,   0,   12,  208, 1,   0,   0,   0,   14,  217, 1,   0,   0,   0,   16,  225, 1,   0,   0,
        0,   18,  242, 1,   0,   0,   0,   20,  254, 1,   0,   0,   0,   22,  272, 1,   0,   0,   0,   24,  274, 1,
        0,   0,   0,   26,  291, 1,   0,   0,   0,   28,  299, 1,   0,   0,   0,   30,  308, 1,   0,   0,   0,   32,
        314, 1,   0,   0,   0,   34,  316, 1,   0,   0,   0,   36,  335, 1,   0,   0,   0,   38,  349, 1,   0,   0,
        0,   40,  363, 1,   0,   0,   0,   42,  366, 1,   0,   0,   0,   44,  370, 1,   0,   0,   0,   46,  374, 1,
        0,   0,   0,   48,  379, 1,   0,   0,   0,   50,  383, 1,   0,   0,   0,   52,  388, 1,   0,   0,   0,   54,
        393, 1,   0,   0,   0,   56,  400, 1,   0,   0,   0,   58,  407, 1,   0,   0,   0,   60,  414, 1,   0,   0,
        0,   62,  421, 1,   0,   0,   0,   64,  428, 1,   0,   0,   0,   66,  435, 1,   0,   0,   0,   68,  442, 1,
        0,   0,   0,   70,  449, 1,   0,   0,   0,   72,  456, 1,   0,   0,   0,   74,  463, 1,   0,   0,   0,   76,
        470, 1,   0,   0,   0,   78,  477, 1,   0,   0,   0,   80,  484, 1,   0,   0,   0,   82,  491, 1,   0,   0,
        0,   84,  498, 1,   0,   0,   0,   86,  505, 1,   0,   0,   0,   88,  512, 1,   0,   0,   0,   90,  519, 1,
        0,   0,   0,   92,  526, 1,   0,   0,   0,   94,  533, 1,   0,   0,   0,   96,  540, 1,   0,   0,   0,   98,
        547, 1,   0,   0,   0,   100, 554, 1,   0,   0,   0,   102, 561, 1,   0,   0,   0,   104, 568, 1,   0,   0,
        0,   106, 575, 1,   0,   0,   0,   108, 582, 1,   0,   0,   0,   110, 589, 1,   0,   0,   0,   112, 596, 1,
        0,   0,   0,   114, 603, 1,   0,   0,   0,   116, 610, 1,   0,   0,   0,   118, 617, 1,   0,   0,   0,   120,
        624, 1,   0,   0,   0,   122, 631, 1,   0,   0,   0,   124, 638, 1,   0,   0,   0,   126, 645, 1,   0,   0,
        0,   128, 652, 1,   0,   0,   0,   130, 659, 1,   0,   0,   0,   132, 666, 1,   0,   0,   0,   134, 673, 1,
        0,   0,   0,   136, 680, 1,   0,   0,   0,   138, 687, 1,   0,   0,   0,   140, 694, 1,   0,   0,   0,   142,
        700, 1,   0,   0,   0,   144, 702, 1,   0,   0,   0,   146, 152, 3,   2,   1,   0,   147, 148, 3,   142, 71,
        0,   148, 149, 3,   2,   1,   0,   149, 151, 1,   0,   0,   0,   150, 147, 1,   0,   0,   0,   151, 154, 1,
        0,   0,   0,   152, 150, 1,   0,   0,   0,   152, 153, 1,   0,   0,   0,   153, 155, 1,   0,   0,   0,   154,
        152, 1,   0,   0,   0,   155, 156, 3,   42,  21,  0,   156, 1,   1,   0,   0,   0,   157, 167, 3,   4,   2,
        0,   158, 167, 3,   6,   3,   0,   159, 167, 3,   8,   4,   0,   160, 167, 3,   10,  5,   0,   161, 167, 3,
        12,  6,   0,   162, 167, 3,   14,  7,   0,   163, 167, 3,   16,  8,   0,   164, 167, 3,   18,  9,   0,   165,
        167, 3,   20,  10,  0,   166, 157, 1,   0,   0,   0,   166, 158, 1,   0,   0,   0,   166, 159, 1,   0,   0,
        0,   166, 160, 1,   0,   0,   0,   166, 161, 1,   0,   0,   0,   166, 162, 1,   0,   0,   0,   166, 163, 1,
        0,   0,   0,   166, 164, 1,   0,   0,   0,   166, 165, 1,   0,   0,   0,   167, 3,   1,   0,   0,   0,   168,
        170, 3,   40,  20,  0,   169, 168, 1,   0,   0,   0,   170, 171, 1,   0,   0,   0,   171, 169, 1,   0,   0,
        0,   171, 172, 1,   0,   0,   0,   172, 173, 1,   0,   0,   0,   173, 178, 5,   6,   0,   0,   174, 175, 3,
        22,  11,  0,   175, 176, 5,   61,  0,   0,   176, 179, 1,   0,   0,   0,   177, 179, 5,   61,  0,   0,   178,
        174, 1,   0,   0,   0,   178, 177, 1,   0,   0,   0,   178, 179, 1,   0,   0,   0,   179, 180, 1,   0,   0,
        0,   180, 181, 3,   22,  11,  0,   181, 5,   1,   0,   0,   0,   182, 184, 3,   32,  16,  0,   183, 182, 1,
        0,   0,   0,   184, 185, 1,   0,   0,   0,   185, 183, 1,   0,   0,   0,   185, 186, 1,   0,   0,   0,   186,
        7,   1,   0,   0,   0,   187, 197, 3,   54,  27,  0,   188, 194, 3,   2,   1,   0,   189, 190, 3,   142, 71,
        0,   190, 191, 3,   2,   1,   0,   191, 193, 1,   0,   0,   0,   192, 189, 1,   0,   0,   0,   193, 196, 1,
        0,   0,   0,   194, 192, 1,   0,   0,   0,   194, 195, 1,   0,   0,   0,   195, 198, 1,   0,   0,   0,   196,
        194, 1,   0,   0,   0,   197, 188, 1,   0,   0,   0,   197, 198, 1,   0,   0,   0,   198, 199, 1,   0,   0,
        0,   199, 200, 3,   56,  28,  0,   200, 9,   1,   0,   0,   0,   201, 203, 5,   68,  0,   0,   202, 204, 3,
        32,  16,  0,   203, 202, 1,   0,   0,   0,   204, 205, 1,   0,   0,   0,   205, 203, 1,   0,   0,   0,   205,
        206, 1,   0,   0,   0,   206, 11,  1,   0,   0,   0,   207, 209, 5,   67,  0,   0,   208, 207, 1,   0,   0,
        0,   208, 209, 1,   0,   0,   0,   209, 210, 1,   0,   0,   0,   210, 211, 5,   65,  0,   0,   211, 212, 3,
        40,  20,  0,   212, 213, 3,   36,  18,  0,   213, 214, 3,   38,  19,  0,   214, 215, 3,   8,   4,   0,   215,
        13,  1,   0,   0,   0,   216, 218, 5,   67,  0,   0,   217, 216, 1,   0,   0,   0,   217, 218, 1,   0,   0,
        0,   218, 219, 1,   0,   0,   0,   219, 220, 5,   64,  0,   0,   220, 221, 3,   40,  20,  0,   221, 222, 3,
        36,  18,  0,   222, 223, 3,   38,  19,  0,   223, 224, 3,   8,   4,   0,   224, 15,  1,   0,   0,   0,   225,
        226, 5,   74,  0,   0,   226, 227, 3,   34,  17,  0,   227, 234, 3,   8,   4,   0,   228, 229, 5,   75,  0,
        0,   229, 230, 3,   34,  17,  0,   230, 231, 3,   8,   4,   0,   231, 233, 1,   0,   0,   0,   232, 228, 1,
        0,   0,   0,   233, 236, 1,   0,   0,   0,   234, 232, 1,   0,   0,   0,   234, 235, 1,   0,   0,   0,   235,
        239, 1,   0,   0,   0,   236, 234, 1,   0,   0,   0,   237, 238, 5,   76,  0,   0,   238, 240, 3,   8,   4,
        0,   239, 237, 1,   0,   0,   0,   239, 240, 1,   0,   0,   0,   240, 17,  1,   0,   0,   0,   241, 243, 5,
        89,  0,   0,   242, 241, 1,   0,   0,   0,   242, 243, 1,   0,   0,   0,   243, 244, 1,   0,   0,   0,   244,
        246, 5,   72,  0,   0,   245, 247, 3,   34,  17,  0,   246, 245, 1,   0,   0,   0,   246, 247, 1,   0,   0,
        0,   247, 249, 1,   0,   0,   0,   248, 250, 3,   34,  17,  0,   249, 248, 1,   0,   0,   0,   249, 250, 1,
        0,   0,   0,   250, 251, 1,   0,   0,   0,   251, 252, 3,   8,   4,   0,   252, 19,  1,   0,   0,   0,   253,
        255, 5,   89,  0,   0,   254, 253, 1,   0,   0,   0,   254, 255, 1,   0,   0,   0,   255, 256, 1,   0,   0,
        0,   256, 258, 5,   73,  0,   0,   257, 259, 3,   34,  17,  0,   258, 257, 1,   0,   0,   0,   258, 259, 1,
        0,   0,   0,   259, 261, 1,   0,   0,   0,   260, 262, 3,   34,  17,  0,   261, 260, 1,   0,   0,   0,   261,
        262, 1,   0,   0,   0,   262, 263, 1,   0,   0,   0,   263, 264, 3,   8,   4,   0,   264, 21,  1,   0,   0,
        0,   265, 273, 3,   4,   2,   0,   266, 273, 3,   6,   3,   0,   267, 273, 3,   24,  12,  0,   268, 273, 3,
        26,  13,  0,   269, 273, 3,   28,  14,  0,   270, 273, 3,   30,  15,  0,   271, 273, 3,   32,  16,  0,   272,
        265, 1,   0,   0,   0,   272, 266, 1,   0,   0,   0,   272, 267, 1,   0,   0,   0,   272, 268, 1,   0,   0,
        0,   272, 269, 1,   0,   0,   0,   272, 270, 1,   0,   0,   0,   272, 271, 1,   0,   0,   0,   273, 23,  1,
        0,   0,   0,   274, 275, 5,   74,  0,   0,   275, 276, 3,   34,  17,  0,   276, 283, 3,   22,  11,  0,   277,
        278, 5,   75,  0,   0,   278, 279, 3,   34,  17,  0,   279, 280, 3,   22,  11,  0,   280, 282, 1,   0,   0,
        0,   281, 277, 1,   0,   0,   0,   282, 285, 1,   0,   0,   0,   283, 281, 1,   0,   0,   0,   283, 284, 1,
        0,   0,   0,   284, 288, 1,   0,   0,   0,   285, 283, 1,   0,   0,   0,   286, 287, 5,   76,  0,   0,   287,
        289, 3,   22,  11,  0,   288, 286, 1,   0,   0,   0,   288, 289, 1,   0,   0,   0,   289, 25,  1,   0,   0,
        0,   290, 292, 5,   67,  0,   0,   291, 290, 1,   0,   0,   0,   291, 292, 1,   0,   0,   0,   292, 293, 1,
        0,   0,   0,   293, 294, 5,   65,  0,   0,   294, 295, 3,   36,  18,  0,   295, 296, 3,   38,  19,  0,   296,
        297, 3,   8,   4,   0,   297, 27,  1,   0,   0,   0,   298, 300, 5,   67,  0,   0,   299, 298, 1,   0,   0,
        0,   299, 300, 1,   0,   0,   0,   300, 301, 1,   0,   0,   0,   301, 302, 5,   64,  0,   0,   302, 303, 3,
        36,  18,  0,   303, 304, 3,   38,  19,  0,   304, 305, 3,   8,   4,   0,   305, 29,  1,   0,   0,   0,   306,
        309, 5,   1,   0,   0,   307, 309, 5,   2,   0,   0,   308, 306, 1,   0,   0,   0,   308, 307, 1,   0,   0,
        0,   309, 31,  1,   0,   0,   0,   310, 315, 3,   34,  17,  0,   311, 315, 3,   36,  18,  0,   312, 315, 3,
        38,  19,  0,   313, 315, 3,   40,  20,  0,   314, 310, 1,   0,   0,   0,   314, 311, 1,   0,   0,   0,   314,
        312, 1,   0,   0,   0,   314, 313, 1,   0,   0,   0,   315, 33,  1,   0,   0,   0,   316, 331, 3,   54,  27,
        0,   317, 323, 3,   2,   1,   0,   318, 319, 3,   142, 71,  0,   319, 320, 3,   2,   1,   0,   320, 322, 1,
        0,   0,   0,   321, 318, 1,   0,   0,   0,   322, 325, 1,   0,   0,   0,   323, 321, 1,   0,   0,   0,   323,
        324, 1,   0,   0,   0,   324, 326, 1,   0,   0,   0,   325, 323, 1,   0,   0,   0,   326, 327, 3,   142, 71,
        0,   327, 329, 1,   0,   0,   0,   328, 317, 1,   0,   0,   0,   328, 329, 1,   0,   0,   0,   329, 330, 1,
        0,   0,   0,   330, 332, 3,   22,  11,  0,   331, 328, 1,   0,   0,   0,   331, 332, 1,   0,   0,   0,   332,
        333, 1,   0,   0,   0,   333, 334, 3,   56,  28,  0,   334, 35,  1,   0,   0,   0,   335, 345, 3,   58,  29,
        0,   336, 342, 3,   4,   2,   0,   337, 338, 3,   144, 72,  0,   338, 339, 3,   4,   2,   0,   339, 341, 1,
        0,   0,   0,   340, 337, 1,   0,   0,   0,   341, 344, 1,   0,   0,   0,   342, 340, 1,   0,   0,   0,   342,
        343, 1,   0,   0,   0,   343, 346, 1,   0,   0,   0,   344, 342, 1,   0,   0,   0,   345, 336, 1,   0,   0,
        0,   345, 346, 1,   0,   0,   0,   346, 347, 1,   0,   0,   0,   347, 348, 3,   60,  30,  0,   348, 37,  1,
        0,   0,   0,   349, 359, 3,   54,  27,  0,   350, 356, 3,   22,  11,  0,   351, 352, 3,   144, 72,  0,   352,
        353, 3,   22,  11,  0,   353, 355, 1,   0,   0,   0,   354, 351, 1,   0,   0,   0,   355, 358, 1,   0,   0,
        0,   356, 354, 1,   0,   0,   0,   356, 357, 1,   0,   0,   0,   357, 360, 1,   0,   0,   0,   358, 356, 1,
        0,   0,   0,   359, 350, 1,   0,   0,   0,   359, 360, 1,   0,   0,   0,   360, 361, 1,   0,   0,   0,   361,
        362, 3,   56,  28,  0,   362, 39,  1,   0,   0,   0,   363, 364, 5,   97,  0,   0,   364, 41,  1,   0,   0,
        0,   365, 367, 5,   96,  0,   0,   366, 365, 1,   0,   0,   0,   366, 367, 1,   0,   0,   0,   367, 368, 1,
        0,   0,   0,   368, 369, 5,   0,   0,   1,   369, 43,  1,   0,   0,   0,   370, 372, 5,   61,  0,   0,   371,
        373, 5,   96,  0,   0,   372, 371, 1,   0,   0,   0,   372, 373, 1,   0,   0,   0,   373, 45,  1,   0,   0,
        0,   374, 376, 5,   16,  0,   0,   375, 377, 5,   96,  0,   0,   376, 375, 1,   0,   0,   0,   376, 377, 1,
        0,   0,   0,   377, 47,  1,   0,   0,   0,   378, 380, 5,   96,  0,   0,   379, 378, 1,   0,   0,   0,   379,
        380, 1,   0,   0,   0,   380, 381, 1,   0,   0,   0,   381, 382, 5,   17,  0,   0,   382, 49,  1,   0,   0,
        0,   383, 385, 5,   14,  0,   0,   384, 386, 5,   96,  0,   0,   385, 384, 1,   0,   0,   0,   385, 386, 1,
        0,   0,   0,   386, 51,  1,   0,   0,   0,   387, 389, 5,   96,  0,   0,   388, 387, 1,   0,   0,   0,   388,
        389, 1,   0,   0,   0,   389, 390, 1,   0,   0,   0,   390, 391, 5,   15,  0,   0,   391, 53,  1,   0,   0,
        0,   392, 394, 5,   96,  0,   0,   393, 392, 1,   0,   0,   0,   393, 394, 1,   0,   0,   0,   394, 395, 1,
        0,   0,   0,   395, 397, 5,   10,  0,   0,   396, 398, 5,   96,  0,   0,   397, 396, 1,   0,   0,   0,   397,
        398, 1,   0,   0,   0,   398, 55,  1,   0,   0,   0,   399, 401, 5,   96,  0,   0,   400, 399, 1,   0,   0,
        0,   400, 401, 1,   0,   0,   0,   401, 402, 1,   0,   0,   0,   402, 404, 5,   11,  0,   0,   403, 405, 5,
        96,  0,   0,   404, 403, 1,   0,   0,   0,   404, 405, 1,   0,   0,   0,   405, 57,  1,   0,   0,   0,   406,
        408, 5,   96,  0,   0,   407, 406, 1,   0,   0,   0,   407, 408, 1,   0,   0,   0,   408, 409, 1,   0,   0,
        0,   409, 411, 5,   12,  0,   0,   410, 412, 5,   96,  0,   0,   411, 410, 1,   0,   0,   0,   411, 412, 1,
        0,   0,   0,   412, 59,  1,   0,   0,   0,   413, 415, 5,   96,  0,   0,   414, 413, 1,   0,   0,   0,   414,
        415, 1,   0,   0,   0,   415, 416, 1,   0,   0,   0,   416, 418, 5,   13,  0,   0,   417, 419, 5,   96,  0,
        0,   418, 417, 1,   0,   0,   0,   418, 419, 1,   0,   0,   0,   419, 61,  1,   0,   0,   0,   420, 422, 5,
        96,  0,   0,   421, 420, 1,   0,   0,   0,   421, 422, 1,   0,   0,   0,   422, 423, 1,   0,   0,   0,   423,
        425, 5,   24,  0,   0,   424, 426, 5,   96,  0,   0,   425, 424, 1,   0,   0,   0,   425, 426, 1,   0,   0,
        0,   426, 63,  1,   0,   0,   0,   427, 429, 5,   96,  0,   0,   428, 427, 1,   0,   0,   0,   428, 429, 1,
        0,   0,   0,   429, 430, 1,   0,   0,   0,   430, 432, 5,   25,  0,   0,   431, 433, 5,   96,  0,   0,   432,
        431, 1,   0,   0,   0,   432, 433, 1,   0,   0,   0,   433, 65,  1,   0,   0,   0,   434, 436, 5,   96,  0,
        0,   435, 434, 1,   0,   0,   0,   435, 436, 1,   0,   0,   0,   436, 437, 1,   0,   0,   0,   437, 439, 5,
        26,  0,   0,   438, 440, 5,   96,  0,   0,   439, 438, 1,   0,   0,   0,   439, 440, 1,   0,   0,   0,   440,
        67,  1,   0,   0,   0,   441, 443, 5,   96,  0,   0,   442, 441, 1,   0,   0,   0,   442, 443, 1,   0,   0,
        0,   443, 444, 1,   0,   0,   0,   444, 446, 5,   27,  0,   0,   445, 447, 5,   96,  0,   0,   446, 445, 1,
        0,   0,   0,   446, 447, 1,   0,   0,   0,   447, 69,  1,   0,   0,   0,   448, 450, 5,   96,  0,   0,   449,
        448, 1,   0,   0,   0,   449, 450, 1,   0,   0,   0,   450, 451, 1,   0,   0,   0,   451, 453, 5,   28,  0,
        0,   452, 454, 5,   96,  0,   0,   453, 452, 1,   0,   0,   0,   453, 454, 1,   0,   0,   0,   454, 71,  1,
        0,   0,   0,   455, 457, 5,   96,  0,   0,   456, 455, 1,   0,   0,   0,   456, 457, 1,   0,   0,   0,   457,
        458, 1,   0,   0,   0,   458, 460, 5,   29,  0,   0,   459, 461, 5,   96,  0,   0,   460, 459, 1,   0,   0,
        0,   460, 461, 1,   0,   0,   0,   461, 73,  1,   0,   0,   0,   462, 464, 5,   96,  0,   0,   463, 462, 1,
        0,   0,   0,   463, 464, 1,   0,   0,   0,   464, 465, 1,   0,   0,   0,   465, 467, 5,   30,  0,   0,   466,
        468, 5,   96,  0,   0,   467, 466, 1,   0,   0,   0,   467, 468, 1,   0,   0,   0,   468, 75,  1,   0,   0,
        0,   469, 471, 5,   96,  0,   0,   470, 469, 1,   0,   0,   0,   470, 471, 1,   0,   0,   0,   471, 472, 1,
        0,   0,   0,   472, 474, 5,   31,  0,   0,   473, 475, 5,   96,  0,   0,   474, 473, 1,   0,   0,   0,   474,
        475, 1,   0,   0,   0,   475, 77,  1,   0,   0,   0,   476, 478, 5,   96,  0,   0,   477, 476, 1,   0,   0,
        0,   477, 478, 1,   0,   0,   0,   478, 479, 1,   0,   0,   0,   479, 481, 5,   32,  0,   0,   480, 482, 5,
        96,  0,   0,   481, 480, 1,   0,   0,   0,   481, 482, 1,   0,   0,   0,   482, 79,  1,   0,   0,   0,   483,
        485, 5,   96,  0,   0,   484, 483, 1,   0,   0,   0,   484, 485, 1,   0,   0,   0,   485, 486, 1,   0,   0,
        0,   486, 488, 5,   33,  0,   0,   487, 489, 5,   96,  0,   0,   488, 487, 1,   0,   0,   0,   488, 489, 1,
        0,   0,   0,   489, 81,  1,   0,   0,   0,   490, 492, 5,   96,  0,   0,   491, 490, 1,   0,   0,   0,   491,
        492, 1,   0,   0,   0,   492, 493, 1,   0,   0,   0,   493, 495, 5,   34,  0,   0,   494, 496, 5,   96,  0,
        0,   495, 494, 1,   0,   0,   0,   495, 496, 1,   0,   0,   0,   496, 83,  1,   0,   0,   0,   497, 499, 5,
        96,  0,   0,   498, 497, 1,   0,   0,   0,   498, 499, 1,   0,   0,   0,   499, 500, 1,   0,   0,   0,   500,
        502, 5,   35,  0,   0,   501, 503, 5,   96,  0,   0,   502, 501, 1,   0,   0,   0,   502, 503, 1,   0,   0,
        0,   503, 85,  1,   0,   0,   0,   504, 506, 5,   96,  0,   0,   505, 504, 1,   0,   0,   0,   505, 506, 1,
        0,   0,   0,   506, 507, 1,   0,   0,   0,   507, 509, 5,   36,  0,   0,   508, 510, 5,   96,  0,   0,   509,
        508, 1,   0,   0,   0,   509, 510, 1,   0,   0,   0,   510, 87,  1,   0,   0,   0,   511, 513, 5,   96,  0,
        0,   512, 511, 1,   0,   0,   0,   512, 513, 1,   0,   0,   0,   513, 514, 1,   0,   0,   0,   514, 516, 5,
        37,  0,   0,   515, 517, 5,   96,  0,   0,   516, 515, 1,   0,   0,   0,   516, 517, 1,   0,   0,   0,   517,
        89,  1,   0,   0,   0,   518, 520, 5,   96,  0,   0,   519, 518, 1,   0,   0,   0,   519, 520, 1,   0,   0,
        0,   520, 521, 1,   0,   0,   0,   521, 523, 5,   38,  0,   0,   522, 524, 5,   96,  0,   0,   523, 522, 1,
        0,   0,   0,   523, 524, 1,   0,   0,   0,   524, 91,  1,   0,   0,   0,   525, 527, 5,   96,  0,   0,   526,
        525, 1,   0,   0,   0,   526, 527, 1,   0,   0,   0,   527, 528, 1,   0,   0,   0,   528, 530, 5,   39,  0,
        0,   529, 531, 5,   96,  0,   0,   530, 529, 1,   0,   0,   0,   530, 531, 1,   0,   0,   0,   531, 93,  1,
        0,   0,   0,   532, 534, 5,   96,  0,   0,   533, 532, 1,   0,   0,   0,   533, 534, 1,   0,   0,   0,   534,
        535, 1,   0,   0,   0,   535, 537, 5,   40,  0,   0,   536, 538, 5,   96,  0,   0,   537, 536, 1,   0,   0,
        0,   537, 538, 1,   0,   0,   0,   538, 95,  1,   0,   0,   0,   539, 541, 5,   96,  0,   0,   540, 539, 1,
        0,   0,   0,   540, 541, 1,   0,   0,   0,   541, 542, 1,   0,   0,   0,   542, 544, 5,   41,  0,   0,   543,
        545, 5,   96,  0,   0,   544, 543, 1,   0,   0,   0,   544, 545, 1,   0,   0,   0,   545, 97,  1,   0,   0,
        0,   546, 548, 5,   96,  0,   0,   547, 546, 1,   0,   0,   0,   547, 548, 1,   0,   0,   0,   548, 549, 1,
        0,   0,   0,   549, 551, 5,   42,  0,   0,   550, 552, 5,   96,  0,   0,   551, 550, 1,   0,   0,   0,   551,
        552, 1,   0,   0,   0,   552, 99,  1,   0,   0,   0,   553, 555, 5,   96,  0,   0,   554, 553, 1,   0,   0,
        0,   554, 555, 1,   0,   0,   0,   555, 556, 1,   0,   0,   0,   556, 558, 5,   43,  0,   0,   557, 559, 5,
        96,  0,   0,   558, 557, 1,   0,   0,   0,   558, 559, 1,   0,   0,   0,   559, 101, 1,   0,   0,   0,   560,
        562, 5,   96,  0,   0,   561, 560, 1,   0,   0,   0,   561, 562, 1,   0,   0,   0,   562, 563, 1,   0,   0,
        0,   563, 565, 5,   44,  0,   0,   564, 566, 5,   96,  0,   0,   565, 564, 1,   0,   0,   0,   565, 566, 1,
        0,   0,   0,   566, 103, 1,   0,   0,   0,   567, 569, 5,   96,  0,   0,   568, 567, 1,   0,   0,   0,   568,
        569, 1,   0,   0,   0,   569, 570, 1,   0,   0,   0,   570, 572, 5,   45,  0,   0,   571, 573, 5,   96,  0,
        0,   572, 571, 1,   0,   0,   0,   572, 573, 1,   0,   0,   0,   573, 105, 1,   0,   0,   0,   574, 576, 5,
        96,  0,   0,   575, 574, 1,   0,   0,   0,   575, 576, 1,   0,   0,   0,   576, 577, 1,   0,   0,   0,   577,
        579, 5,   46,  0,   0,   578, 580, 5,   96,  0,   0,   579, 578, 1,   0,   0,   0,   579, 580, 1,   0,   0,
        0,   580, 107, 1,   0,   0,   0,   581, 583, 5,   96,  0,   0,   582, 581, 1,   0,   0,   0,   582, 583, 1,
        0,   0,   0,   583, 584, 1,   0,   0,   0,   584, 586, 5,   47,  0,   0,   585, 587, 5,   96,  0,   0,   586,
        585, 1,   0,   0,   0,   586, 587, 1,   0,   0,   0,   587, 109, 1,   0,   0,   0,   588, 590, 5,   96,  0,
        0,   589, 588, 1,   0,   0,   0,   589, 590, 1,   0,   0,   0,   590, 591, 1,   0,   0,   0,   591, 593, 5,
        48,  0,   0,   592, 594, 5,   96,  0,   0,   593, 592, 1,   0,   0,   0,   593, 594, 1,   0,   0,   0,   594,
        111, 1,   0,   0,   0,   595, 597, 5,   96,  0,   0,   596, 595, 1,   0,   0,   0,   596, 597, 1,   0,   0,
        0,   597, 598, 1,   0,   0,   0,   598, 600, 5,   49,  0,   0,   599, 601, 5,   96,  0,   0,   600, 599, 1,
        0,   0,   0,   600, 601, 1,   0,   0,   0,   601, 113, 1,   0,   0,   0,   602, 604, 5,   96,  0,   0,   603,
        602, 1,   0,   0,   0,   603, 604, 1,   0,   0,   0,   604, 605, 1,   0,   0,   0,   605, 607, 5,   50,  0,
        0,   606, 608, 5,   96,  0,   0,   607, 606, 1,   0,   0,   0,   607, 608, 1,   0,   0,   0,   608, 115, 1,
        0,   0,   0,   609, 611, 5,   96,  0,   0,   610, 609, 1,   0,   0,   0,   610, 611, 1,   0,   0,   0,   611,
        612, 1,   0,   0,   0,   612, 614, 5,   51,  0,   0,   613, 615, 5,   96,  0,   0,   614, 613, 1,   0,   0,
        0,   614, 615, 1,   0,   0,   0,   615, 117, 1,   0,   0,   0,   616, 618, 5,   96,  0,   0,   617, 616, 1,
        0,   0,   0,   617, 618, 1,   0,   0,   0,   618, 619, 1,   0,   0,   0,   619, 621, 5,   52,  0,   0,   620,
        622, 5,   96,  0,   0,   621, 620, 1,   0,   0,   0,   621, 622, 1,   0,   0,   0,   622, 119, 1,   0,   0,
        0,   623, 625, 5,   96,  0,   0,   624, 623, 1,   0,   0,   0,   624, 625, 1,   0,   0,   0,   625, 626, 1,
        0,   0,   0,   626, 628, 5,   53,  0,   0,   627, 629, 5,   96,  0,   0,   628, 627, 1,   0,   0,   0,   628,
        629, 1,   0,   0,   0,   629, 121, 1,   0,   0,   0,   630, 632, 5,   96,  0,   0,   631, 630, 1,   0,   0,
        0,   631, 632, 1,   0,   0,   0,   632, 633, 1,   0,   0,   0,   633, 635, 5,   54,  0,   0,   634, 636, 5,
        96,  0,   0,   635, 634, 1,   0,   0,   0,   635, 636, 1,   0,   0,   0,   636, 123, 1,   0,   0,   0,   637,
        639, 5,   96,  0,   0,   638, 637, 1,   0,   0,   0,   638, 639, 1,   0,   0,   0,   639, 640, 1,   0,   0,
        0,   640, 642, 5,   55,  0,   0,   641, 643, 5,   96,  0,   0,   642, 641, 1,   0,   0,   0,   642, 643, 1,
        0,   0,   0,   643, 125, 1,   0,   0,   0,   644, 646, 5,   96,  0,   0,   645, 644, 1,   0,   0,   0,   645,
        646, 1,   0,   0,   0,   646, 647, 1,   0,   0,   0,   647, 649, 5,   56,  0,   0,   648, 650, 5,   96,  0,
        0,   649, 648, 1,   0,   0,   0,   649, 650, 1,   0,   0,   0,   650, 127, 1,   0,   0,   0,   651, 653, 5,
        96,  0,   0,   652, 651, 1,   0,   0,   0,   652, 653, 1,   0,   0,   0,   653, 654, 1,   0,   0,   0,   654,
        656, 5,   57,  0,   0,   655, 657, 5,   96,  0,   0,   656, 655, 1,   0,   0,   0,   656, 657, 1,   0,   0,
        0,   657, 129, 1,   0,   0,   0,   658, 660, 5,   96,  0,   0,   659, 658, 1,   0,   0,   0,   659, 660, 1,
        0,   0,   0,   660, 661, 1,   0,   0,   0,   661, 663, 5,   58,  0,   0,   662, 664, 5,   96,  0,   0,   663,
        662, 1,   0,   0,   0,   663, 664, 1,   0,   0,   0,   664, 131, 1,   0,   0,   0,   665, 667, 5,   96,  0,
        0,   666, 665, 1,   0,   0,   0,   666, 667, 1,   0,   0,   0,   667, 668, 1,   0,   0,   0,   668, 670, 5,
        59,  0,   0,   669, 671, 5,   96,  0,   0,   670, 669, 1,   0,   0,   0,   670, 671, 1,   0,   0,   0,   671,
        133, 1,   0,   0,   0,   672, 674, 5,   96,  0,   0,   673, 672, 1,   0,   0,   0,   673, 674, 1,   0,   0,
        0,   674, 675, 1,   0,   0,   0,   675, 677, 5,   60,  0,   0,   676, 678, 5,   96,  0,   0,   677, 676, 1,
        0,   0,   0,   677, 678, 1,   0,   0,   0,   678, 135, 1,   0,   0,   0,   679, 681, 5,   96,  0,   0,   680,
        679, 1,   0,   0,   0,   680, 681, 1,   0,   0,   0,   681, 682, 1,   0,   0,   0,   682, 684, 5,   62,  0,
        0,   683, 685, 5,   96,  0,   0,   684, 683, 1,   0,   0,   0,   684, 685, 1,   0,   0,   0,   685, 137, 1,
        0,   0,   0,   686, 688, 5,   96,  0,   0,   687, 686, 1,   0,   0,   0,   687, 688, 1,   0,   0,   0,   688,
        689, 1,   0,   0,   0,   689, 691, 5,   63,  0,   0,   690, 692, 5,   96,  0,   0,   691, 690, 1,   0,   0,
        0,   691, 692, 1,   0,   0,   0,   692, 139, 1,   0,   0,   0,   693, 695, 5,   96,  0,   0,   694, 693, 1,
        0,   0,   0,   694, 695, 1,   0,   0,   0,   695, 696, 1,   0,   0,   0,   696, 698, 5,   95,  0,   0,   697,
        699, 5,   96,  0,   0,   698, 697, 1,   0,   0,   0,   698, 699, 1,   0,   0,   0,   699, 141, 1,   0,   0,
        0,   700, 701, 7,   0,   0,   0,   701, 143, 1,   0,   0,   0,   702, 703, 7,   1,   0,   0,   703, 145, 1,
        0,   0,   0,   126, 152, 166, 171, 178, 185, 194, 197, 205, 208, 217, 234, 239, 242, 246, 249, 254, 258, 261,
        272, 283, 288, 291, 299, 308, 314, 323, 328, 331, 342, 345, 356, 359, 366, 372, 376, 379, 385, 388, 393, 397,
        400, 404, 407, 411, 414, 418, 421, 425, 428, 432, 435, 439, 442, 446, 449, 453, 456, 460, 463, 467, 470, 474,
        477, 481, 484, 488, 491, 495, 498, 502, 505, 509, 512, 516, 519, 523, 526, 530, 533, 537, 540, 544, 547, 551,
        554, 558, 561, 565, 568, 572, 575, 579, 582, 586, 589, 593, 596, 600, 603, 607, 610, 614, 617, 621, 624, 628,
        631, 635, 638, 642, 645, 649, 652, 656, 659, 663, 666, 670, 673, 677, 680, 684, 687, 691, 694, 698
    };
    staticData->serializedATN = antlr4::atn::SerializedATNView(
        serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0])
    );

    antlr4::atn::ATNDeserializer deserializer;
    staticData->atn = deserializer.deserialize(staticData->serializedATN);

    const size_t count = staticData->atn->getNumberOfDecisions();
    staticData->decisionToDFA.reserve(count);
    for (size_t i = 0; i < count; i++) {
        staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
    }
    whixyparserParserStaticData = std::move(staticData);
}

} // namespace

WhixyParser::WhixyParser(TokenStream* input): WhixyParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WhixyParser::WhixyParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options): Parser(input)
{
    WhixyParser::initialize();
    _interpreter = new atn::ParserATNSimulator(
        this, *whixyparserParserStaticData->atn, whixyparserParserStaticData->decisionToDFA,
        whixyparserParserStaticData->sharedContextCache, options
    );
}

WhixyParser::~WhixyParser() { delete _interpreter; }

const atn::ATN& WhixyParser::getATN() const { return *whixyparserParserStaticData->atn; }

std::string WhixyParser::getGrammarFileName() const { return "WhixyParser.g4"; }

const std::vector<std::string>& WhixyParser::getRuleNames() const { return whixyparserParserStaticData->ruleNames; }

const dfa::Vocabulary& WhixyParser::getVocabulary() const { return whixyparserParserStaticData->vocabulary; }

antlr4::atn::SerializedATNView WhixyParser::getSerializedATN() const
{
    return whixyparserParserStaticData->serializedATN;
}

//----------------- SrcFileContext ------------------------------------------------------------------

WhixyParser::SrcFileContext::SrcFileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::StmtContext*> WhixyParser::SrcFileContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::SrcFileContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

WhixyParser::EofContext* WhixyParser::SrcFileContext::eof() { return getRuleContext<WhixyParser::EofContext>(0); }

std::vector<WhixyParser::StmtSepContext*> WhixyParser::SrcFileContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::SrcFileContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::SrcFileContext::getRuleIndex() const { return WhixyParser::RuleSrcFile; }

std::any WhixyParser::SrcFileContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSrcFile(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::SrcFileContext* WhixyParser::srcFile()
{
    SrcFileContext* _localctx = _tracker.createInstance<SrcFileContext>(_ctx, getState());
    enterRule(_localctx, 0, WhixyParser::RuleSrcFile);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(146);
        stmt();
        setState(152);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(147);
                stmtSep();
                setState(148);
                stmt();
            }
            setState(154);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
        }
        setState(155);
        eof();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

WhixyParser::StmtContext::StmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::ValsStmtContext* WhixyParser::StmtContext::valsStmt()
{
    return getRuleContext<WhixyParser::ValsStmtContext>(0);
}

WhixyParser::CallStmtContext* WhixyParser::StmtContext::callStmt()
{
    return getRuleContext<WhixyParser::CallStmtContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::StmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::ReturnStmtContext* WhixyParser::StmtContext::returnStmt()
{
    return getRuleContext<WhixyParser::ReturnStmtContext>(0);
}

WhixyParser::FunctionStmtContext* WhixyParser::StmtContext::functionStmt()
{
    return getRuleContext<WhixyParser::FunctionStmtContext>(0);
}

WhixyParser::ProcedureStmtContext* WhixyParser::StmtContext::procedureStmt()
{
    return getRuleContext<WhixyParser::ProcedureStmtContext>(0);
}

WhixyParser::IfStmtContext* WhixyParser::StmtContext::ifStmt() { return getRuleContext<WhixyParser::IfStmtContext>(0); }

WhixyParser::WhileStmtContext* WhixyParser::StmtContext::whileStmt()
{
    return getRuleContext<WhixyParser::WhileStmtContext>(0);
}

WhixyParser::ForStmtContext* WhixyParser::StmtContext::forStmt()
{
    return getRuleContext<WhixyParser::ForStmtContext>(0);
}

size_t WhixyParser::StmtContext::getRuleIndex() const { return WhixyParser::RuleStmt; }

std::any WhixyParser::StmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StmtContext* WhixyParser::stmt()
{
    StmtContext* _localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
    enterRule(_localctx, 2, WhixyParser::RuleStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(166);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(157);
            valsStmt();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(158);
            callStmt();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(159);
            blockStmt();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(160);
            returnStmt();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(161);
            functionStmt();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(162);
            procedureStmt();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(163);
            ifStmt();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(164);
            whileStmt();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(165);
            forStmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ValsStmtContext ------------------------------------------------------------------

WhixyParser::ValsStmtContext::ValsStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ValsStmtContext::COLON() { return getToken(WhixyParser::COLON, 0); }

std::vector<WhixyParser::ExprContext*> WhixyParser::ValsStmtContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::ValsStmtContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::ValsStmtContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::ValsStmtContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::ValsStmtContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

size_t WhixyParser::ValsStmtContext::getRuleIndex() const { return WhixyParser::RuleValsStmt; }

std::any WhixyParser::ValsStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitValsStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ValsStmtContext* WhixyParser::valsStmt()
{
    ValsStmtContext* _localctx = _tracker.createInstance<ValsStmtContext>(_ctx, getState());
    enterRule(_localctx, 4, WhixyParser::RuleValsStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(169);
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
            setState(168);
            token();
            setState(171);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        while (_la == WhixyParser::TOKEN);
        setState(173);
        match(WhixyParser::COLON);
        setState(178);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
        case 1: {
            setState(174);
            expr();
            setState(175);
            match(WhixyParser::EQUAL);
            break;
        }

        case 2: {
            setState(177);
            match(WhixyParser::EQUAL);
            break;
        }

        default: break;
        }
        setState(180);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CallStmtContext ------------------------------------------------------------------

WhixyParser::CallStmtContext::CallStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::CallStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::CallStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

size_t WhixyParser::CallStmtContext::getRuleIndex() const { return WhixyParser::RuleCallStmt; }

std::any WhixyParser::CallStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCallStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CallStmtContext* WhixyParser::callStmt()
{
    CallStmtContext* _localctx = _tracker.createInstance<CallStmtContext>(_ctx, getState());
    enterRule(_localctx, 6, WhixyParser::RuleCallStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(183);
        _errHandler->sync(this);
        alt = 1;
        do {
            switch (alt) {
            case 1: {
                setState(182);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(185);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
        }
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockStmtContext ------------------------------------------------------------------

WhixyParser::BlockStmtContext::BlockStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::BlockStmtContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::BlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::BlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::BlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::BlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::BlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::BlockStmtContext::getRuleIndex() const { return WhixyParser::RuleBlockStmt; }

std::any WhixyParser::BlockStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBlockStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BlockStmtContext* WhixyParser::blockStmt()
{
    BlockStmtContext* _localctx = _tracker.createInstance<BlockStmtContext>(_ctx, getState());
    enterRule(_localctx, 8, WhixyParser::RuleBlockStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(187);
        oParen();
        setState(197);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
        case 1: {
            setState(188);
            stmt();
            setState(194);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(189);
                    stmtSep();
                    setState(190);
                    stmt();
                }
                setState(196);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(199);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

WhixyParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ReturnStmtContext::RETURN() { return getToken(WhixyParser::RETURN, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::ReturnStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::ReturnStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

size_t WhixyParser::ReturnStmtContext::getRuleIndex() const { return WhixyParser::RuleReturnStmt; }

std::any WhixyParser::ReturnStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitReturnStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ReturnStmtContext* WhixyParser::returnStmt()
{
    ReturnStmtContext* _localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
    enterRule(_localctx, 10, WhixyParser::RuleReturnStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(201);
        match(WhixyParser::RETURN);
        setState(203);
        _errHandler->sync(this);
        alt = 1;
        do {
            switch (alt) {
            case 1: {
                setState(202);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(205);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
        }
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionStmtContext ------------------------------------------------------------------

WhixyParser::FunctionStmtContext::FunctionStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::FunctionStmtContext::FUNC() { return getToken(WhixyParser::FUNC, 0); }

WhixyParser::TokenContext* WhixyParser::FunctionStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

WhixyParser::TypeExprContext* WhixyParser::FunctionStmtContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::FunctionStmtContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::FunctionStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::FunctionStmtContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

size_t WhixyParser::FunctionStmtContext::getRuleIndex() const { return WhixyParser::RuleFunctionStmt; }

std::any WhixyParser::FunctionStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitFunctionStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::FunctionStmtContext* WhixyParser::functionStmt()
{
    FunctionStmtContext* _localctx = _tracker.createInstance<FunctionStmtContext>(_ctx, getState());
    enterRule(_localctx, 12, WhixyParser::RuleFunctionStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(208);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::INLINE) {
            setState(207);
            match(WhixyParser::INLINE);
        }
        setState(210);
        match(WhixyParser::FUNC);
        setState(211);
        token();
        setState(212);
        typeExpr();
        setState(213);
        tupleExpr();
        setState(214);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ProcedureStmtContext ------------------------------------------------------------------

WhixyParser::ProcedureStmtContext::ProcedureStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ProcedureStmtContext::PROC() { return getToken(WhixyParser::PROC, 0); }

WhixyParser::TokenContext* WhixyParser::ProcedureStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

WhixyParser::TypeExprContext* WhixyParser::ProcedureStmtContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::ProcedureStmtContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::ProcedureStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::ProcedureStmtContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

size_t WhixyParser::ProcedureStmtContext::getRuleIndex() const { return WhixyParser::RuleProcedureStmt; }

std::any WhixyParser::ProcedureStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitProcedureStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ProcedureStmtContext* WhixyParser::procedureStmt()
{
    ProcedureStmtContext* _localctx = _tracker.createInstance<ProcedureStmtContext>(_ctx, getState());
    enterRule(_localctx, 14, WhixyParser::RuleProcedureStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(217);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::INLINE) {
            setState(216);
            match(WhixyParser::INLINE);
        }
        setState(219);
        match(WhixyParser::PROC);
        setState(220);
        token();
        setState(221);
        typeExpr();
        setState(222);
        tupleExpr();
        setState(223);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

WhixyParser::IfStmtContext::IfStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfStmtContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::BlockExprContext*> WhixyParser::IfStmtContext::blockExpr()
{
    return getRuleContexts<WhixyParser::BlockExprContext>();
}

WhixyParser::BlockExprContext* WhixyParser::IfStmtContext::blockExpr(size_t i)
{
    return getRuleContext<WhixyParser::BlockExprContext>(i);
}

std::vector<WhixyParser::BlockStmtContext*> WhixyParser::IfStmtContext::blockStmt()
{
    return getRuleContexts<WhixyParser::BlockStmtContext>();
}

WhixyParser::BlockStmtContext* WhixyParser::IfStmtContext::blockStmt(size_t i)
{
    return getRuleContext<WhixyParser::BlockStmtContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfStmtContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfStmtContext::getRuleIndex() const { return WhixyParser::RuleIfStmt; }

std::any WhixyParser::IfStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitIfStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::IfStmtContext* WhixyParser::ifStmt()
{
    IfStmtContext* _localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
    enterRule(_localctx, 16, WhixyParser::RuleIfStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(225);
        match(WhixyParser::IF);
        setState(226);
        blockExpr();
        setState(227);
        blockStmt();
        setState(234);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WhixyParser::ELSEIF) {
            setState(228);
            match(WhixyParser::ELSEIF);
            setState(229);
            blockExpr();
            setState(230);
            blockStmt();
            setState(236);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        setState(239);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::ELSE) {
            setState(237);
            match(WhixyParser::ELSE);
            setState(238);
            blockStmt();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

WhixyParser::WhileStmtContext::WhileStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::BlockStmtContext* WhixyParser::WhileStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::WhileStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

std::vector<WhixyParser::BlockExprContext*> WhixyParser::WhileStmtContext::blockExpr()
{
    return getRuleContexts<WhixyParser::BlockExprContext>();
}

WhixyParser::BlockExprContext* WhixyParser::WhileStmtContext::blockExpr(size_t i)
{
    return getRuleContext<WhixyParser::BlockExprContext>(i);
}

size_t WhixyParser::WhileStmtContext::getRuleIndex() const { return WhixyParser::RuleWhileStmt; }

std::any WhixyParser::WhileStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWhileStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WhileStmtContext* WhixyParser::whileStmt()
{
    WhileStmtContext* _localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
    enterRule(_localctx, 18, WhixyParser::RuleWhileStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(242);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::UNROLL) {
            setState(241);
            match(WhixyParser::UNROLL);
        }
        setState(244);
        match(WhixyParser::WHILE);
        setState(246);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
        case 1: {
            setState(245);
            blockExpr();
            break;
        }

        default: break;
        }
        setState(249);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
        case 1: {
            setState(248);
            blockExpr();
            break;
        }

        default: break;
        }
        setState(251);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

WhixyParser::ForStmtContext::ForStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::BlockStmtContext* WhixyParser::ForStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::ForStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

std::vector<WhixyParser::BlockExprContext*> WhixyParser::ForStmtContext::blockExpr()
{
    return getRuleContexts<WhixyParser::BlockExprContext>();
}

WhixyParser::BlockExprContext* WhixyParser::ForStmtContext::blockExpr(size_t i)
{
    return getRuleContext<WhixyParser::BlockExprContext>(i);
}

size_t WhixyParser::ForStmtContext::getRuleIndex() const { return WhixyParser::RuleForStmt; }

std::any WhixyParser::ForStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitForStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ForStmtContext* WhixyParser::forStmt()
{
    ForStmtContext* _localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
    enterRule(_localctx, 20, WhixyParser::RuleForStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(254);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::UNROLL) {
            setState(253);
            match(WhixyParser::UNROLL);
        }
        setState(256);
        match(WhixyParser::FOR);
        setState(258);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
        case 1: {
            setState(257);
            blockExpr();
            break;
        }

        default: break;
        }
        setState(261);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
        case 1: {
            setState(260);
            blockExpr();
            break;
        }

        default: break;
        }
        setState(263);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WhixyParser::ExprContext::ExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::ValsStmtContext* WhixyParser::ExprContext::valsStmt()
{
    return getRuleContext<WhixyParser::ValsStmtContext>(0);
}

WhixyParser::CallStmtContext* WhixyParser::ExprContext::callStmt()
{
    return getRuleContext<WhixyParser::CallStmtContext>(0);
}

WhixyParser::IfExprContext* WhixyParser::ExprContext::ifExpr() { return getRuleContext<WhixyParser::IfExprContext>(0); }

WhixyParser::FunctionExprContext* WhixyParser::ExprContext::functionExpr()
{
    return getRuleContext<WhixyParser::FunctionExprContext>(0);
}

WhixyParser::ProcedureExprContext* WhixyParser::ExprContext::procedureExpr()
{
    return getRuleContext<WhixyParser::ProcedureExprContext>(0);
}

WhixyParser::StringContext* WhixyParser::ExprContext::string() { return getRuleContext<WhixyParser::StringContext>(0); }

WhixyParser::AtomContext* WhixyParser::ExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::ExprContext::getRuleIndex() const { return WhixyParser::RuleExpr; }

std::any WhixyParser::ExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExprContext* WhixyParser::expr()
{
    ExprContext* _localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
    enterRule(_localctx, 22, WhixyParser::RuleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(272);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(265);
            valsStmt();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(266);
            callStmt();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(267);
            ifExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(268);
            functionExpr();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(269);
            procedureExpr();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(270);
            string();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(271);
            atom();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfExprContext ------------------------------------------------------------------

WhixyParser::IfExprContext::IfExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfExprContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::BlockExprContext*> WhixyParser::IfExprContext::blockExpr()
{
    return getRuleContexts<WhixyParser::BlockExprContext>();
}

WhixyParser::BlockExprContext* WhixyParser::IfExprContext::blockExpr(size_t i)
{
    return getRuleContext<WhixyParser::BlockExprContext>(i);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::IfExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::IfExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfExprContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfExprContext::getRuleIndex() const { return WhixyParser::RuleIfExpr; }

std::any WhixyParser::IfExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitIfExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::IfExprContext* WhixyParser::ifExpr()
{
    IfExprContext* _localctx = _tracker.createInstance<IfExprContext>(_ctx, getState());
    enterRule(_localctx, 24, WhixyParser::RuleIfExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(274);
        match(WhixyParser::IF);
        setState(275);
        blockExpr();
        setState(276);
        expr();
        setState(283);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(277);
                match(WhixyParser::ELSEIF);
                setState(278);
                blockExpr();
                setState(279);
                expr();
            }
            setState(285);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
        }
        setState(288);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
        case 1: {
            setState(286);
            match(WhixyParser::ELSE);
            setState(287);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FunctionExprContext ------------------------------------------------------------------

WhixyParser::FunctionExprContext::FunctionExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::FunctionExprContext::FUNC() { return getToken(WhixyParser::FUNC, 0); }

WhixyParser::TypeExprContext* WhixyParser::FunctionExprContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::FunctionExprContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::FunctionExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::FunctionExprContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

size_t WhixyParser::FunctionExprContext::getRuleIndex() const { return WhixyParser::RuleFunctionExpr; }

std::any WhixyParser::FunctionExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitFunctionExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::FunctionExprContext* WhixyParser::functionExpr()
{
    FunctionExprContext* _localctx = _tracker.createInstance<FunctionExprContext>(_ctx, getState());
    enterRule(_localctx, 26, WhixyParser::RuleFunctionExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(291);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::INLINE) {
            setState(290);
            match(WhixyParser::INLINE);
        }
        setState(293);
        match(WhixyParser::FUNC);
        setState(294);
        typeExpr();
        setState(295);
        tupleExpr();
        setState(296);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ProcedureExprContext ------------------------------------------------------------------

WhixyParser::ProcedureExprContext::ProcedureExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ProcedureExprContext::PROC() { return getToken(WhixyParser::PROC, 0); }

WhixyParser::TypeExprContext* WhixyParser::ProcedureExprContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::ProcedureExprContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::ProcedureExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

tree::TerminalNode* WhixyParser::ProcedureExprContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

size_t WhixyParser::ProcedureExprContext::getRuleIndex() const { return WhixyParser::RuleProcedureExpr; }

std::any WhixyParser::ProcedureExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitProcedureExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ProcedureExprContext* WhixyParser::procedureExpr()
{
    ProcedureExprContext* _localctx = _tracker.createInstance<ProcedureExprContext>(_ctx, getState());
    enterRule(_localctx, 28, WhixyParser::RuleProcedureExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(299);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::INLINE) {
            setState(298);
            match(WhixyParser::INLINE);
        }
        setState(301);
        match(WhixyParser::PROC);
        setState(302);
        typeExpr();
        setState(303);
        tupleExpr();
        setState(304);
        blockStmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

WhixyParser::StringContext::StringContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::StringContext::getRuleIndex() const { return WhixyParser::RuleString; }

void WhixyParser::StringContext::copyFrom(StringContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- BackTickStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::BackTickStringExprContext::BACKTICKSTRING()
{
    return getToken(WhixyParser::BACKTICKSTRING, 0);
}

WhixyParser::BackTickStringExprContext::BackTickStringExprContext(StringContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::BackTickStringExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBackTickStringExpr(this);
    else
        return visitor->visitChildren(this);
}
//----------------- DoubleQuoteStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DoubleQuoteStringExprContext::DOUBLEQUOTESTRING()
{
    return getToken(WhixyParser::DOUBLEQUOTESTRING, 0);
}

WhixyParser::DoubleQuoteStringExprContext::DoubleQuoteStringExprContext(StringContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::DoubleQuoteStringExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDoubleQuoteStringExpr(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::StringContext* WhixyParser::string()
{
    StringContext* _localctx = _tracker.createInstance<StringContext>(_ctx, getState());
    enterRule(_localctx, 30, WhixyParser::RuleString);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(308);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::DOUBLEQUOTESTRING: {
            _localctx = _tracker.createInstance<WhixyParser::DoubleQuoteStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(306);
            match(WhixyParser::DOUBLEQUOTESTRING);
            break;
        }

        case WhixyParser::BACKTICKSTRING: {
            _localctx = _tracker.createInstance<WhixyParser::BackTickStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(307);
            match(WhixyParser::BACKTICKSTRING);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

WhixyParser::AtomContext::AtomContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::BlockExprContext* WhixyParser::AtomContext::blockExpr()
{
    return getRuleContext<WhixyParser::BlockExprContext>(0);
}

WhixyParser::TypeExprContext* WhixyParser::AtomContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::AtomContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::TokenContext* WhixyParser::AtomContext::token() { return getRuleContext<WhixyParser::TokenContext>(0); }

size_t WhixyParser::AtomContext::getRuleIndex() const { return WhixyParser::RuleAtom; }

std::any WhixyParser::AtomContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAtom(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AtomContext* WhixyParser::atom()
{
    AtomContext* _localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
    enterRule(_localctx, 32, WhixyParser::RuleAtom);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(314);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(310);
            blockExpr();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(311);
            typeExpr();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(312);
            tupleExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(313);
            token();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockExprContext ------------------------------------------------------------------

WhixyParser::BlockExprContext::BlockExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::BlockExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::BlockExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

WhixyParser::ExprContext* WhixyParser::BlockExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

std::vector<WhixyParser::StmtContext*> WhixyParser::BlockExprContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::BlockExprContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::BlockExprContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::BlockExprContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::BlockExprContext::getRuleIndex() const { return WhixyParser::RuleBlockExpr; }

std::any WhixyParser::BlockExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBlockExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BlockExprContext* WhixyParser::blockExpr()
{
    BlockExprContext* _localctx = _tracker.createInstance<BlockExprContext>(_ctx, getState());
    enterRule(_localctx, 34, WhixyParser::RuleBlockExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(316);
        oParen();
        setState(331);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
        case 1: {
            setState(328);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
            case 1: {
                setState(317);
                stmt();
                setState(323);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(318);
                        stmtSep();
                        setState(319);
                        stmt();
                    }
                    setState(325);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
                }
                setState(326);
                stmtSep();
                break;
            }

            default: break;
            }
            setState(330);
            expr();
            break;
        }

        default: break;
        }
        setState(333);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeExprContext ------------------------------------------------------------------

WhixyParser::TypeExprContext::TypeExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OBraceContext* WhixyParser::TypeExprContext::oBrace()
{
    return getRuleContext<WhixyParser::OBraceContext>(0);
}

WhixyParser::CBraceContext* WhixyParser::TypeExprContext::cBrace()
{
    return getRuleContext<WhixyParser::CBraceContext>(0);
}

std::vector<WhixyParser::ValsStmtContext*> WhixyParser::TypeExprContext::valsStmt()
{
    return getRuleContexts<WhixyParser::ValsStmtContext>();
}

WhixyParser::ValsStmtContext* WhixyParser::TypeExprContext::valsStmt(size_t i)
{
    return getRuleContext<WhixyParser::ValsStmtContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TypeExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TypeExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TypeExprContext::getRuleIndex() const { return WhixyParser::RuleTypeExpr; }

std::any WhixyParser::TypeExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTypeExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TypeExprContext* WhixyParser::typeExpr()
{
    TypeExprContext* _localctx = _tracker.createInstance<TypeExprContext>(_ctx, getState());
    enterRule(_localctx, 36, WhixyParser::RuleTypeExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(335);
        oBrace();
        setState(345);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::TOKEN) {
            setState(336);
            valsStmt();
            setState(342);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(337);
                    exprSep();
                    setState(338);
                    valsStmt();
                }
                setState(344);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
            }
        }
        setState(347);
        cBrace();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TupleExprContext ------------------------------------------------------------------

WhixyParser::TupleExprContext::TupleExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::TupleExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::TupleExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::TupleExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::TupleExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TupleExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TupleExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TupleExprContext::getRuleIndex() const { return WhixyParser::RuleTupleExpr; }

std::any WhixyParser::TupleExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTupleExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TupleExprContext* WhixyParser::tupleExpr()
{
    TupleExprContext* _localctx = _tracker.createInstance<TupleExprContext>(_ctx, getState());
    enterRule(_localctx, 38, WhixyParser::RuleTupleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(349);
        oParen();
        setState(359);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
        case 1: {
            setState(350);
            expr();
            setState(356);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(351);
                    exprSep();
                    setState(352);
                    expr();
                }
                setState(358);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(361);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TokenContext ------------------------------------------------------------------

WhixyParser::TokenContext::TokenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TokenContext::TOKEN() { return getToken(WhixyParser::TOKEN, 0); }

size_t WhixyParser::TokenContext::getRuleIndex() const { return WhixyParser::RuleToken; }

std::any WhixyParser::TokenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitToken(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TokenContext* WhixyParser::token()
{
    TokenContext* _localctx = _tracker.createInstance<TokenContext>(_ctx, getState());
    enterRule(_localctx, 40, WhixyParser::RuleToken);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(363);
        match(WhixyParser::TOKEN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- EofContext ------------------------------------------------------------------

WhixyParser::EofContext::EofContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::EofContext::EOF() { return getToken(WhixyParser::EOF, 0); }

tree::TerminalNode* WhixyParser::EofContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::EofContext::getRuleIndex() const { return WhixyParser::RuleEof; }

std::any WhixyParser::EofContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitEof(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::EofContext* WhixyParser::eof()
{
    EofContext* _localctx = _tracker.createInstance<EofContext>(_ctx, getState());
    enterRule(_localctx, 42, WhixyParser::RuleEof);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(366);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(365);
            match(WhixyParser::NEWLINE);
        }
        setState(368);
        match(WhixyParser::EOF);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- EqualContext ------------------------------------------------------------------

WhixyParser::EqualContext::EqualContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::EqualContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

tree::TerminalNode* WhixyParser::EqualContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::EqualContext::getRuleIndex() const { return WhixyParser::RuleEqual; }

std::any WhixyParser::EqualContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitEqual(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::EqualContext* WhixyParser::equal()
{
    EqualContext* _localctx = _tracker.createInstance<EqualContext>(_ctx, getState());
    enterRule(_localctx, 44, WhixyParser::RuleEqual);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(370);
        match(WhixyParser::EQUAL);
        setState(372);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(371);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBracketContext ------------------------------------------------------------------

WhixyParser::OBracketContext::OBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBracketContext::OPENBRACKET() { return getToken(WhixyParser::OPENBRACKET, 0); }

tree::TerminalNode* WhixyParser::OBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::OBracketContext::getRuleIndex() const { return WhixyParser::RuleOBracket; }

std::any WhixyParser::OBracketContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOBracket(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OBracketContext* WhixyParser::oBracket()
{
    OBracketContext* _localctx = _tracker.createInstance<OBracketContext>(_ctx, getState());
    enterRule(_localctx, 46, WhixyParser::RuleOBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(374);
        match(WhixyParser::OPENBRACKET);
        setState(376);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(375);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBracketContext ------------------------------------------------------------------

WhixyParser::CBracketContext::CBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBracketContext::CLOSEDBRACKET() { return getToken(WhixyParser::CLOSEDBRACKET, 0); }

tree::TerminalNode* WhixyParser::CBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CBracketContext::getRuleIndex() const { return WhixyParser::RuleCBracket; }

std::any WhixyParser::CBracketContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCBracket(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CBracketContext* WhixyParser::cBracket()
{
    CBracketContext* _localctx = _tracker.createInstance<CBracketContext>(_ctx, getState());
    enterRule(_localctx, 48, WhixyParser::RuleCBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(379);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(378);
            match(WhixyParser::NEWLINE);
        }
        setState(381);
        match(WhixyParser::CLOSEDBRACKET);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OAngleBracketContext ------------------------------------------------------------------

WhixyParser::OAngleBracketContext::OAngleBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OAngleBracketContext::LESSTHAN_OPENBRACKET()
{
    return getToken(WhixyParser::LESSTHAN_OPENBRACKET, 0);
}

tree::TerminalNode* WhixyParser::OAngleBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::OAngleBracketContext::getRuleIndex() const { return WhixyParser::RuleOAngleBracket; }

std::any WhixyParser::OAngleBracketContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOAngleBracket(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OAngleBracketContext* WhixyParser::oAngleBracket()
{
    OAngleBracketContext* _localctx = _tracker.createInstance<OAngleBracketContext>(_ctx, getState());
    enterRule(_localctx, 50, WhixyParser::RuleOAngleBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(383);
        match(WhixyParser::LESSTHAN_OPENBRACKET);
        setState(385);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(384);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CAngleBracketContext ------------------------------------------------------------------

WhixyParser::CAngleBracketContext::CAngleBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CAngleBracketContext::CLOSEDBRACKET_GREATERTHAN()
{
    return getToken(WhixyParser::CLOSEDBRACKET_GREATERTHAN, 0);
}

tree::TerminalNode* WhixyParser::CAngleBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CAngleBracketContext::getRuleIndex() const { return WhixyParser::RuleCAngleBracket; }

std::any WhixyParser::CAngleBracketContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCAngleBracket(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CAngleBracketContext* WhixyParser::cAngleBracket()
{
    CAngleBracketContext* _localctx = _tracker.createInstance<CAngleBracketContext>(_ctx, getState());
    enterRule(_localctx, 52, WhixyParser::RuleCAngleBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(388);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(387);
            match(WhixyParser::NEWLINE);
        }
        setState(390);
        match(WhixyParser::CLOSEDBRACKET_GREATERTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OParenContext ------------------------------------------------------------------

WhixyParser::OParenContext::OParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OParenContext::OPENPARENTHESIS() { return getToken(WhixyParser::OPENPARENTHESIS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OParenContext::getRuleIndex() const { return WhixyParser::RuleOParen; }

std::any WhixyParser::OParenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOParen(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OParenContext* WhixyParser::oParen()
{
    OParenContext* _localctx = _tracker.createInstance<OParenContext>(_ctx, getState());
    enterRule(_localctx, 54, WhixyParser::RuleOParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(393);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(392);
            match(WhixyParser::NEWLINE);
        }
        setState(395);
        match(WhixyParser::OPENPARENTHESIS);
        setState(397);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
        case 1: {
            setState(396);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CParenContext ------------------------------------------------------------------

WhixyParser::CParenContext::CParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CParenContext::CLOSEDPARENTHESIS()
{
    return getToken(WhixyParser::CLOSEDPARENTHESIS, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::CParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::CParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::CParenContext::getRuleIndex() const { return WhixyParser::RuleCParen; }

std::any WhixyParser::CParenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCParen(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CParenContext* WhixyParser::cParen()
{
    CParenContext* _localctx = _tracker.createInstance<CParenContext>(_ctx, getState());
    enterRule(_localctx, 56, WhixyParser::RuleCParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(400);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(399);
            match(WhixyParser::NEWLINE);
        }
        setState(402);
        match(WhixyParser::CLOSEDPARENTHESIS);
        setState(404);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
        case 1: {
            setState(403);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBraceContext ------------------------------------------------------------------

WhixyParser::OBraceContext::OBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBraceContext::OPENBRACE() { return getToken(WhixyParser::OPENBRACE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OBraceContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OBraceContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OBraceContext::getRuleIndex() const { return WhixyParser::RuleOBrace; }

std::any WhixyParser::OBraceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOBrace(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OBraceContext* WhixyParser::oBrace()
{
    OBraceContext* _localctx = _tracker.createInstance<OBraceContext>(_ctx, getState());
    enterRule(_localctx, 58, WhixyParser::RuleOBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(407);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(406);
            match(WhixyParser::NEWLINE);
        }
        setState(409);
        match(WhixyParser::OPENBRACE);
        setState(411);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
        case 1: {
            setState(410);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBraceContext ------------------------------------------------------------------

WhixyParser::CBraceContext::CBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBraceContext::CLOSEDBRACE() { return getToken(WhixyParser::CLOSEDBRACE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::CBraceContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::CBraceContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::CBraceContext::getRuleIndex() const { return WhixyParser::RuleCBrace; }

std::any WhixyParser::CBraceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCBrace(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CBraceContext* WhixyParser::cBrace()
{
    CBraceContext* _localctx = _tracker.createInstance<CBraceContext>(_ctx, getState());
    enterRule(_localctx, 60, WhixyParser::RuleCBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(414);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(413);
            match(WhixyParser::NEWLINE);
        }
        setState(416);
        match(WhixyParser::CLOSEDBRACE);
        setState(418);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
        case 1: {
            setState(417);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtGtPercentEqContext ------------------------------------------------------------------

WhixyParser::GtGtPercentEqContext::GtGtPercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtGtPercentEqContext::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::GtGtPercentEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::GtGtPercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtGtPercentEqContext::getRuleIndex() const { return WhixyParser::RuleGtGtPercentEq; }

std::any WhixyParser::GtGtPercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGtGtPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtGtPercentEqContext* WhixyParser::gtGtPercentEq()
{
    GtGtPercentEqContext* _localctx = _tracker.createInstance<GtGtPercentEqContext>(_ctx, getState());
    enterRule(_localctx, 62, WhixyParser::RuleGtGtPercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(420);
            match(WhixyParser::NEWLINE);
        }
        setState(423);
        match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL);
        setState(425);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(424);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtGtPercentContext ------------------------------------------------------------------

WhixyParser::GtGtPercentContext::GtGtPercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtGtPercentContext::GREATERTHAN_GREATERTHAN_PERCENT()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::GtGtPercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::GtGtPercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtGtPercentContext::getRuleIndex() const { return WhixyParser::RuleGtGtPercent; }

std::any WhixyParser::GtGtPercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGtGtPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtGtPercentContext* WhixyParser::gtGtPercent()
{
    GtGtPercentContext* _localctx = _tracker.createInstance<GtGtPercentContext>(_ctx, getState());
    enterRule(_localctx, 64, WhixyParser::RuleGtGtPercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(428);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(427);
            match(WhixyParser::NEWLINE);
        }
        setState(430);
        match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT);
        setState(432);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(431);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtGtEqContext ------------------------------------------------------------------

WhixyParser::GtGtEqContext::GtGtEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtGtEqContext::GREATERTHAN_GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::GtGtEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::GtGtEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtGtEqContext::getRuleIndex() const { return WhixyParser::RuleGtGtEq; }

std::any WhixyParser::GtGtEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGtGtEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtGtEqContext* WhixyParser::gtGtEq()
{
    GtGtEqContext* _localctx = _tracker.createInstance<GtGtEqContext>(_ctx, getState());
    enterRule(_localctx, 66, WhixyParser::RuleGtGtEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(435);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(434);
            match(WhixyParser::NEWLINE);
        }
        setState(437);
        match(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL);
        setState(439);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(438);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtGtContext ------------------------------------------------------------------

WhixyParser::GtGtContext::GtGtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtGtContext::GREATERTHAN_GREATERTHAN()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::GtGtContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::GtGtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtGtContext::getRuleIndex() const { return WhixyParser::RuleGtGt; }

std::any WhixyParser::GtGtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGtGt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtGtContext* WhixyParser::gtGt()
{
    GtGtContext* _localctx = _tracker.createInstance<GtGtContext>(_ctx, getState());
    enterRule(_localctx, 68, WhixyParser::RuleGtGt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(441);
            match(WhixyParser::NEWLINE);
        }
        setState(444);
        match(WhixyParser::GREATERTHAN_GREATERTHAN);
        setState(446);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(445);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtEqContext ------------------------------------------------------------------

WhixyParser::GtEqContext::GtEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtEqContext::GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::GtEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::GtEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtEqContext::getRuleIndex() const { return WhixyParser::RuleGtEq; }

std::any WhixyParser::GtEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGtEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtEqContext* WhixyParser::gtEq()
{
    GtEqContext* _localctx = _tracker.createInstance<GtEqContext>(_ctx, getState());
    enterRule(_localctx, 70, WhixyParser::RuleGtEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(449);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(448);
            match(WhixyParser::NEWLINE);
        }
        setState(451);
        match(WhixyParser::GREATERTHAN_EQUAL);
        setState(453);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(452);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GtContext ------------------------------------------------------------------

WhixyParser::GtContext::GtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GtContext::GREATERTHAN() { return getToken(WhixyParser::GREATERTHAN, 0); }

std::vector<tree::TerminalNode*> WhixyParser::GtContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::GtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::GtContext::getRuleIndex() const { return WhixyParser::RuleGt; }

std::any WhixyParser::GtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GtContext* WhixyParser::gt()
{
    GtContext* _localctx = _tracker.createInstance<GtContext>(_ctx, getState());
    enterRule(_localctx, 72, WhixyParser::RuleGt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(456);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(455);
            match(WhixyParser::NEWLINE);
        }
        setState(458);
        match(WhixyParser::GREATERTHAN);
        setState(460);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(459);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtLtPercentEqContext ------------------------------------------------------------------

WhixyParser::LtLtPercentEqContext::LtLtPercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtLtPercentEqContext::LESSTHAN_LESSTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::LtLtPercentEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::LtLtPercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtLtPercentEqContext::getRuleIndex() const { return WhixyParser::RuleLtLtPercentEq; }

std::any WhixyParser::LtLtPercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLtLtPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtLtPercentEqContext* WhixyParser::ltLtPercentEq()
{
    LtLtPercentEqContext* _localctx = _tracker.createInstance<LtLtPercentEqContext>(_ctx, getState());
    enterRule(_localctx, 74, WhixyParser::RuleLtLtPercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(463);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(462);
            match(WhixyParser::NEWLINE);
        }
        setState(465);
        match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL);
        setState(467);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(466);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtLtPercentContext ------------------------------------------------------------------

WhixyParser::LtLtPercentContext::LtLtPercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtLtPercentContext::LESSTHAN_LESSTHAN_PERCENT()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::LtLtPercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::LtLtPercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtLtPercentContext::getRuleIndex() const { return WhixyParser::RuleLtLtPercent; }

std::any WhixyParser::LtLtPercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLtLtPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtLtPercentContext* WhixyParser::ltLtPercent()
{
    LtLtPercentContext* _localctx = _tracker.createInstance<LtLtPercentContext>(_ctx, getState());
    enterRule(_localctx, 76, WhixyParser::RuleLtLtPercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(470);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(469);
            match(WhixyParser::NEWLINE);
        }
        setState(472);
        match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT);
        setState(474);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(473);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtLtEqContext ------------------------------------------------------------------

WhixyParser::LtLtEqContext::LtLtEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtLtEqContext::LESSTHAN_LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::LtLtEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::LtLtEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtLtEqContext::getRuleIndex() const { return WhixyParser::RuleLtLtEq; }

std::any WhixyParser::LtLtEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLtLtEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtLtEqContext* WhixyParser::ltLtEq()
{
    LtLtEqContext* _localctx = _tracker.createInstance<LtLtEqContext>(_ctx, getState());
    enterRule(_localctx, 78, WhixyParser::RuleLtLtEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(477);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(476);
            match(WhixyParser::NEWLINE);
        }
        setState(479);
        match(WhixyParser::LESSTHAN_LESSTHAN_EQUAL);
        setState(481);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(480);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtLtContext ------------------------------------------------------------------

WhixyParser::LtLtContext::LtLtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtLtContext::LESSTHAN_LESSTHAN()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::LtLtContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::LtLtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtLtContext::getRuleIndex() const { return WhixyParser::RuleLtLt; }

std::any WhixyParser::LtLtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLtLt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtLtContext* WhixyParser::ltLt()
{
    LtLtContext* _localctx = _tracker.createInstance<LtLtContext>(_ctx, getState());
    enterRule(_localctx, 80, WhixyParser::RuleLtLt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(484);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(483);
            match(WhixyParser::NEWLINE);
        }
        setState(486);
        match(WhixyParser::LESSTHAN_LESSTHAN);
        setState(488);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(487);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtEqContext ------------------------------------------------------------------

WhixyParser::LtEqContext::LtEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtEqContext::LESSTHAN_EQUAL() { return getToken(WhixyParser::LESSTHAN_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::LtEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::LtEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtEqContext::getRuleIndex() const { return WhixyParser::RuleLtEq; }

std::any WhixyParser::LtEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLtEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtEqContext* WhixyParser::ltEq()
{
    LtEqContext* _localctx = _tracker.createInstance<LtEqContext>(_ctx, getState());
    enterRule(_localctx, 82, WhixyParser::RuleLtEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(491);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(490);
            match(WhixyParser::NEWLINE);
        }
        setState(493);
        match(WhixyParser::LESSTHAN_EQUAL);
        setState(495);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(494);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LtContext ------------------------------------------------------------------

WhixyParser::LtContext::LtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LtContext::LESSTHAN() { return getToken(WhixyParser::LESSTHAN, 0); }

std::vector<tree::TerminalNode*> WhixyParser::LtContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::LtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::LtContext::getRuleIndex() const { return WhixyParser::RuleLt; }

std::any WhixyParser::LtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LtContext* WhixyParser::lt()
{
    LtContext* _localctx = _tracker.createInstance<LtContext>(_ctx, getState());
    enterRule(_localctx, 84, WhixyParser::RuleLt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(498);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(497);
            match(WhixyParser::NEWLINE);
        }
        setState(500);
        match(WhixyParser::LESSTHAN);
        setState(502);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(501);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StarPercentEqContext ------------------------------------------------------------------

WhixyParser::StarPercentEqContext::StarPercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StarPercentEqContext::ASTERISK_PERCENT_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_PERCENT_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::StarPercentEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::StarPercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::StarPercentEqContext::getRuleIndex() const { return WhixyParser::RuleStarPercentEq; }

std::any WhixyParser::StarPercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStarPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StarPercentEqContext* WhixyParser::starPercentEq()
{
    StarPercentEqContext* _localctx = _tracker.createInstance<StarPercentEqContext>(_ctx, getState());
    enterRule(_localctx, 86, WhixyParser::RuleStarPercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(505);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(504);
            match(WhixyParser::NEWLINE);
        }
        setState(507);
        match(WhixyParser::ASTERISK_PERCENT_EQUAL);
        setState(509);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(508);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StarPercentContext ------------------------------------------------------------------

WhixyParser::StarPercentContext::StarPercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StarPercentContext::ASTERISK_PERCENT()
{
    return getToken(WhixyParser::ASTERISK_PERCENT, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::StarPercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::StarPercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::StarPercentContext::getRuleIndex() const { return WhixyParser::RuleStarPercent; }

std::any WhixyParser::StarPercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStarPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StarPercentContext* WhixyParser::starPercent()
{
    StarPercentContext* _localctx = _tracker.createInstance<StarPercentContext>(_ctx, getState());
    enterRule(_localctx, 88, WhixyParser::RuleStarPercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(511);
            match(WhixyParser::NEWLINE);
        }
        setState(514);
        match(WhixyParser::ASTERISK_PERCENT);
        setState(516);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(515);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StarEqContext ------------------------------------------------------------------

WhixyParser::StarEqContext::StarEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StarEqContext::ASTERISK_EQUAL() { return getToken(WhixyParser::ASTERISK_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::StarEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::StarEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::StarEqContext::getRuleIndex() const { return WhixyParser::RuleStarEq; }

std::any WhixyParser::StarEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStarEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StarEqContext* WhixyParser::starEq()
{
    StarEqContext* _localctx = _tracker.createInstance<StarEqContext>(_ctx, getState());
    enterRule(_localctx, 90, WhixyParser::RuleStarEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(519);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(518);
            match(WhixyParser::NEWLINE);
        }
        setState(521);
        match(WhixyParser::ASTERISK_EQUAL);
        setState(523);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(522);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StarStarContext ------------------------------------------------------------------

WhixyParser::StarStarContext::StarStarContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StarStarContext::ASTERISK_ASTERISK()
{
    return getToken(WhixyParser::ASTERISK_ASTERISK, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::StarStarContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::StarStarContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::StarStarContext::getRuleIndex() const { return WhixyParser::RuleStarStar; }

std::any WhixyParser::StarStarContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStarStar(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StarStarContext* WhixyParser::starStar()
{
    StarStarContext* _localctx = _tracker.createInstance<StarStarContext>(_ctx, getState());
    enterRule(_localctx, 92, WhixyParser::RuleStarStar);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(526);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(525);
            match(WhixyParser::NEWLINE);
        }
        setState(528);
        match(WhixyParser::ASTERISK_ASTERISK);
        setState(530);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(529);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StarContext ------------------------------------------------------------------

WhixyParser::StarContext::StarContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StarContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

std::vector<tree::TerminalNode*> WhixyParser::StarContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::StarContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::StarContext::getRuleIndex() const { return WhixyParser::RuleStar; }

std::any WhixyParser::StarContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStar(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StarContext* WhixyParser::star()
{
    StarContext* _localctx = _tracker.createInstance<StarContext>(_ctx, getState());
    enterRule(_localctx, 94, WhixyParser::RuleStar);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(533);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(532);
            match(WhixyParser::NEWLINE);
        }
        setState(535);
        match(WhixyParser::ASTERISK);
        setState(537);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(536);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PlusPercentEqContext ------------------------------------------------------------------

WhixyParser::PlusPercentEqContext::PlusPercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PlusPercentEqContext::PLUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::PLUS_PERCENT_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::PlusPercentEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::PlusPercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PlusPercentEqContext::getRuleIndex() const { return WhixyParser::RulePlusPercentEq; }

std::any WhixyParser::PlusPercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlusPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PlusPercentEqContext* WhixyParser::plusPercentEq()
{
    PlusPercentEqContext* _localctx = _tracker.createInstance<PlusPercentEqContext>(_ctx, getState());
    enterRule(_localctx, 96, WhixyParser::RulePlusPercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(540);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(539);
            match(WhixyParser::NEWLINE);
        }
        setState(542);
        match(WhixyParser::PLUS_PERCENT_EQUAL);
        setState(544);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(543);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PlusPercentContext ------------------------------------------------------------------

WhixyParser::PlusPercentContext::PlusPercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PlusPercentContext::PLUS_PERCENT() { return getToken(WhixyParser::PLUS_PERCENT, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PlusPercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PlusPercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PlusPercentContext::getRuleIndex() const { return WhixyParser::RulePlusPercent; }

std::any WhixyParser::PlusPercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlusPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PlusPercentContext* WhixyParser::plusPercent()
{
    PlusPercentContext* _localctx = _tracker.createInstance<PlusPercentContext>(_ctx, getState());
    enterRule(_localctx, 98, WhixyParser::RulePlusPercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(547);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(546);
            match(WhixyParser::NEWLINE);
        }
        setState(549);
        match(WhixyParser::PLUS_PERCENT);
        setState(551);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(550);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PlusEqContext ------------------------------------------------------------------

WhixyParser::PlusEqContext::PlusEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PlusEqContext::PLUS_EQUAL() { return getToken(WhixyParser::PLUS_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PlusEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PlusEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PlusEqContext::getRuleIndex() const { return WhixyParser::RulePlusEq; }

std::any WhixyParser::PlusEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlusEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PlusEqContext* WhixyParser::plusEq()
{
    PlusEqContext* _localctx = _tracker.createInstance<PlusEqContext>(_ctx, getState());
    enterRule(_localctx, 100, WhixyParser::RulePlusEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(554);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(553);
            match(WhixyParser::NEWLINE);
        }
        setState(556);
        match(WhixyParser::PLUS_EQUAL);
        setState(558);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(557);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PlusPlusContext ------------------------------------------------------------------

WhixyParser::PlusPlusContext::PlusPlusContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PlusPlusContext::PLUS_PLUS() { return getToken(WhixyParser::PLUS_PLUS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PlusPlusContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PlusPlusContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PlusPlusContext::getRuleIndex() const { return WhixyParser::RulePlusPlus; }

std::any WhixyParser::PlusPlusContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlusPlus(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PlusPlusContext* WhixyParser::plusPlus()
{
    PlusPlusContext* _localctx = _tracker.createInstance<PlusPlusContext>(_ctx, getState());
    enterRule(_localctx, 102, WhixyParser::RulePlusPlus);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(561);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(560);
            match(WhixyParser::NEWLINE);
        }
        setState(563);
        match(WhixyParser::PLUS_PLUS);
        setState(565);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(564);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PlusContext ------------------------------------------------------------------

WhixyParser::PlusContext::PlusContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PlusContext::PLUS() { return getToken(WhixyParser::PLUS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PlusContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PlusContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PlusContext::getRuleIndex() const { return WhixyParser::RulePlus; }

std::any WhixyParser::PlusContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlus(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PlusContext* WhixyParser::plus()
{
    PlusContext* _localctx = _tracker.createInstance<PlusContext>(_ctx, getState());
    enterRule(_localctx, 104, WhixyParser::RulePlus);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(568);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(567);
            match(WhixyParser::NEWLINE);
        }
        setState(570);
        match(WhixyParser::PLUS);
        setState(572);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(571);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MinusPercentEqContext ------------------------------------------------------------------

WhixyParser::MinusPercentEqContext::MinusPercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::MinusPercentEqContext::MINUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::MINUS_PERCENT_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::MinusPercentEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::MinusPercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::MinusPercentEqContext::getRuleIndex() const { return WhixyParser::RuleMinusPercentEq; }

std::any WhixyParser::MinusPercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitMinusPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::MinusPercentEqContext* WhixyParser::minusPercentEq()
{
    MinusPercentEqContext* _localctx = _tracker.createInstance<MinusPercentEqContext>(_ctx, getState());
    enterRule(_localctx, 106, WhixyParser::RuleMinusPercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(575);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(574);
            match(WhixyParser::NEWLINE);
        }
        setState(577);
        match(WhixyParser::MINUS_PERCENT_EQUAL);
        setState(579);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(578);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MinusPercentContext ------------------------------------------------------------------

WhixyParser::MinusPercentContext::MinusPercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::MinusPercentContext::MINUS_PERCENT()
{
    return getToken(WhixyParser::MINUS_PERCENT, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::MinusPercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::MinusPercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::MinusPercentContext::getRuleIndex() const { return WhixyParser::RuleMinusPercent; }

std::any WhixyParser::MinusPercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitMinusPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::MinusPercentContext* WhixyParser::minusPercent()
{
    MinusPercentContext* _localctx = _tracker.createInstance<MinusPercentContext>(_ctx, getState());
    enterRule(_localctx, 108, WhixyParser::RuleMinusPercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(581);
            match(WhixyParser::NEWLINE);
        }
        setState(584);
        match(WhixyParser::MINUS_PERCENT);
        setState(586);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(585);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MinusEqContext ------------------------------------------------------------------

WhixyParser::MinusEqContext::MinusEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::MinusEqContext::MINUS_EQUAL() { return getToken(WhixyParser::MINUS_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::MinusEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::MinusEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::MinusEqContext::getRuleIndex() const { return WhixyParser::RuleMinusEq; }

std::any WhixyParser::MinusEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitMinusEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::MinusEqContext* WhixyParser::minusEq()
{
    MinusEqContext* _localctx = _tracker.createInstance<MinusEqContext>(_ctx, getState());
    enterRule(_localctx, 110, WhixyParser::RuleMinusEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(588);
            match(WhixyParser::NEWLINE);
        }
        setState(591);
        match(WhixyParser::MINUS_EQUAL);
        setState(593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(592);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MinusContext ------------------------------------------------------------------

WhixyParser::MinusContext::MinusContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::MinusContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::MinusContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::MinusContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::MinusContext::getRuleIndex() const { return WhixyParser::RuleMinus; }

std::any WhixyParser::MinusContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitMinus(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::MinusContext* WhixyParser::minus()
{
    MinusContext* _localctx = _tracker.createInstance<MinusContext>(_ctx, getState());
    enterRule(_localctx, 112, WhixyParser::RuleMinus);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(596);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(595);
            match(WhixyParser::NEWLINE);
        }
        setState(598);
        match(WhixyParser::MINUS);
        setState(600);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(599);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExclamationEqContext ------------------------------------------------------------------

WhixyParser::ExclamationEqContext::ExclamationEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExclamationEqContext::EXCLAMATION_EQUAL()
{
    return getToken(WhixyParser::EXCLAMATION_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::ExclamationEqContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::ExclamationEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::ExclamationEqContext::getRuleIndex() const { return WhixyParser::RuleExclamationEq; }

std::any WhixyParser::ExclamationEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExclamationEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExclamationEqContext* WhixyParser::exclamationEq()
{
    ExclamationEqContext* _localctx = _tracker.createInstance<ExclamationEqContext>(_ctx, getState());
    enterRule(_localctx, 114, WhixyParser::RuleExclamationEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(603);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(602);
            match(WhixyParser::NEWLINE);
        }
        setState(605);
        match(WhixyParser::EXCLAMATION_EQUAL);
        setState(607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(606);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExclamationContext ------------------------------------------------------------------

WhixyParser::ExclamationContext::ExclamationContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExclamationContext::EXCLAMATION() { return getToken(WhixyParser::EXCLAMATION, 0); }

std::vector<tree::TerminalNode*> WhixyParser::ExclamationContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::ExclamationContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::ExclamationContext::getRuleIndex() const { return WhixyParser::RuleExclamation; }

std::any WhixyParser::ExclamationContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExclamation(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExclamationContext* WhixyParser::exclamation()
{
    ExclamationContext* _localctx = _tracker.createInstance<ExclamationContext>(_ctx, getState());
    enterRule(_localctx, 116, WhixyParser::RuleExclamation);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(610);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(609);
            match(WhixyParser::NEWLINE);
        }
        setState(612);
        match(WhixyParser::EXCLAMATION);
        setState(614);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(613);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AmpersandEqContext ------------------------------------------------------------------

WhixyParser::AmpersandEqContext::AmpersandEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::AmpersandEqContext::AMPERSAND_EQUAL()
{
    return getToken(WhixyParser::AMPERSAND_EQUAL, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::AmpersandEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::AmpersandEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::AmpersandEqContext::getRuleIndex() const { return WhixyParser::RuleAmpersandEq; }

std::any WhixyParser::AmpersandEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAmpersandEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AmpersandEqContext* WhixyParser::ampersandEq()
{
    AmpersandEqContext* _localctx = _tracker.createInstance<AmpersandEqContext>(_ctx, getState());
    enterRule(_localctx, 118, WhixyParser::RuleAmpersandEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(616);
            match(WhixyParser::NEWLINE);
        }
        setState(619);
        match(WhixyParser::AMPERSAND_EQUAL);
        setState(621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(620);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AmpersandContext ------------------------------------------------------------------

WhixyParser::AmpersandContext::AmpersandContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::AmpersandContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

std::vector<tree::TerminalNode*> WhixyParser::AmpersandContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::AmpersandContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::AmpersandContext::getRuleIndex() const { return WhixyParser::RuleAmpersand; }

std::any WhixyParser::AmpersandContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAmpersand(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AmpersandContext* WhixyParser::ampersand()
{
    AmpersandContext* _localctx = _tracker.createInstance<AmpersandContext>(_ctx, getState());
    enterRule(_localctx, 120, WhixyParser::RuleAmpersand);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(624);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(623);
            match(WhixyParser::NEWLINE);
        }
        setState(626);
        match(WhixyParser::AMPERSAND);
        setState(628);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(627);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PercentEqContext ------------------------------------------------------------------

WhixyParser::PercentEqContext::PercentEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PercentEqContext::PERCENT_EQUAL() { return getToken(WhixyParser::PERCENT_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PercentEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PercentEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PercentEqContext::getRuleIndex() const { return WhixyParser::RulePercentEq; }

std::any WhixyParser::PercentEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPercentEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PercentEqContext* WhixyParser::percentEq()
{
    PercentEqContext* _localctx = _tracker.createInstance<PercentEqContext>(_ctx, getState());
    enterRule(_localctx, 122, WhixyParser::RulePercentEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(631);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(630);
            match(WhixyParser::NEWLINE);
        }
        setState(633);
        match(WhixyParser::PERCENT_EQUAL);
        setState(635);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(634);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PercentContext ------------------------------------------------------------------

WhixyParser::PercentContext::PercentContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PercentContext::PERCENT() { return getToken(WhixyParser::PERCENT, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PercentContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PercentContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PercentContext::getRuleIndex() const { return WhixyParser::RulePercent; }

std::any WhixyParser::PercentContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPercent(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PercentContext* WhixyParser::percent()
{
    PercentContext* _localctx = _tracker.createInstance<PercentContext>(_ctx, getState());
    enterRule(_localctx, 124, WhixyParser::RulePercent);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(638);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(637);
            match(WhixyParser::NEWLINE);
        }
        setState(640);
        match(WhixyParser::PERCENT);
        setState(642);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(641);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CarrotEqContext ------------------------------------------------------------------

WhixyParser::CarrotEqContext::CarrotEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CarrotEqContext::CARROT_EQUAL() { return getToken(WhixyParser::CARROT_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::CarrotEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::CarrotEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::CarrotEqContext::getRuleIndex() const { return WhixyParser::RuleCarrotEq; }

std::any WhixyParser::CarrotEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCarrotEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CarrotEqContext* WhixyParser::carrotEq()
{
    CarrotEqContext* _localctx = _tracker.createInstance<CarrotEqContext>(_ctx, getState());
    enterRule(_localctx, 126, WhixyParser::RuleCarrotEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(645);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(644);
            match(WhixyParser::NEWLINE);
        }
        setState(647);
        match(WhixyParser::CARROT_EQUAL);
        setState(649);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(648);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CarrotContext ------------------------------------------------------------------

WhixyParser::CarrotContext::CarrotContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CarrotContext::CARROT() { return getToken(WhixyParser::CARROT, 0); }

std::vector<tree::TerminalNode*> WhixyParser::CarrotContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::CarrotContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::CarrotContext::getRuleIndex() const { return WhixyParser::RuleCarrot; }

std::any WhixyParser::CarrotContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCarrot(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CarrotContext* WhixyParser::carrot()
{
    CarrotContext* _localctx = _tracker.createInstance<CarrotContext>(_ctx, getState());
    enterRule(_localctx, 128, WhixyParser::RuleCarrot);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(652);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(651);
            match(WhixyParser::NEWLINE);
        }
        setState(654);
        match(WhixyParser::CARROT);
        setState(656);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(655);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SlashEqContext ------------------------------------------------------------------

WhixyParser::SlashEqContext::SlashEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::SlashEqContext::SLASH_EQUAL() { return getToken(WhixyParser::SLASH_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::SlashEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::SlashEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::SlashEqContext::getRuleIndex() const { return WhixyParser::RuleSlashEq; }

std::any WhixyParser::SlashEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSlashEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::SlashEqContext* WhixyParser::slashEq()
{
    SlashEqContext* _localctx = _tracker.createInstance<SlashEqContext>(_ctx, getState());
    enterRule(_localctx, 130, WhixyParser::RuleSlashEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(659);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(658);
            match(WhixyParser::NEWLINE);
        }
        setState(661);
        match(WhixyParser::SLASH_EQUAL);
        setState(663);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(662);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SlashContext ------------------------------------------------------------------

WhixyParser::SlashContext::SlashContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::SlashContext::SLASH() { return getToken(WhixyParser::SLASH, 0); }

std::vector<tree::TerminalNode*> WhixyParser::SlashContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::SlashContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::SlashContext::getRuleIndex() const { return WhixyParser::RuleSlash; }

std::any WhixyParser::SlashContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSlash(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::SlashContext* WhixyParser::slash()
{
    SlashContext* _localctx = _tracker.createInstance<SlashContext>(_ctx, getState());
    enterRule(_localctx, 132, WhixyParser::RuleSlash);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(666);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(665);
            match(WhixyParser::NEWLINE);
        }
        setState(668);
        match(WhixyParser::SLASH);
        setState(670);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(669);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- EqualEqContext ------------------------------------------------------------------

WhixyParser::EqualEqContext::EqualEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::EqualEqContext::EQUAL_EQUAL() { return getToken(WhixyParser::EQUAL_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::EqualEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::EqualEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::EqualEqContext::getRuleIndex() const { return WhixyParser::RuleEqualEq; }

std::any WhixyParser::EqualEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitEqualEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::EqualEqContext* WhixyParser::equalEq()
{
    EqualEqContext* _localctx = _tracker.createInstance<EqualEqContext>(_ctx, getState());
    enterRule(_localctx, 134, WhixyParser::RuleEqualEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(673);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(672);
            match(WhixyParser::NEWLINE);
        }
        setState(675);
        match(WhixyParser::EQUAL_EQUAL);
        setState(677);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(676);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PipeEqContext ------------------------------------------------------------------

WhixyParser::PipeEqContext::PipeEqContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PipeEqContext::PIPE_EQUAL() { return getToken(WhixyParser::PIPE_EQUAL, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PipeEqContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PipeEqContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PipeEqContext::getRuleIndex() const { return WhixyParser::RulePipeEq; }

std::any WhixyParser::PipeEqContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPipeEq(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PipeEqContext* WhixyParser::pipeEq()
{
    PipeEqContext* _localctx = _tracker.createInstance<PipeEqContext>(_ctx, getState());
    enterRule(_localctx, 136, WhixyParser::RulePipeEq);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(680);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(679);
            match(WhixyParser::NEWLINE);
        }
        setState(682);
        match(WhixyParser::PIPE_EQUAL);
        setState(684);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(683);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PipeContext ------------------------------------------------------------------

WhixyParser::PipeContext::PipeContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::PipeContext::PIPE() { return getToken(WhixyParser::PIPE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::PipeContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::PipeContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::PipeContext::getRuleIndex() const { return WhixyParser::RulePipe; }

std::any WhixyParser::PipeContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPipe(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PipeContext* WhixyParser::pipe()
{
    PipeContext* _localctx = _tracker.createInstance<PipeContext>(_ctx, getState());
    enterRule(_localctx, 138, WhixyParser::RulePipe);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(687);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(686);
            match(WhixyParser::NEWLINE);
        }
        setState(689);
        match(WhixyParser::PIPE);
        setState(691);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(690);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AsContext ------------------------------------------------------------------

WhixyParser::AsContext::AsContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::AsContext::AS() { return getToken(WhixyParser::AS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::AsContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::AsContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::AsContext::getRuleIndex() const { return WhixyParser::RuleAs; }

std::any WhixyParser::AsContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAs(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AsContext* WhixyParser::as()
{
    AsContext* _localctx = _tracker.createInstance<AsContext>(_ctx, getState());
    enterRule(_localctx, 140, WhixyParser::RuleAs);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(694);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(693);
            match(WhixyParser::NEWLINE);
        }
        setState(696);
        match(WhixyParser::AS);
        setState(698);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(697);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtSepContext ------------------------------------------------------------------

WhixyParser::StmtSepContext::StmtSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StmtSepContext::SEMICOLON() { return getToken(WhixyParser::SEMICOLON, 0); }

tree::TerminalNode* WhixyParser::StmtSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::StmtSepContext::getRuleIndex() const { return WhixyParser::RuleStmtSep; }

std::any WhixyParser::StmtSepContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStmtSep(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StmtSepContext* WhixyParser::stmtSep()
{
    StmtSepContext* _localctx = _tracker.createInstance<StmtSepContext>(_ctx, getState());
    enterRule(_localctx, 142, WhixyParser::RuleStmtSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(700);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::SEMICOLON || _la == WhixyParser::NEWLINE)) { _errHandler->recoverInline(this); }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprSepContext ------------------------------------------------------------------

WhixyParser::ExprSepContext::ExprSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExprSepContext::COMMA() { return getToken(WhixyParser::COMMA, 0); }

tree::TerminalNode* WhixyParser::ExprSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::ExprSepContext::getRuleIndex() const { return WhixyParser::RuleExprSep; }

std::any WhixyParser::ExprSepContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExprSep(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExprSepContext* WhixyParser::exprSep()
{
    ExprSepContext* _localctx = _tracker.createInstance<ExprSepContext>(_ctx, getState());
    enterRule(_localctx, 144, WhixyParser::RuleExprSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(702);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::COMMA || _la == WhixyParser::NEWLINE)) { _errHandler->recoverInline(this); }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

void WhixyParser::initialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    whixyparserParserInitialize();
#else
    ::antlr4::internal::call_once(whixyparserParserOnceFlag, whixyparserParserInitialize);
#endif
}
