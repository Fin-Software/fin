
// Generated from WhixyParser.g4 by ANTLR 4.13.2

#include "WhixyParserListener.h"

#include "WhixyParser.h"

using namespace antlrcpp;
using namespace Whixy;

using namespace antlr4;

namespace {

struct WhixyParserStaticData final {
    WhixyParserStaticData(
        std::vector<std::string> ruleNames, std::vector<std::string> literalNames,
        std::vector<std::string> symbolicNames
    )
        : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
          symbolicNames(std::move(symbolicNames)), vocabulary(this->literalNames, this->symbolicNames)
    {}

    WhixyParserStaticData(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData(WhixyParserStaticData&&) = delete;
    WhixyParserStaticData& operator=(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData& operator=(WhixyParserStaticData&&) = delete;

    std::vector<antlr4::dfa::DFA> decisionToDFA;
    antlr4::atn::PredictionContextCache sharedContextCache;
    const std::vector<std::string> ruleNames;
    const std::vector<std::string> literalNames;
    const std::vector<std::string> symbolicNames;
    const antlr4::dfa::Vocabulary vocabulary;
    antlr4::atn::SerializedATNView serializedATN;
    std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag whixyparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
    std::unique_ptr<WhixyParserStaticData>
        whixyparserParserStaticData = nullptr;

void whixyparserParserInitialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    if (whixyparserParserStaticData != nullptr) { return; }
#else
    assert(whixyparserParserStaticData == nullptr);
#endif
    auto staticData = std::make_unique<WhixyParserStaticData>(
        std::vector<std::string>{"srcFile",       "stmtSep",       "stmt",         "field",         "assignStmt",
                                 "assignOp",      "call",          "blockStmt",    "routineStmt",   "returnStmt",
                                 "ifStmt",        "whereStmt",     "comparisonOp", "caseStmtBlock", "loopStmt",
                                 "comptStmt",     "deferStmt",     "errdeferStmt", "exprSep",       "expr",
                                 "binaryExpr",    "binaryOp",      "postExpr",     "postOp",        "preExpr",
                                 "preOp",         "ifExpr",        "whereExpr",    "caseExprBlock", "loopExpr",
                                 "comptExpr",     "routineExpr",   "string",       "atom",          "token",
                                 "blockExpr",     "typeExpr",      "tupleExpr",    "oBracket",      "cBracket",
                                 "oAngleBracket", "cAngleBracket", "dollarParen",  "oParen",        "cParen",
                                 "oBrace",        "cBrace"},
        std::vector<std::string>{
            "",
            "",
            "",
            "",
            "",
            "",
            "','",
            "';'",
            "'\\u003F'",
            "'$('",
            "'('",
            "')'",
            "'{'",
            "'}'",
            "'<['",
            "']>'",
            "'['",
            "']'",
            "'.type'",
            "'.len'",
            "'.*'",
            "'.&'",
            "'.\\u003F'",
            "'.'",
            "'>>%='",
            "'>>%'",
            "'>>='",
            "'>>'",
            "'>='",
            "'>'",
            "'<<%='",
            "'<<%'",
            "'<<='",
            "'<<'",
            "'<='",
            "'<'",
            "'*%='",
            "'*%'",
            "'*='",
            "'**'",
            "'*'",
            "'+%='",
            "'+%'",
            "'+='",
            "'++'",
            "'+'",
            "'-%='",
            "'-%'",
            "'-='",
            "'-'",
            "'!='",
            "'!'",
            "'&='",
            "'&'",
            "'%='",
            "'%'",
            "'^='",
            "'^'",
            "'/='",
            "'/'",
            "'=='",
            "'='",
            "'|='",
            "'|'",
            "'this'",
            "'auto'",
            "'mut'",
            "'inline'",
            "'return'",
            "'continue'",
            "'break'",
            "'goto'",
            "'while'",
            "'for'",
            "'if'",
            "'elseif'",
            "'else'",
            "'where'",
            "'defer'",
            "'errdefer'",
            "'orelse'",
            "'try'",
            "'catch'",
            "'import'",
            "'align'",
            "'threadlocal'",
            "'unreachable'",
            "'volatile'",
            "'unroll'",
            "'compt'",
            "'test'",
            "'enum'",
            "'union'",
            "'std'",
            "'as'"
        },
        std::vector<std::string>{
            "",
            "DOUBLEQUOTESTRING",
            "BACKTICKSTRING",
            "DOCCOMMENT",
            "COMMENT",
            "WHITESPACE",
            "COMMA",
            "SEMICOLON",
            "QUESTION",
            "DOLLAR_OPENPARENTHESIS",
            "OPENPARENTHESIS",
            "CLOSEDPARENTHESIS",
            "OPENBRACE",
            "CLOSEDBRACE",
            "LESSTHAN_OPENBRACKET",
            "CLOSEDBRACKET_GREATERTHAN",
            "OPENBRACKET",
            "CLOSEDBRACKET",
            "DOT_TYPE",
            "DOT_LEN",
            "DOT_ASTERISK",
            "DOT_AMPERSAND",
            "DOT_QUESTION",
            "DOT",
            "GREATERTHAN_GREATERTHAN_PERCENT_EQUAL",
            "GREATERTHAN_GREATERTHAN_PERCENT",
            "GREATERTHAN_GREATERTHAN_EQUAL",
            "GREATERTHAN_GREATERTHAN",
            "GREATERTHAN_EQUAL",
            "GREATERTHAN",
            "LESSTHAN_LESSTHAN_PERCENT_EQUAL",
            "LESSTHAN_LESSTHAN_PERCENT",
            "LESSTHAN_LESSTHAN_EQUAL",
            "LESSTHAN_LESSTHAN",
            "LESSTHAN_EQUAL",
            "LESSTHAN",
            "ASTERISK_PERCENT_EQUAL",
            "ASTERISK_PERCENT",
            "ASTERISK_EQUAL",
            "ASTERISK_ASTERISK",
            "ASTERISK",
            "PLUS_PERCENT_EQUAL",
            "PLUS_PERCENT",
            "PLUS_EQUAL",
            "PLUS_PLUS",
            "PLUS",
            "MINUS_PERCENT_EQUAL",
            "MINUS_PERCENT",
            "MINUS_EQUAL",
            "MINUS",
            "EXCLAMATION_EQUAL",
            "EXCLAMATION",
            "AMPERSAND_EQUAL",
            "AMPERSAND",
            "PERCENT_EQUAL",
            "PERCENT",
            "CARROT_EQUAL",
            "CARROT",
            "SLASH_EQUAL",
            "SLASH",
            "EQUAL_EQUAL",
            "EQUAL",
            "PIPE_EQUAL",
            "PIPE",
            "THIS",
            "AUTO",
            "MUT",
            "INLINE",
            "RETURN",
            "CONTINUE",
            "BREAK",
            "GOTO",
            "WHILE",
            "FOR",
            "IF",
            "ELSEIF",
            "ELSE",
            "WHERE",
            "DEFER",
            "ERRDEFER",
            "ORELSE",
            "TRY",
            "CATCH",
            "IMPORT",
            "ALIGN",
            "THREADLOCAL",
            "UNREACHABLE",
            "VOLATILE",
            "UNROLL",
            "COMPT",
            "TEST",
            "ENUM",
            "UNION",
            "STD",
            "AS",
            "NEWLINE",
            "TOKEN"
        }
    );
    static const int32_t serializedATNSegment[] = {
        4,   1,   96,  563, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,   4,
        7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,   7,   9,
        2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,   14,  2,   15,
        7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,  2,   20,  7,   20,
        2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,   25,  7,   25,  2,   26,
        7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,  7,   30,  2,   31,  7,   31,
        2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,   35,  2,   36,  7,   36,  2,   37,
        7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,  2,   41,  7,   41,  2,   42,  7,   42,
        2,   43,  7,   43,  2,   44,  7,   44,  2,   45,  7,   45,  2,   46,  7,   46,  1,   0,   3,   0,   96,  8,
        0,   1,   0,   1,   0,   1,   0,   1,   0,   5,   0,   102, 8,   0,   10,  0,   12,  0,   105, 9,   0,   1,
        0,   3,   0,   108, 8,   0,   1,   0,   1,   0,   1,   1,   1,   1,   1,   2,   1,   2,   1,   2,   1,   2,
        1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   3,   2,   126, 8,   2,   1,
        3,   1,   3,   1,   3,   1,   3,   3,   3,   132, 8,   3,   1,   3,   4,   3,   135, 8,   3,   11,  3,   12,
        3,   136, 1,   3,   1,   3,   3,   3,   141, 8,   3,   1,   3,   3,   3,   144, 8,   3,   1,   3,   1,   3,
        1,   3,   1,   3,   1,   3,   3,   3,   151, 8,   3,   1,   3,   4,   3,   154, 8,   3,   11,  3,   12,  3,
        155, 1,   3,   1,   3,   3,   3,   160, 8,   3,   1,   3,   3,   3,   163, 8,   3,   3,   3,   165, 8,   3,
        1,   4,   1,   4,   1,   4,   1,   4,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,
        1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   1,   5,   3,   5,   186, 8,   5,   1,
        6,   1,   6,   1,   6,   1,   7,   1,   7,   1,   7,   1,   7,   1,   7,   5,   7,   196, 8,   7,   10,  7,
        12,  7,   199, 9,   7,   3,   7,   201, 8,   7,   1,   7,   1,   7,   1,   7,   1,   7,   1,   7,   1,   7,
        1,   7,   5,   7,   210, 8,   7,   10,  7,   12,  7,   213, 9,   7,   3,   7,   215, 8,   7,   1,   7,   1,
        7,   3,   7,   219, 8,   7,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,
        1,   8,   1,   8,   1,   8,   3,   8,   232, 8,   8,   1,   9,   1,   9,   1,   9,   1,   10,  1,   10,  1,
        10,  1,   10,  1,   10,  1,   10,  1,   10,  5,   10,  244, 8,   10,  10,  10,  12,  10,  247, 9,   10,  1,
        10,  1,   10,  3,   10,  251, 8,   10,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   12,  1,   12,
        1,   13,  1,   13,  1,   14,  1,   14,  1,   14,  3,   14,  265, 8,   14,  1,   14,  3,   14,  268, 8,   14,
        1,   14,  1,   14,  1,   14,  1,   14,  3,   14,  274, 8,   14,  1,   14,  3,   14,  277, 8,   14,  1,   14,
        1,   14,  1,   14,  3,   14,  282, 8,   14,  1,   14,  3,   14,  285, 8,   14,  1,   14,  1,   14,  1,   14,
        3,   14,  290, 8,   14,  1,   14,  3,   14,  293, 8,   14,  1,   14,  3,   14,  296, 8,   14,  1,   15,  1,
        15,  1,   15,  1,   16,  1,   16,  1,   16,  1,   17,  1,   17,  1,   17,  1,   18,  1,   18,  1,   19,  1,
        19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  1,   19,  3,
        19,  321, 8,   19,  1,   20,  1,   20,  3,   20,  325, 8,   20,  1,   20,  1,   20,  3,   20,  329, 8,   20,
        1,   20,  1,   20,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,
        1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,  1,   21,
        1,   21,  1,   21,  1,   21,  1,   21,  3,   21,  357, 8,   21,  1,   22,  1,   22,  1,   22,  1,   23,  1,
        23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  3,   23,  373,
        8,   23,  1,   24,  1,   24,  1,   24,  1,   25,  1,   25,  3,   25,  380, 8,   25,  1,   26,  1,   26,  1,
        26,  1,   26,  1,   26,  1,   26,  1,   26,  5,   26,  389, 8,   26,  10,  26,  12,  26,  392, 9,   26,  1,
        26,  1,   26,  3,   26,  396, 8,   26,  1,   27,  1,   27,  1,   27,  1,   27,  1,   27,  1,   28,  1,   28,
        1,   29,  1,   29,  1,   29,  3,   29,  408, 8,   29,  1,   29,  3,   29,  411, 8,   29,  1,   29,  1,   29,
        1,   29,  1,   29,  3,   29,  417, 8,   29,  1,   29,  3,   29,  420, 8,   29,  1,   29,  1,   29,  1,   29,
        3,   29,  425, 8,   29,  1,   29,  3,   29,  428, 8,   29,  1,   29,  1,   29,  1,   29,  3,   29,  433, 8,
        29,  1,   29,  3,   29,  436, 8,   29,  1,   29,  3,   29,  439, 8,   29,  1,   30,  1,   30,  1,   30,  1,
        31,  1,   31,  1,   31,  1,   31,  1,   31,  1,   31,  1,   31,  1,   31,  1,   31,  3,   31,  453, 8,   31,
        1,   32,  1,   32,  3,   32,  457, 8,   32,  1,   33,  1,   33,  1,   33,  1,   33,  3,   33,  463, 8,   33,
        1,   34,  1,   34,  1,   35,  1,   35,  1,   35,  1,   35,  1,   35,  5,   35,  472, 8,   35,  10,  35,  12,
        35,  475, 9,   35,  1,   35,  1,   35,  3,   35,  479, 8,   35,  1,   35,  3,   35,  482, 8,   35,  1,   35,
        1,   35,  1,   36,  1,   36,  1,   36,  1,   36,  1,   36,  5,   36,  491, 8,   36,  10,  36,  12,  36,  494,
        9,   36,  3,   36,  496, 8,   36,  1,   36,  1,   36,  1,   37,  1,   37,  1,   37,  1,   37,  1,   37,  5,
        37,  505, 8,   37,  10,  37,  12,  37,  508, 9,   37,  3,   37,  510, 8,   37,  1,   37,  1,   37,  1,   38,
        1,   38,  3,   38,  516, 8,   38,  1,   39,  3,   39,  519, 8,   39,  1,   39,  1,   39,  1,   40,  1,   40,
        3,   40,  525, 8,   40,  1,   41,  3,   41,  528, 8,   41,  1,   41,  1,   41,  1,   42,  3,   42,  533, 8,
        42,  1,   42,  1,   42,  3,   42,  537, 8,   42,  1,   43,  3,   43,  540, 8,   43,  1,   43,  1,   43,  3,
        43,  544, 8,   43,  1,   44,  3,   44,  547, 8,   44,  1,   44,  1,   44,  1,   45,  3,   45,  552, 8,   45,
        1,   45,  1,   45,  3,   45,  556, 8,   45,  1,   46,  3,   46,  559, 8,   46,  1,   46,  1,   46,  1,   46,
        0,   0,   47,  0,   2,   4,   6,   8,   10,  12,  14,  16,  18,  20,  22,  24,  26,  28,  30,  32,  34,  36,
        38,  40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,  80,
        82,  84,  86,  88,  90,  92,  0,   2,   2,   0,   7,   7,   95,  95,  2,   0,   6,   6,   95,  95,  653, 0,
        95,  1,   0,   0,   0,   2,   111, 1,   0,   0,   0,   4,   125, 1,   0,   0,   0,   6,   164, 1,   0,   0,
        0,   8,   166, 1,   0,   0,   0,   10,  185, 1,   0,   0,   0,   12,  187, 1,   0,   0,   0,   14,  218, 1,
        0,   0,   0,   16,  231, 1,   0,   0,   0,   18,  233, 1,   0,   0,   0,   20,  236, 1,   0,   0,   0,   22,
        252, 1,   0,   0,   0,   24,  257, 1,   0,   0,   0,   26,  259, 1,   0,   0,   0,   28,  295, 1,   0,   0,
        0,   30,  297, 1,   0,   0,   0,   32,  300, 1,   0,   0,   0,   34,  303, 1,   0,   0,   0,   36,  306, 1,
        0,   0,   0,   38,  320, 1,   0,   0,   0,   40,  322, 1,   0,   0,   0,   42,  356, 1,   0,   0,   0,   44,
        358, 1,   0,   0,   0,   46,  372, 1,   0,   0,   0,   48,  374, 1,   0,   0,   0,   50,  379, 1,   0,   0,
        0,   52,  381, 1,   0,   0,   0,   54,  397, 1,   0,   0,   0,   56,  402, 1,   0,   0,   0,   58,  438, 1,
        0,   0,   0,   60,  440, 1,   0,   0,   0,   62,  452, 1,   0,   0,   0,   64,  456, 1,   0,   0,   0,   66,
        462, 1,   0,   0,   0,   68,  464, 1,   0,   0,   0,   70,  466, 1,   0,   0,   0,   72,  485, 1,   0,   0,
        0,   74,  499, 1,   0,   0,   0,   76,  513, 1,   0,   0,   0,   78,  518, 1,   0,   0,   0,   80,  522, 1,
        0,   0,   0,   82,  527, 1,   0,   0,   0,   84,  532, 1,   0,   0,   0,   86,  539, 1,   0,   0,   0,   88,
        546, 1,   0,   0,   0,   90,  551, 1,   0,   0,   0,   92,  558, 1,   0,   0,   0,   94,  96,  5,   95,  0,
        0,   95,  94,  1,   0,   0,   0,   95,  96,  1,   0,   0,   0,   96,  97,  1,   0,   0,   0,   97,  103, 3,
        4,   2,   0,   98,  99,  3,   2,   1,   0,   99,  100, 3,   4,   2,   0,   100, 102, 1,   0,   0,   0,   101,
        98,  1,   0,   0,   0,   102, 105, 1,   0,   0,   0,   103, 101, 1,   0,   0,   0,   103, 104, 1,   0,   0,
        0,   104, 107, 1,   0,   0,   0,   105, 103, 1,   0,   0,   0,   106, 108, 5,   95,  0,   0,   107, 106, 1,
        0,   0,   0,   107, 108, 1,   0,   0,   0,   108, 109, 1,   0,   0,   0,   109, 110, 5,   0,   0,   1,   110,
        1,   1,   0,   0,   0,   111, 112, 7,   0,   0,   0,   112, 3,   1,   0,   0,   0,   113, 126, 3,   6,   3,
        0,   114, 126, 3,   8,   4,   0,   115, 126, 3,   12,  6,   0,   116, 126, 3,   14,  7,   0,   117, 126, 3,
        16,  8,   0,   118, 126, 3,   18,  9,   0,   119, 126, 3,   20,  10,  0,   120, 126, 3,   22,  11,  0,   121,
        126, 3,   28,  14,  0,   122, 126, 3,   30,  15,  0,   123, 126, 3,   32,  16,  0,   124, 126, 3,   34,  17,
        0,   125, 113, 1,   0,   0,   0,   125, 114, 1,   0,   0,   0,   125, 115, 1,   0,   0,   0,   125, 116, 1,
        0,   0,   0,   125, 117, 1,   0,   0,   0,   125, 118, 1,   0,   0,   0,   125, 119, 1,   0,   0,   0,   125,
        120, 1,   0,   0,   0,   125, 121, 1,   0,   0,   0,   125, 122, 1,   0,   0,   0,   125, 123, 1,   0,   0,
        0,   125, 124, 1,   0,   0,   0,   126, 5,   1,   0,   0,   0,   127, 132, 5,   65,  0,   0,   128, 129, 5,
        40,  0,   0,   129, 132, 5,   64,  0,   0,   130, 132, 3,   66,  33,  0,   131, 127, 1,   0,   0,   0,   131,
        128, 1,   0,   0,   0,   131, 130, 1,   0,   0,   0,   132, 134, 1,   0,   0,   0,   133, 135, 3,   68,  34,
        0,   134, 133, 1,   0,   0,   0,   135, 136, 1,   0,   0,   0,   136, 134, 1,   0,   0,   0,   136, 137, 1,
        0,   0,   0,   137, 143, 1,   0,   0,   0,   138, 140, 5,   61,  0,   0,   139, 141, 5,   95,  0,   0,   140,
        139, 1,   0,   0,   0,   140, 141, 1,   0,   0,   0,   141, 142, 1,   0,   0,   0,   142, 144, 3,   38,  19,
        0,   143, 138, 1,   0,   0,   0,   143, 144, 1,   0,   0,   0,   144, 165, 1,   0,   0,   0,   145, 150, 5,
        66,  0,   0,   146, 151, 5,   65,  0,   0,   147, 148, 5,   40,  0,   0,   148, 151, 5,   64,  0,   0,   149,
        151, 3,   66,  33,  0,   150, 146, 1,   0,   0,   0,   150, 147, 1,   0,   0,   0,   150, 149, 1,   0,   0,
        0,   151, 153, 1,   0,   0,   0,   152, 154, 3,   68,  34,  0,   153, 152, 1,   0,   0,   0,   154, 155, 1,
        0,   0,   0,   155, 153, 1,   0,   0,   0,   155, 156, 1,   0,   0,   0,   156, 162, 1,   0,   0,   0,   157,
        159, 5,   61,  0,   0,   158, 160, 5,   95,  0,   0,   159, 158, 1,   0,   0,   0,   159, 160, 1,   0,   0,
        0,   160, 161, 1,   0,   0,   0,   161, 163, 3,   38,  19,  0,   162, 157, 1,   0,   0,   0,   162, 163, 1,
        0,   0,   0,   163, 165, 1,   0,   0,   0,   164, 131, 1,   0,   0,   0,   164, 145, 1,   0,   0,   0,   165,
        7,   1,   0,   0,   0,   166, 167, 3,   66,  33,  0,   167, 168, 3,   10,  5,   0,   168, 169, 3,   66,  33,
        0,   169, 9,   1,   0,   0,   0,   170, 186, 5,   52,  0,   0,   171, 186, 5,   62,  0,   0,   172, 186, 5,
        54,  0,   0,   173, 186, 5,   56,  0,   0,   174, 186, 5,   58,  0,   0,   175, 186, 5,   43,  0,   0,   176,
        186, 5,   48,  0,   0,   177, 186, 5,   38,  0,   0,   178, 186, 5,   32,  0,   0,   179, 186, 5,   26,  0,
        0,   180, 186, 5,   36,  0,   0,   181, 186, 5,   41,  0,   0,   182, 186, 5,   46,  0,   0,   183, 186, 5,
        24,  0,   0,   184, 186, 5,   30,  0,   0,   185, 170, 1,   0,   0,   0,   185, 171, 1,   0,   0,   0,   185,
        172, 1,   0,   0,   0,   185, 173, 1,   0,   0,   0,   185, 174, 1,   0,   0,   0,   185, 175, 1,   0,   0,
        0,   185, 176, 1,   0,   0,   0,   185, 177, 1,   0,   0,   0,   185, 178, 1,   0,   0,   0,   185, 179, 1,
        0,   0,   0,   185, 180, 1,   0,   0,   0,   185, 181, 1,   0,   0,   0,   185, 182, 1,   0,   0,   0,   185,
        183, 1,   0,   0,   0,   185, 184, 1,   0,   0,   0,   186, 11,  1,   0,   0,   0,   187, 188, 3,   66,  33,
        0,   188, 189, 3,   38,  19,  0,   189, 13,  1,   0,   0,   0,   190, 200, 3,   86,  43,  0,   191, 197, 3,
        4,   2,   0,   192, 193, 3,   2,   1,   0,   193, 194, 3,   4,   2,   0,   194, 196, 1,   0,   0,   0,   195,
        192, 1,   0,   0,   0,   196, 199, 1,   0,   0,   0,   197, 195, 1,   0,   0,   0,   197, 198, 1,   0,   0,
        0,   198, 201, 1,   0,   0,   0,   199, 197, 1,   0,   0,   0,   200, 191, 1,   0,   0,   0,   200, 201, 1,
        0,   0,   0,   201, 202, 1,   0,   0,   0,   202, 203, 3,   88,  44,  0,   203, 219, 1,   0,   0,   0,   204,
        214, 3,   84,  42,  0,   205, 211, 3,   4,   2,   0,   206, 207, 3,   2,   1,   0,   207, 208, 3,   4,   2,
        0,   208, 210, 1,   0,   0,   0,   209, 206, 1,   0,   0,   0,   210, 213, 1,   0,   0,   0,   211, 209, 1,
        0,   0,   0,   211, 212, 1,   0,   0,   0,   212, 215, 1,   0,   0,   0,   213, 211, 1,   0,   0,   0,   214,
        205, 1,   0,   0,   0,   214, 215, 1,   0,   0,   0,   215, 216, 1,   0,   0,   0,   216, 217, 3,   88,  44,
        0,   217, 219, 1,   0,   0,   0,   218, 190, 1,   0,   0,   0,   218, 204, 1,   0,   0,   0,   219, 15,  1,
        0,   0,   0,   220, 221, 3,   68,  34,  0,   221, 222, 3,   66,  33,  0,   222, 223, 3,   66,  33,  0,   223,
        224, 3,   14,  7,   0,   224, 232, 1,   0,   0,   0,   225, 226, 5,   67,  0,   0,   226, 227, 3,   68,  34,
        0,   227, 228, 3,   66,  33,  0,   228, 229, 3,   66,  33,  0,   229, 230, 3,   14,  7,   0,   230, 232, 1,
        0,   0,   0,   231, 220, 1,   0,   0,   0,   231, 225, 1,   0,   0,   0,   232, 17,  1,   0,   0,   0,   233,
        234, 5,   68,  0,   0,   234, 235, 3,   38,  19,  0,   235, 19,  1,   0,   0,   0,   236, 237, 5,   74,  0,
        0,   237, 238, 3,   66,  33,  0,   238, 245, 3,   4,   2,   0,   239, 240, 5,   75,  0,   0,   240, 241, 3,
        66,  33,  0,   241, 242, 3,   4,   2,   0,   242, 244, 1,   0,   0,   0,   243, 239, 1,   0,   0,   0,   244,
        247, 1,   0,   0,   0,   245, 243, 1,   0,   0,   0,   245, 246, 1,   0,   0,   0,   246, 250, 1,   0,   0,
        0,   247, 245, 1,   0,   0,   0,   248, 249, 5,   76,  0,   0,   249, 251, 3,   4,   2,   0,   250, 248, 1,
        0,   0,   0,   250, 251, 1,   0,   0,   0,   251, 21,  1,   0,   0,   0,   252, 253, 5,   77,  0,   0,   253,
        254, 3,   66,  33,  0,   254, 255, 3,   24,  12,  0,   255, 256, 3,   26,  13,  0,   256, 23,  1,   0,   0,
        0,   257, 258, 1,   0,   0,   0,   258, 25,  1,   0,   0,   0,   259, 260, 1,   0,   0,   0,   260, 27,  1,
        0,   0,   0,   261, 262, 5,   88,  0,   0,   262, 264, 5,   72,  0,   0,   263, 265, 3,   66,  33,  0,   264,
        263, 1,   0,   0,   0,   264, 265, 1,   0,   0,   0,   265, 267, 1,   0,   0,   0,   266, 268, 3,   66,  33,
        0,   267, 266, 1,   0,   0,   0,   267, 268, 1,   0,   0,   0,   268, 269, 1,   0,   0,   0,   269, 296, 3,
        4,   2,   0,   270, 271, 5,   88,  0,   0,   271, 273, 5,   73,  0,   0,   272, 274, 3,   66,  33,  0,   273,
        272, 1,   0,   0,   0,   273, 274, 1,   0,   0,   0,   274, 276, 1,   0,   0,   0,   275, 277, 3,   66,  33,
        0,   276, 275, 1,   0,   0,   0,   276, 277, 1,   0,   0,   0,   277, 278, 1,   0,   0,   0,   278, 296, 3,
        4,   2,   0,   279, 281, 5,   72,  0,   0,   280, 282, 3,   66,  33,  0,   281, 280, 1,   0,   0,   0,   281,
        282, 1,   0,   0,   0,   282, 284, 1,   0,   0,   0,   283, 285, 3,   66,  33,  0,   284, 283, 1,   0,   0,
        0,   284, 285, 1,   0,   0,   0,   285, 286, 1,   0,   0,   0,   286, 296, 3,   4,   2,   0,   287, 289, 5,
        73,  0,   0,   288, 290, 3,   66,  33,  0,   289, 288, 1,   0,   0,   0,   289, 290, 1,   0,   0,   0,   290,
        292, 1,   0,   0,   0,   291, 293, 3,   66,  33,  0,   292, 291, 1,   0,   0,   0,   292, 293, 1,   0,   0,
        0,   293, 294, 1,   0,   0,   0,   294, 296, 3,   4,   2,   0,   295, 261, 1,   0,   0,   0,   295, 270, 1,
        0,   0,   0,   295, 279, 1,   0,   0,   0,   295, 287, 1,   0,   0,   0,   296, 29,  1,   0,   0,   0,   297,
        298, 5,   89,  0,   0,   298, 299, 3,   4,   2,   0,   299, 31,  1,   0,   0,   0,   300, 301, 5,   78,  0,
        0,   301, 302, 3,   4,   2,   0,   302, 33,  1,   0,   0,   0,   303, 304, 5,   79,  0,   0,   304, 305, 3,
        4,   2,   0,   305, 35,  1,   0,   0,   0,   306, 307, 7,   1,   0,   0,   307, 37,  1,   0,   0,   0,   308,
        321, 3,   6,   3,   0,   309, 321, 3,   12,  6,   0,   310, 321, 3,   40,  20,  0,   311, 321, 3,   44,  22,
        0,   312, 321, 3,   48,  24,  0,   313, 321, 3,   52,  26,  0,   314, 321, 3,   54,  27,  0,   315, 321, 3,
        58,  29,  0,   316, 321, 3,   60,  30,  0,   317, 321, 3,   62,  31,  0,   318, 321, 3,   64,  32,  0,   319,
        321, 3,   66,  33,  0,   320, 308, 1,   0,   0,   0,   320, 309, 1,   0,   0,   0,   320, 310, 1,   0,   0,
        0,   320, 311, 1,   0,   0,   0,   320, 312, 1,   0,   0,   0,   320, 313, 1,   0,   0,   0,   320, 314, 1,
        0,   0,   0,   320, 315, 1,   0,   0,   0,   320, 316, 1,   0,   0,   0,   320, 317, 1,   0,   0,   0,   320,
        318, 1,   0,   0,   0,   320, 319, 1,   0,   0,   0,   321, 39,  1,   0,   0,   0,   322, 324, 3,   66,  33,
        0,   323, 325, 5,   95,  0,   0,   324, 323, 1,   0,   0,   0,   324, 325, 1,   0,   0,   0,   325, 326, 1,
        0,   0,   0,   326, 328, 3,   42,  21,  0,   327, 329, 5,   95,  0,   0,   328, 327, 1,   0,   0,   0,   328,
        329, 1,   0,   0,   0,   329, 330, 1,   0,   0,   0,   330, 331, 3,   66,  33,  0,   331, 41,  1,   0,   0,
        0,   332, 357, 5,   94,  0,   0,   333, 357, 5,   44,  0,   0,   334, 357, 5,   39,  0,   0,   335, 357, 5,
        45,  0,   0,   336, 357, 5,   49,  0,   0,   337, 357, 5,   40,  0,   0,   338, 357, 5,   59,  0,   0,   339,
        357, 5,   35,  0,   0,   340, 357, 5,   29,  0,   0,   341, 357, 5,   34,  0,   0,   342, 357, 5,   28,  0,
        0,   343, 357, 5,   42,  0,   0,   344, 357, 5,   47,  0,   0,   345, 357, 5,   37,  0,   0,   346, 357, 5,
        33,  0,   0,   347, 357, 5,   27,  0,   0,   348, 357, 5,   31,  0,   0,   349, 357, 5,   25,  0,   0,   350,
        357, 5,   60,  0,   0,   351, 357, 5,   50,  0,   0,   352, 357, 5,   53,  0,   0,   353, 357, 5,   63,  0,
        0,   354, 357, 5,   55,  0,   0,   355, 357, 5,   57,  0,   0,   356, 332, 1,   0,   0,   0,   356, 333, 1,
        0,   0,   0,   356, 334, 1,   0,   0,   0,   356, 335, 1,   0,   0,   0,   356, 336, 1,   0,   0,   0,   356,
        337, 1,   0,   0,   0,   356, 338, 1,   0,   0,   0,   356, 339, 1,   0,   0,   0,   356, 340, 1,   0,   0,
        0,   356, 341, 1,   0,   0,   0,   356, 342, 1,   0,   0,   0,   356, 343, 1,   0,   0,   0,   356, 344, 1,
        0,   0,   0,   356, 345, 1,   0,   0,   0,   356, 346, 1,   0,   0,   0,   356, 347, 1,   0,   0,   0,   356,
        348, 1,   0,   0,   0,   356, 349, 1,   0,   0,   0,   356, 350, 1,   0,   0,   0,   356, 351, 1,   0,   0,
        0,   356, 352, 1,   0,   0,   0,   356, 353, 1,   0,   0,   0,   356, 354, 1,   0,   0,   0,   356, 355, 1,
        0,   0,   0,   357, 43,  1,   0,   0,   0,   358, 359, 3,   66,  33,  0,   359, 360, 3,   46,  23,  0,   360,
        45,  1,   0,   0,   0,   361, 362, 5,   23,  0,   0,   362, 373, 3,   66,  33,  0,   363, 364, 3,   76,  38,
        0,   364, 365, 3,   38,  19,  0,   365, 366, 3,   78,  39,  0,   366, 373, 1,   0,   0,   0,   367, 373, 5,
        18,  0,   0,   368, 373, 5,   19,  0,   0,   369, 373, 5,   20,  0,   0,   370, 373, 5,   21,  0,   0,   371,
        373, 5,   22,  0,   0,   372, 361, 1,   0,   0,   0,   372, 363, 1,   0,   0,   0,   372, 367, 1,   0,   0,
        0,   372, 368, 1,   0,   0,   0,   372, 369, 1,   0,   0,   0,   372, 370, 1,   0,   0,   0,   372, 371, 1,
        0,   0,   0,   373, 47,  1,   0,   0,   0,   374, 375, 3,   50,  25,  0,   375, 376, 3,   66,  33,  0,   376,
        49,  1,   0,   0,   0,   377, 380, 5,   51,  0,   0,   378, 380, 5,   49,  0,   0,   379, 377, 1,   0,   0,
        0,   379, 378, 1,   0,   0,   0,   380, 51,  1,   0,   0,   0,   381, 382, 5,   74,  0,   0,   382, 383, 3,
        66,  33,  0,   383, 390, 3,   38,  19,  0,   384, 385, 5,   75,  0,   0,   385, 386, 3,   66,  33,  0,   386,
        387, 3,   38,  19,  0,   387, 389, 1,   0,   0,   0,   388, 384, 1,   0,   0,   0,   389, 392, 1,   0,   0,
        0,   390, 388, 1,   0,   0,   0,   390, 391, 1,   0,   0,   0,   391, 395, 1,   0,   0,   0,   392, 390, 1,
        0,   0,   0,   393, 394, 5,   76,  0,   0,   394, 396, 3,   38,  19,  0,   395, 393, 1,   0,   0,   0,   395,
        396, 1,   0,   0,   0,   396, 53,  1,   0,   0,   0,   397, 398, 5,   77,  0,   0,   398, 399, 3,   66,  33,
        0,   399, 400, 3,   24,  12,  0,   400, 401, 3,   56,  28,  0,   401, 55,  1,   0,   0,   0,   402, 403, 1,
        0,   0,   0,   403, 57,  1,   0,   0,   0,   404, 405, 5,   88,  0,   0,   405, 407, 5,   72,  0,   0,   406,
        408, 3,   66,  33,  0,   407, 406, 1,   0,   0,   0,   407, 408, 1,   0,   0,   0,   408, 410, 1,   0,   0,
        0,   409, 411, 3,   66,  33,  0,   410, 409, 1,   0,   0,   0,   410, 411, 1,   0,   0,   0,   411, 412, 1,
        0,   0,   0,   412, 439, 3,   38,  19,  0,   413, 414, 5,   88,  0,   0,   414, 416, 5,   73,  0,   0,   415,
        417, 3,   66,  33,  0,   416, 415, 1,   0,   0,   0,   416, 417, 1,   0,   0,   0,   417, 419, 1,   0,   0,
        0,   418, 420, 3,   66,  33,  0,   419, 418, 1,   0,   0,   0,   419, 420, 1,   0,   0,   0,   420, 421, 1,
        0,   0,   0,   421, 439, 3,   38,  19,  0,   422, 424, 5,   72,  0,   0,   423, 425, 3,   66,  33,  0,   424,
        423, 1,   0,   0,   0,   424, 425, 1,   0,   0,   0,   425, 427, 1,   0,   0,   0,   426, 428, 3,   66,  33,
        0,   427, 426, 1,   0,   0,   0,   427, 428, 1,   0,   0,   0,   428, 429, 1,   0,   0,   0,   429, 439, 3,
        38,  19,  0,   430, 432, 5,   73,  0,   0,   431, 433, 3,   66,  33,  0,   432, 431, 1,   0,   0,   0,   432,
        433, 1,   0,   0,   0,   433, 435, 1,   0,   0,   0,   434, 436, 3,   66,  33,  0,   435, 434, 1,   0,   0,
        0,   435, 436, 1,   0,   0,   0,   436, 437, 1,   0,   0,   0,   437, 439, 3,   38,  19,  0,   438, 404, 1,
        0,   0,   0,   438, 413, 1,   0,   0,   0,   438, 422, 1,   0,   0,   0,   438, 430, 1,   0,   0,   0,   439,
        59,  1,   0,   0,   0,   440, 441, 5,   89,  0,   0,   441, 442, 3,   38,  19,  0,   442, 61,  1,   0,   0,
        0,   443, 444, 3,   66,  33,  0,   444, 445, 3,   66,  33,  0,   445, 446, 3,   14,  7,   0,   446, 453, 1,
        0,   0,   0,   447, 448, 5,   67,  0,   0,   448, 449, 3,   66,  33,  0,   449, 450, 3,   66,  33,  0,   450,
        451, 3,   14,  7,   0,   451, 453, 1,   0,   0,   0,   452, 443, 1,   0,   0,   0,   452, 447, 1,   0,   0,
        0,   453, 63,  1,   0,   0,   0,   454, 457, 5,   1,   0,   0,   455, 457, 5,   2,   0,   0,   456, 454, 1,
        0,   0,   0,   456, 455, 1,   0,   0,   0,   457, 65,  1,   0,   0,   0,   458, 463, 3,   68,  34,  0,   459,
        463, 3,   70,  35,  0,   460, 463, 3,   72,  36,  0,   461, 463, 3,   74,  37,  0,   462, 458, 1,   0,   0,
        0,   462, 459, 1,   0,   0,   0,   462, 460, 1,   0,   0,   0,   462, 461, 1,   0,   0,   0,   463, 67,  1,
        0,   0,   0,   464, 465, 5,   96,  0,   0,   465, 69,  1,   0,   0,   0,   466, 481, 3,   86,  43,  0,   467,
        473, 3,   4,   2,   0,   468, 469, 3,   2,   1,   0,   469, 470, 3,   4,   2,   0,   470, 472, 1,   0,   0,
        0,   471, 468, 1,   0,   0,   0,   472, 475, 1,   0,   0,   0,   473, 471, 1,   0,   0,   0,   473, 474, 1,
        0,   0,   0,   474, 476, 1,   0,   0,   0,   475, 473, 1,   0,   0,   0,   476, 477, 3,   2,   1,   0,   477,
        479, 1,   0,   0,   0,   478, 467, 1,   0,   0,   0,   478, 479, 1,   0,   0,   0,   479, 480, 1,   0,   0,
        0,   480, 482, 3,   38,  19,  0,   481, 478, 1,   0,   0,   0,   481, 482, 1,   0,   0,   0,   482, 483, 1,
        0,   0,   0,   483, 484, 3,   88,  44,  0,   484, 71,  1,   0,   0,   0,   485, 495, 3,   90,  45,  0,   486,
        492, 3,   6,   3,   0,   487, 488, 3,   36,  18,  0,   488, 489, 3,   6,   3,   0,   489, 491, 1,   0,   0,
        0,   490, 487, 1,   0,   0,   0,   491, 494, 1,   0,   0,   0,   492, 490, 1,   0,   0,   0,   492, 493, 1,
        0,   0,   0,   493, 496, 1,   0,   0,   0,   494, 492, 1,   0,   0,   0,   495, 486, 1,   0,   0,   0,   495,
        496, 1,   0,   0,   0,   496, 497, 1,   0,   0,   0,   497, 498, 3,   92,  46,  0,   498, 73,  1,   0,   0,
        0,   499, 509, 3,   86,  43,  0,   500, 506, 3,   38,  19,  0,   501, 502, 3,   36,  18,  0,   502, 503, 3,
        38,  19,  0,   503, 505, 1,   0,   0,   0,   504, 501, 1,   0,   0,   0,   505, 508, 1,   0,   0,   0,   506,
        504, 1,   0,   0,   0,   506, 507, 1,   0,   0,   0,   507, 510, 1,   0,   0,   0,   508, 506, 1,   0,   0,
        0,   509, 500, 1,   0,   0,   0,   509, 510, 1,   0,   0,   0,   510, 511, 1,   0,   0,   0,   511, 512, 3,
        88,  44,  0,   512, 75,  1,   0,   0,   0,   513, 515, 5,   16,  0,   0,   514, 516, 5,   95,  0,   0,   515,
        514, 1,   0,   0,   0,   515, 516, 1,   0,   0,   0,   516, 77,  1,   0,   0,   0,   517, 519, 5,   95,  0,
        0,   518, 517, 1,   0,   0,   0,   518, 519, 1,   0,   0,   0,   519, 520, 1,   0,   0,   0,   520, 521, 5,
        17,  0,   0,   521, 79,  1,   0,   0,   0,   522, 524, 5,   14,  0,   0,   523, 525, 5,   95,  0,   0,   524,
        523, 1,   0,   0,   0,   524, 525, 1,   0,   0,   0,   525, 81,  1,   0,   0,   0,   526, 528, 5,   95,  0,
        0,   527, 526, 1,   0,   0,   0,   527, 528, 1,   0,   0,   0,   528, 529, 1,   0,   0,   0,   529, 530, 5,
        15,  0,   0,   530, 83,  1,   0,   0,   0,   531, 533, 5,   95,  0,   0,   532, 531, 1,   0,   0,   0,   532,
        533, 1,   0,   0,   0,   533, 534, 1,   0,   0,   0,   534, 536, 5,   9,   0,   0,   535, 537, 5,   95,  0,
        0,   536, 535, 1,   0,   0,   0,   536, 537, 1,   0,   0,   0,   537, 85,  1,   0,   0,   0,   538, 540, 5,
        95,  0,   0,   539, 538, 1,   0,   0,   0,   539, 540, 1,   0,   0,   0,   540, 541, 1,   0,   0,   0,   541,
        543, 5,   10,  0,   0,   542, 544, 5,   95,  0,   0,   543, 542, 1,   0,   0,   0,   543, 544, 1,   0,   0,
        0,   544, 87,  1,   0,   0,   0,   545, 547, 5,   95,  0,   0,   546, 545, 1,   0,   0,   0,   546, 547, 1,
        0,   0,   0,   547, 548, 1,   0,   0,   0,   548, 549, 5,   11,  0,   0,   549, 89,  1,   0,   0,   0,   550,
        552, 5,   95,  0,   0,   551, 550, 1,   0,   0,   0,   551, 552, 1,   0,   0,   0,   552, 553, 1,   0,   0,
        0,   553, 555, 5,   12,  0,   0,   554, 556, 5,   95,  0,   0,   555, 554, 1,   0,   0,   0,   555, 556, 1,
        0,   0,   0,   556, 91,  1,   0,   0,   0,   557, 559, 5,   95,  0,   0,   558, 557, 1,   0,   0,   0,   558,
        559, 1,   0,   0,   0,   559, 560, 1,   0,   0,   0,   560, 561, 5,   13,  0,   0,   561, 93,  1,   0,   0,
        0,   70,  95,  103, 107, 125, 131, 136, 140, 143, 150, 155, 159, 162, 164, 185, 197, 200, 211, 214, 218, 231,
        245, 250, 264, 267, 273, 276, 281, 284, 289, 292, 295, 320, 324, 328, 356, 372, 379, 390, 395, 407, 410, 416,
        419, 424, 427, 432, 435, 438, 452, 456, 462, 473, 478, 481, 492, 495, 506, 509, 515, 518, 524, 527, 532, 536,
        539, 543, 546, 551, 555, 558
    };
    staticData->serializedATN = antlr4::atn::SerializedATNView(
        serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0])
    );

    antlr4::atn::ATNDeserializer deserializer;
    staticData->atn = deserializer.deserialize(staticData->serializedATN);

    const size_t count = staticData->atn->getNumberOfDecisions();
    staticData->decisionToDFA.reserve(count);
    for (size_t i = 0; i < count; i++) {
        staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
    }
    whixyparserParserStaticData = std::move(staticData);
}

} // namespace

WhixyParser::WhixyParser(TokenStream* input): WhixyParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WhixyParser::WhixyParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options): Parser(input)
{
    WhixyParser::initialize();
    _interpreter = new atn::ParserATNSimulator(
        this, *whixyparserParserStaticData->atn, whixyparserParserStaticData->decisionToDFA,
        whixyparserParserStaticData->sharedContextCache, options
    );
}

WhixyParser::~WhixyParser() { delete _interpreter; }

const atn::ATN& WhixyParser::getATN() const { return *whixyparserParserStaticData->atn; }

std::string WhixyParser::getGrammarFileName() const { return "WhixyParser.g4"; }

const std::vector<std::string>& WhixyParser::getRuleNames() const { return whixyparserParserStaticData->ruleNames; }

const dfa::Vocabulary& WhixyParser::getVocabulary() const { return whixyparserParserStaticData->vocabulary; }

antlr4::atn::SerializedATNView WhixyParser::getSerializedATN() const
{
    return whixyparserParserStaticData->serializedATN;
}

//----------------- SrcFileContext ------------------------------------------------------------------

WhixyParser::SrcFileContext::SrcFileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::StmtContext*> WhixyParser::SrcFileContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::SrcFileContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

tree::TerminalNode* WhixyParser::SrcFileContext::EOF() { return getToken(WhixyParser::EOF, 0); }

std::vector<tree::TerminalNode*> WhixyParser::SrcFileContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::SrcFileContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

std::vector<WhixyParser::StmtSepContext*> WhixyParser::SrcFileContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::SrcFileContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::SrcFileContext::getRuleIndex() const { return WhixyParser::RuleSrcFile; }

void WhixyParser::SrcFileContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSrcFile(this);
}

void WhixyParser::SrcFileContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSrcFile(this);
}

WhixyParser::SrcFileContext* WhixyParser::srcFile()
{
    SrcFileContext* _localctx = _tracker.createInstance<SrcFileContext>(_ctx, getState());
    enterRule(_localctx, 0, WhixyParser::RuleSrcFile);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(95);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
        case 1: {
            setState(94);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(97);
        stmt();
        setState(103);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(98);
                stmtSep();
                setState(99);
                stmt();
            }
            setState(105);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        }
        setState(107);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(106);
            match(WhixyParser::NEWLINE);
        }
        setState(109);
        match(WhixyParser::EOF);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtSepContext ------------------------------------------------------------------

WhixyParser::StmtSepContext::StmtSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StmtSepContext::SEMICOLON() { return getToken(WhixyParser::SEMICOLON, 0); }

tree::TerminalNode* WhixyParser::StmtSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::StmtSepContext::getRuleIndex() const { return WhixyParser::RuleStmtSep; }

void WhixyParser::StmtSepContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterStmtSep(this);
}

void WhixyParser::StmtSepContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitStmtSep(this);
}

WhixyParser::StmtSepContext* WhixyParser::stmtSep()
{
    StmtSepContext* _localctx = _tracker.createInstance<StmtSepContext>(_ctx, getState());
    enterRule(_localctx, 2, WhixyParser::RuleStmtSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(111);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::SEMICOLON || _la == WhixyParser::NEWLINE)) { _errHandler->recoverInline(this); }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

WhixyParser::StmtContext::StmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::StmtContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::AssignStmtContext* WhixyParser::StmtContext::assignStmt()
{
    return getRuleContext<WhixyParser::AssignStmtContext>(0);
}

WhixyParser::CallContext* WhixyParser::StmtContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BlockStmtContext* WhixyParser::StmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::RoutineStmtContext* WhixyParser::StmtContext::routineStmt()
{
    return getRuleContext<WhixyParser::RoutineStmtContext>(0);
}

WhixyParser::ReturnStmtContext* WhixyParser::StmtContext::returnStmt()
{
    return getRuleContext<WhixyParser::ReturnStmtContext>(0);
}

WhixyParser::IfStmtContext* WhixyParser::StmtContext::ifStmt() { return getRuleContext<WhixyParser::IfStmtContext>(0); }

WhixyParser::WhereStmtContext* WhixyParser::StmtContext::whereStmt()
{
    return getRuleContext<WhixyParser::WhereStmtContext>(0);
}

WhixyParser::LoopStmtContext* WhixyParser::StmtContext::loopStmt()
{
    return getRuleContext<WhixyParser::LoopStmtContext>(0);
}

WhixyParser::ComptStmtContext* WhixyParser::StmtContext::comptStmt()
{
    return getRuleContext<WhixyParser::ComptStmtContext>(0);
}

WhixyParser::DeferStmtContext* WhixyParser::StmtContext::deferStmt()
{
    return getRuleContext<WhixyParser::DeferStmtContext>(0);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::StmtContext::errdeferStmt()
{
    return getRuleContext<WhixyParser::ErrdeferStmtContext>(0);
}

size_t WhixyParser::StmtContext::getRuleIndex() const { return WhixyParser::RuleStmt; }

void WhixyParser::StmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterStmt(this);
}

void WhixyParser::StmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitStmt(this);
}

WhixyParser::StmtContext* WhixyParser::stmt()
{
    StmtContext* _localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
    enterRule(_localctx, 4, WhixyParser::RuleStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(125);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(113);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(114);
            assignStmt();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(115);
            call();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(116);
            blockStmt();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(117);
            routineStmt();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(118);
            returnStmt();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(119);
            ifStmt();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(120);
            whereStmt();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(121);
            loopStmt();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(122);
            comptStmt();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(123);
            deferStmt();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(124);
            errdeferStmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FieldContext ------------------------------------------------------------------

WhixyParser::FieldContext::FieldContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::FieldContext::getRuleIndex() const { return WhixyParser::RuleField; }

void WhixyParser::FieldContext::copyFrom(FieldContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- MutableValsContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::MutableValsContext::MUT() { return getToken(WhixyParser::MUT, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::AUTO() { return getToken(WhixyParser::AUTO, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

tree::TerminalNode* WhixyParser::MutableValsContext::THIS() { return getToken(WhixyParser::THIS, 0); }

WhixyParser::AtomContext* WhixyParser::MutableValsContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::MutableValsContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::MutableValsContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::MutableValsContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

WhixyParser::ExprContext* WhixyParser::MutableValsContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::MutableValsContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

WhixyParser::MutableValsContext::MutableValsContext(FieldContext* ctx) { copyFrom(ctx); }

void WhixyParser::MutableValsContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterMutableVals(this);
}
void WhixyParser::MutableValsContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitMutableVals(this);
}
//----------------- ImmutableValsContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ImmutableValsContext::AUTO() { return getToken(WhixyParser::AUTO, 0); }

tree::TerminalNode* WhixyParser::ImmutableValsContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

tree::TerminalNode* WhixyParser::ImmutableValsContext::THIS() { return getToken(WhixyParser::THIS, 0); }

WhixyParser::AtomContext* WhixyParser::ImmutableValsContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::ImmutableValsContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::ImmutableValsContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::ImmutableValsContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

WhixyParser::ExprContext* WhixyParser::ImmutableValsContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::ImmutableValsContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

WhixyParser::ImmutableValsContext::ImmutableValsContext(FieldContext* ctx) { copyFrom(ctx); }

void WhixyParser::ImmutableValsContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterImmutableVals(this);
}
void WhixyParser::ImmutableValsContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitImmutableVals(this);
}
WhixyParser::FieldContext* WhixyParser::field()
{
    FieldContext* _localctx = _tracker.createInstance<FieldContext>(_ctx, getState());
    enterRule(_localctx, 6, WhixyParser::RuleField);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(164);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::ASTERISK:
        case WhixyParser::AUTO:
        case WhixyParser::NEWLINE:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::ImmutableValsContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(131);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::AUTO: {
                setState(127);
                match(WhixyParser::AUTO);
                break;
            }

            case WhixyParser::ASTERISK: {
                setState(128);
                match(WhixyParser::ASTERISK);
                setState(129);
                match(WhixyParser::THIS);
                break;
            }

            case WhixyParser::OPENPARENTHESIS:
            case WhixyParser::OPENBRACE:
            case WhixyParser::NEWLINE:
            case WhixyParser::TOKEN: {
                setState(130);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(134);
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
                setState(133);
                token();
                setState(136);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            while (_la == WhixyParser::TOKEN);
            setState(143);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::EQUAL) {
                setState(138);
                match(WhixyParser::EQUAL);
                setState(140);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
                case 1: {
                    setState(139);
                    match(WhixyParser::NEWLINE);
                    break;
                }

                default: break;
                }
                setState(142);
                expr();
            }
            break;
        }

        case WhixyParser::MUT: {
            _localctx = _tracker.createInstance<WhixyParser::MutableValsContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(145);
            match(WhixyParser::MUT);
            setState(150);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::AUTO: {
                setState(146);
                match(WhixyParser::AUTO);
                break;
            }

            case WhixyParser::ASTERISK: {
                setState(147);
                match(WhixyParser::ASTERISK);
                setState(148);
                match(WhixyParser::THIS);
                break;
            }

            case WhixyParser::OPENPARENTHESIS:
            case WhixyParser::OPENBRACE:
            case WhixyParser::NEWLINE:
            case WhixyParser::TOKEN: {
                setState(149);
                atom();
                break;
            }

            default: throw NoViableAltException(this);
            }
            setState(153);
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
                setState(152);
                token();
                setState(155);
                _errHandler->sync(this);
                _la = _input->LA(1);
            }
            while (_la == WhixyParser::TOKEN);
            setState(162);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::EQUAL) {
                setState(157);
                match(WhixyParser::EQUAL);
                setState(159);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
                case 1: {
                    setState(158);
                    match(WhixyParser::NEWLINE);
                    break;
                }

                default: break;
                }
                setState(161);
                expr();
            }
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignStmtContext ------------------------------------------------------------------

WhixyParser::AssignStmtContext::AssignStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::AssignStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::AssignStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::AssignOpContext* WhixyParser::AssignStmtContext::assignOp()
{
    return getRuleContext<WhixyParser::AssignOpContext>(0);
}

size_t WhixyParser::AssignStmtContext::getRuleIndex() const { return WhixyParser::RuleAssignStmt; }

void WhixyParser::AssignStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAssignStmt(this);
}

void WhixyParser::AssignStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAssignStmt(this);
}

WhixyParser::AssignStmtContext* WhixyParser::assignStmt()
{
    AssignStmtContext* _localctx = _tracker.createInstance<AssignStmtContext>(_ctx, getState());
    enterRule(_localctx, 8, WhixyParser::RuleAssignStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(166);
        atom();
        setState(167);
        assignOp();
        setState(168);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignOpContext ------------------------------------------------------------------

WhixyParser::AssignOpContext::AssignOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::AssignOpContext::getRuleIndex() const { return WhixyParser::RuleAssignOp; }

void WhixyParser::AssignOpContext::copyFrom(AssignOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- SubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::SubEqualsOpContext::MINUS_EQUAL() { return getToken(WhixyParser::MINUS_EQUAL, 0); }

WhixyParser::SubEqualsOpContext::SubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::SubEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSubEqualsOp(this);
}
void WhixyParser::SubEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSubEqualsOp(this);
}
//----------------- WrappingTimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingTimesEqualsOpContext::ASTERISK_PERCENT_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingTimesEqualsOpContext::WrappingTimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingTimesEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingTimesEqualsOp(this);
}
void WhixyParser::WrappingTimesEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingTimesEqualsOp(this);
}
//----------------- AndEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AndEqualsOpContext::AMPERSAND_EQUAL()
{
    return getToken(WhixyParser::AMPERSAND_EQUAL, 0);
}

WhixyParser::AndEqualsOpContext::AndEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AndEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAndEqualsOp(this);
}
void WhixyParser::AndEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAndEqualsOp(this);
}
//----------------- LeftRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftRotateEqualsOpContext::LESSTHAN_LESSTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::LeftRotateEqualsOpContext::LeftRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftRotateEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftRotateEqualsOp(this);
}
void WhixyParser::LeftRotateEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftRotateEqualsOp(this);
}
//----------------- LeftShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftShiftEqualsOpContext::LESSTHAN_LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_EQUAL, 0);
}

WhixyParser::LeftShiftEqualsOpContext::LeftShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftShiftEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftShiftEqualsOp(this);
}
void WhixyParser::LeftShiftEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftShiftEqualsOp(this);
}
//----------------- OrEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::OrEqualsOpContext::PIPE_EQUAL() { return getToken(WhixyParser::PIPE_EQUAL, 0); }

WhixyParser::OrEqualsOpContext::OrEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::OrEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOrEqualsOp(this);
}
void WhixyParser::OrEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOrEqualsOp(this);
}
//----------------- RightRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightRotateEqualsOpContext::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::RightRotateEqualsOpContext::RightRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightRotateEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightRotateEqualsOp(this);
}
void WhixyParser::RightRotateEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightRotateEqualsOp(this);
}
//----------------- TimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TimesEqualsOpContext::ASTERISK_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_EQUAL, 0);
}

WhixyParser::TimesEqualsOpContext::TimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::TimesEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTimesEqualsOp(this);
}
void WhixyParser::TimesEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTimesEqualsOp(this);
}
//----------------- AddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddEqualsOpContext::PLUS_EQUAL() { return getToken(WhixyParser::PLUS_EQUAL, 0); }

WhixyParser::AddEqualsOpContext::AddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddEqualsOp(this);
}
void WhixyParser::AddEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddEqualsOp(this);
}
//----------------- RightShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightShiftEqualsOpContext::GREATERTHAN_GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL, 0);
}

WhixyParser::RightShiftEqualsOpContext::RightShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightShiftEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightShiftEqualsOp(this);
}
void WhixyParser::RightShiftEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightShiftEqualsOp(this);
}
//----------------- WrappingAddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingAddEqualsOpContext::PLUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::PLUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingAddEqualsOpContext::WrappingAddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingAddEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingAddEqualsOp(this);
}
void WhixyParser::WrappingAddEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingAddEqualsOp(this);
}
//----------------- ModEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ModEqualsOpContext::PERCENT_EQUAL() { return getToken(WhixyParser::PERCENT_EQUAL, 0); }

WhixyParser::ModEqualsOpContext::ModEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ModEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterModEqualsOp(this);
}
void WhixyParser::ModEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitModEqualsOp(this);
}
//----------------- DivideEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DivideEqualsOpContext::SLASH_EQUAL() { return getToken(WhixyParser::SLASH_EQUAL, 0); }

WhixyParser::DivideEqualsOpContext::DivideEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DivideEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDivideEqualsOp(this);
}
void WhixyParser::DivideEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDivideEqualsOp(this);
}
//----------------- WrappingSubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingSubEqualsOpContext::MINUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::MINUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingSubEqualsOpContext::WrappingSubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingSubEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingSubEqualsOp(this);
}
void WhixyParser::WrappingSubEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingSubEqualsOp(this);
}
//----------------- XorEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::XorEqualsOpContext::CARROT_EQUAL() { return getToken(WhixyParser::CARROT_EQUAL, 0); }

WhixyParser::XorEqualsOpContext::XorEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::XorEqualsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterXorEqualsOp(this);
}
void WhixyParser::XorEqualsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitXorEqualsOp(this);
}
WhixyParser::AssignOpContext* WhixyParser::assignOp()
{
    AssignOpContext* _localctx = _tracker.createInstance<AssignOpContext>(_ctx, getState());
    enterRule(_localctx, 10, WhixyParser::RuleAssignOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(185);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AMPERSAND_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AndEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(170);
            match(WhixyParser::AMPERSAND_EQUAL);
            break;
        }

        case WhixyParser::PIPE_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::OrEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(171);
            match(WhixyParser::PIPE_EQUAL);
            break;
        }

        case WhixyParser::PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::ModEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(172);
            match(WhixyParser::PERCENT_EQUAL);
            break;
        }

        case WhixyParser::CARROT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::XorEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(173);
            match(WhixyParser::CARROT_EQUAL);
            break;
        }

        case WhixyParser::SLASH_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::DivideEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(174);
            match(WhixyParser::SLASH_EQUAL);
            break;
        }

        case WhixyParser::PLUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(175);
            match(WhixyParser::PLUS_EQUAL);
            break;
        }

        case WhixyParser::MINUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::SubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(176);
            match(WhixyParser::MINUS_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::TimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(177);
            match(WhixyParser::ASTERISK_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 9);
            setState(178);
            match(WhixyParser::LESSTHAN_LESSTHAN_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 10);
            setState(179);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingTimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 11);
            setState(180);
            match(WhixyParser::ASTERISK_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::PLUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingAddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 12);
            setState(181);
            match(WhixyParser::PLUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::MINUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingSubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 13);
            setState(182);
            match(WhixyParser::MINUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 14);
            setState(183);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 15);
            setState(184);
            match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CallContext ------------------------------------------------------------------

WhixyParser::CallContext::CallContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::CallContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ExprContext* WhixyParser::CallContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::CallContext::getRuleIndex() const { return WhixyParser::RuleCall; }

void WhixyParser::CallContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCall(this);
}

void WhixyParser::CallContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCall(this);
}

WhixyParser::CallContext* WhixyParser::call()
{
    CallContext* _localctx = _tracker.createInstance<CallContext>(_ctx, getState());
    enterRule(_localctx, 12, WhixyParser::RuleCall);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(187);
        atom();
        setState(188);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockStmtContext ------------------------------------------------------------------

WhixyParser::BlockStmtContext::BlockStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::BlockStmtContext::getRuleIndex() const { return WhixyParser::RuleBlockStmt; }

void WhixyParser::BlockStmtContext::copyFrom(BlockStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- FuncBlockStmtContext ------------------------------------------------------------------

WhixyParser::OParenContext* WhixyParser::FuncBlockStmtContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::FuncBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::FuncBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::FuncBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::FuncBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::FuncBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::FuncBlockStmtContext::FuncBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::FuncBlockStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterFuncBlockStmt(this);
}
void WhixyParser::FuncBlockStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitFuncBlockStmt(this);
}
//----------------- ProcBlockStmtContext ------------------------------------------------------------------

WhixyParser::DollarParenContext* WhixyParser::ProcBlockStmtContext::dollarParen()
{
    return getRuleContext<WhixyParser::DollarParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::ProcBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::ProcBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::ProcBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::ProcBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::ProcBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::ProcBlockStmtContext::ProcBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::ProcBlockStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterProcBlockStmt(this);
}
void WhixyParser::ProcBlockStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitProcBlockStmt(this);
}
WhixyParser::BlockStmtContext* WhixyParser::blockStmt()
{
    BlockStmtContext* _localctx = _tracker.createInstance<BlockStmtContext>(_ctx, getState());
    enterRule(_localctx, 14, WhixyParser::RuleBlockStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        setState(218);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::FuncBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(190);
            oParen();
            setState(200);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
            case 1: {
                setState(191);
                stmt();
                setState(197);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(192);
                        stmtSep();
                        setState(193);
                        stmt();
                    }
                    setState(199);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(202);
            cParen();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::ProcBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(204);
            dollarParen();
            setState(214);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
            case 1: {
                setState(205);
                stmt();
                setState(211);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(206);
                        stmtSep();
                        setState(207);
                        stmt();
                    }
                    setState(213);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(216);
            cParen();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineStmtContext ------------------------------------------------------------------

WhixyParser::RoutineStmtContext::RoutineStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineStmtContext::getRuleIndex() const { return WhixyParser::RuleRoutineStmt; }

void WhixyParser::RoutineStmtContext::copyFrom(RoutineStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainRoutineStmtContext ------------------------------------------------------------------

WhixyParser::TokenContext* WhixyParser::PlainRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainRoutineStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainRoutineStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineStmtContext::PlainRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainRoutineStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainRoutineStmt(this);
}
void WhixyParser::PlainRoutineStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainRoutineStmt(this);
}
//----------------- InlineRoutineStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineStmtContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

WhixyParser::TokenContext* WhixyParser::InlineRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::InlineRoutineStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::InlineRoutineStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineStmtContext::InlineRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::InlineRoutineStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInlineRoutineStmt(this);
}
void WhixyParser::InlineRoutineStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInlineRoutineStmt(this);
}
WhixyParser::RoutineStmtContext* WhixyParser::routineStmt()
{
    RoutineStmtContext* _localctx = _tracker.createInstance<RoutineStmtContext>(_ctx, getState());
    enterRule(_localctx, 16, WhixyParser::RuleRoutineStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(231);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(220);
            token();
            setState(221);
            atom();
            setState(222);
            atom();
            setState(223);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(225);
            match(WhixyParser::INLINE);
            setState(226);
            token();
            setState(227);
            atom();
            setState(228);
            atom();
            setState(229);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

WhixyParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ReturnStmtContext::RETURN() { return getToken(WhixyParser::RETURN, 0); }

WhixyParser::ExprContext* WhixyParser::ReturnStmtContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::ReturnStmtContext::getRuleIndex() const { return WhixyParser::RuleReturnStmt; }

void WhixyParser::ReturnStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterReturnStmt(this);
}

void WhixyParser::ReturnStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitReturnStmt(this);
}

WhixyParser::ReturnStmtContext* WhixyParser::returnStmt()
{
    ReturnStmtContext* _localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
    enterRule(_localctx, 18, WhixyParser::RuleReturnStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(233);
        match(WhixyParser::RETURN);
        setState(234);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

WhixyParser::IfStmtContext::IfStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfStmtContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::IfStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::IfStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfStmtContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfStmtContext::getRuleIndex() const { return WhixyParser::RuleIfStmt; }

void WhixyParser::IfStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterIfStmt(this);
}

void WhixyParser::IfStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitIfStmt(this);
}

WhixyParser::IfStmtContext* WhixyParser::ifStmt()
{
    IfStmtContext* _localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
    enterRule(_localctx, 20, WhixyParser::RuleIfStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(236);
        match(WhixyParser::IF);
        setState(237);
        atom();
        setState(238);
        stmt();
        setState(245);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(239);
                match(WhixyParser::ELSEIF);
                setState(240);
                atom();
                setState(241);
                stmt();
            }
            setState(247);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
        }
        setState(250);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
        case 1: {
            setState(248);
            match(WhixyParser::ELSE);
            setState(249);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereStmtContext ------------------------------------------------------------------

WhixyParser::WhereStmtContext::WhereStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereStmtContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereStmtContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereStmtContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::WhereStmtContext::caseStmtBlock()
{
    return getRuleContext<WhixyParser::CaseStmtBlockContext>(0);
}

size_t WhixyParser::WhereStmtContext::getRuleIndex() const { return WhixyParser::RuleWhereStmt; }

void WhixyParser::WhereStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWhereStmt(this);
}

void WhixyParser::WhereStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWhereStmt(this);
}

WhixyParser::WhereStmtContext* WhixyParser::whereStmt()
{
    WhereStmtContext* _localctx = _tracker.createInstance<WhereStmtContext>(_ctx, getState());
    enterRule(_localctx, 22, WhixyParser::RuleWhereStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(252);
        match(WhixyParser::WHERE);
        setState(253);
        atom();
        setState(254);
        comparisonOp();
        setState(255);
        caseStmtBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComparisonOpContext ------------------------------------------------------------------

WhixyParser::ComparisonOpContext::ComparisonOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::ComparisonOpContext::getRuleIndex() const { return WhixyParser::RuleComparisonOp; }

void WhixyParser::ComparisonOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComparisonOp(this);
}

void WhixyParser::ComparisonOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComparisonOp(this);
}

WhixyParser::ComparisonOpContext* WhixyParser::comparisonOp()
{
    ComparisonOpContext* _localctx = _tracker.createInstance<ComparisonOpContext>(_ctx, getState());
    enterRule(_localctx, 24, WhixyParser::RuleComparisonOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseStmtBlockContext ------------------------------------------------------------------

WhixyParser::CaseStmtBlockContext::CaseStmtBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseStmtBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseStmtBlock; }

void WhixyParser::CaseStmtBlockContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCaseStmtBlock(this);
}

void WhixyParser::CaseStmtBlockContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCaseStmtBlock(this);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::caseStmtBlock()
{
    CaseStmtBlockContext* _localctx = _tracker.createInstance<CaseStmtBlockContext>(_ctx, getState());
    enterRule(_localctx, 26, WhixyParser::RuleCaseStmtBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

WhixyParser::LoopStmtContext::LoopStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::LoopStmtContext::getRuleIndex() const { return WhixyParser::RuleLoopStmt; }

void WhixyParser::LoopStmtContext::copyFrom(LoopStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::PlainForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainForStmtContext::PlainForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainForStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainForStmt(this);
}
void WhixyParser::PlainForStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainForStmt(this);
}
//----------------- UnrollWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollWhileStmtContext::UnrollWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollWhileStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollWhileStmt(this);
}
void WhixyParser::UnrollWhileStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollWhileStmt(this);
}
//----------------- PlainWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::PlainWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainWhileStmtContext::PlainWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainWhileStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainWhileStmt(this);
}
void WhixyParser::PlainWhileStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainWhileStmt(this);
}
//----------------- UnrollForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollForStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollForStmtContext::UnrollForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollForStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollForStmt(this);
}
void WhixyParser::UnrollForStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollForStmt(this);
}
WhixyParser::LoopStmtContext* WhixyParser::loopStmt()
{
    LoopStmtContext* _localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
    enterRule(_localctx, 28, WhixyParser::RuleLoopStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(295);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(261);
            match(WhixyParser::UNROLL);
            setState(262);
            match(WhixyParser::WHILE);
            setState(264);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
            case 1: {
                setState(263);
                atom();
                break;
            }

            default: break;
            }
            setState(267);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
            case 1: {
                setState(266);
                atom();
                break;
            }

            default: break;
            }
            setState(269);
            stmt();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(270);
            match(WhixyParser::UNROLL);
            setState(271);
            match(WhixyParser::FOR);
            setState(273);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
            case 1: {
                setState(272);
                atom();
                break;
            }

            default: break;
            }
            setState(276);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
            case 1: {
                setState(275);
                atom();
                break;
            }

            default: break;
            }
            setState(278);
            stmt();
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::PlainWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(279);
            match(WhixyParser::WHILE);
            setState(281);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
            case 1: {
                setState(280);
                atom();
                break;
            }

            default: break;
            }
            setState(284);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
            case 1: {
                setState(283);
                atom();
                break;
            }

            default: break;
            }
            setState(286);
            stmt();
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::PlainForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(287);
            match(WhixyParser::FOR);
            setState(289);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
            case 1: {
                setState(288);
                atom();
                break;
            }

            default: break;
            }
            setState(292);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
            case 1: {
                setState(291);
                atom();
                break;
            }

            default: break;
            }
            setState(294);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptStmtContext ------------------------------------------------------------------

WhixyParser::ComptStmtContext::ComptStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptStmtContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::StmtContext* WhixyParser::ComptStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::ComptStmtContext::getRuleIndex() const { return WhixyParser::RuleComptStmt; }

void WhixyParser::ComptStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComptStmt(this);
}

void WhixyParser::ComptStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComptStmt(this);
}

WhixyParser::ComptStmtContext* WhixyParser::comptStmt()
{
    ComptStmtContext* _localctx = _tracker.createInstance<ComptStmtContext>(_ctx, getState());
    enterRule(_localctx, 30, WhixyParser::RuleComptStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(297);
        match(WhixyParser::COMPT);
        setState(298);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DeferStmtContext ------------------------------------------------------------------

WhixyParser::DeferStmtContext::DeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::DeferStmtContext::DEFER() { return getToken(WhixyParser::DEFER, 0); }

WhixyParser::StmtContext* WhixyParser::DeferStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::DeferStmtContext::getRuleIndex() const { return WhixyParser::RuleDeferStmt; }

void WhixyParser::DeferStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDeferStmt(this);
}

void WhixyParser::DeferStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDeferStmt(this);
}

WhixyParser::DeferStmtContext* WhixyParser::deferStmt()
{
    DeferStmtContext* _localctx = _tracker.createInstance<DeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 32, WhixyParser::RuleDeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(300);
        match(WhixyParser::DEFER);
        setState(301);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ErrdeferStmtContext ------------------------------------------------------------------

WhixyParser::ErrdeferStmtContext::ErrdeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ErrdeferStmtContext::ERRDEFER() { return getToken(WhixyParser::ERRDEFER, 0); }

WhixyParser::StmtContext* WhixyParser::ErrdeferStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

size_t WhixyParser::ErrdeferStmtContext::getRuleIndex() const { return WhixyParser::RuleErrdeferStmt; }

void WhixyParser::ErrdeferStmtContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterErrdeferStmt(this);
}

void WhixyParser::ErrdeferStmtContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitErrdeferStmt(this);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::errdeferStmt()
{
    ErrdeferStmtContext* _localctx = _tracker.createInstance<ErrdeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 34, WhixyParser::RuleErrdeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(303);
        match(WhixyParser::ERRDEFER);
        setState(304);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprSepContext ------------------------------------------------------------------

WhixyParser::ExprSepContext::ExprSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExprSepContext::COMMA() { return getToken(WhixyParser::COMMA, 0); }

tree::TerminalNode* WhixyParser::ExprSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::ExprSepContext::getRuleIndex() const { return WhixyParser::RuleExprSep; }

void WhixyParser::ExprSepContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterExprSep(this);
}

void WhixyParser::ExprSepContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitExprSep(this);
}

WhixyParser::ExprSepContext* WhixyParser::exprSep()
{
    ExprSepContext* _localctx = _tracker.createInstance<ExprSepContext>(_ctx, getState());
    enterRule(_localctx, 36, WhixyParser::RuleExprSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(306);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::COMMA || _la == WhixyParser::NEWLINE)) { _errHandler->recoverInline(this); }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WhixyParser::ExprContext::ExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::ExprContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::CallContext* WhixyParser::ExprContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BinaryExprContext* WhixyParser::ExprContext::binaryExpr()
{
    return getRuleContext<WhixyParser::BinaryExprContext>(0);
}

WhixyParser::PostExprContext* WhixyParser::ExprContext::postExpr()
{
    return getRuleContext<WhixyParser::PostExprContext>(0);
}

WhixyParser::PreExprContext* WhixyParser::ExprContext::preExpr()
{
    return getRuleContext<WhixyParser::PreExprContext>(0);
}

WhixyParser::IfExprContext* WhixyParser::ExprContext::ifExpr() { return getRuleContext<WhixyParser::IfExprContext>(0); }

WhixyParser::WhereExprContext* WhixyParser::ExprContext::whereExpr()
{
    return getRuleContext<WhixyParser::WhereExprContext>(0);
}

WhixyParser::LoopExprContext* WhixyParser::ExprContext::loopExpr()
{
    return getRuleContext<WhixyParser::LoopExprContext>(0);
}

WhixyParser::ComptExprContext* WhixyParser::ExprContext::comptExpr()
{
    return getRuleContext<WhixyParser::ComptExprContext>(0);
}

WhixyParser::RoutineExprContext* WhixyParser::ExprContext::routineExpr()
{
    return getRuleContext<WhixyParser::RoutineExprContext>(0);
}

WhixyParser::StringContext* WhixyParser::ExprContext::string() { return getRuleContext<WhixyParser::StringContext>(0); }

WhixyParser::AtomContext* WhixyParser::ExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::ExprContext::getRuleIndex() const { return WhixyParser::RuleExpr; }

void WhixyParser::ExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterExpr(this);
}

void WhixyParser::ExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitExpr(this);
}

WhixyParser::ExprContext* WhixyParser::expr()
{
    ExprContext* _localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
    enterRule(_localctx, 38, WhixyParser::RuleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(320);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(308);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(309);
            call();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(310);
            binaryExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(311);
            postExpr();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(312);
            preExpr();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(313);
            ifExpr();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(314);
            whereExpr();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(315);
            loopExpr();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(316);
            comptExpr();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(317);
            routineExpr();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(318);
            string();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(319);
            atom();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryExprContext ------------------------------------------------------------------

WhixyParser::BinaryExprContext::BinaryExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::BinaryExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::BinaryExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BinaryOpContext* WhixyParser::BinaryExprContext::binaryOp()
{
    return getRuleContext<WhixyParser::BinaryOpContext>(0);
}

std::vector<tree::TerminalNode*> WhixyParser::BinaryExprContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::BinaryExprContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::BinaryExprContext::getRuleIndex() const { return WhixyParser::RuleBinaryExpr; }

void WhixyParser::BinaryExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBinaryExpr(this);
}

void WhixyParser::BinaryExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBinaryExpr(this);
}

WhixyParser::BinaryExprContext* WhixyParser::binaryExpr()
{
    BinaryExprContext* _localctx = _tracker.createInstance<BinaryExprContext>(_ctx, getState());
    enterRule(_localctx, 40, WhixyParser::RuleBinaryExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(322);
        atom();
        setState(324);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(323);
            match(WhixyParser::NEWLINE);
        }
        setState(326);
        binaryOp();
        setState(328);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
            setState(327);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(330);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryOpContext ------------------------------------------------------------------

WhixyParser::BinaryOpContext::BinaryOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::BinaryOpContext::getRuleIndex() const { return WhixyParser::RuleBinaryOp; }

void WhixyParser::BinaryOpContext::copyFrom(BinaryOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- GreaterThanOrEqualToOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::GreaterThanOrEqualToOpContext::GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_EQUAL, 0);
}

WhixyParser::GreaterThanOrEqualToOpContext::GreaterThanOrEqualToOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::GreaterThanOrEqualToOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterGreaterThanOrEqualToOp(this);
}
void WhixyParser::GreaterThanOrEqualToOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitGreaterThanOrEqualToOp(this);
}
//----------------- GreaterThanOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::GreaterThanOpContext::GREATERTHAN() { return getToken(WhixyParser::GREATERTHAN, 0); }

WhixyParser::GreaterThanOpContext::GreaterThanOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::GreaterThanOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterGreaterThanOp(this);
}
void WhixyParser::GreaterThanOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitGreaterThanOp(this);
}
//----------------- EqualityOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::EqualityOpContext::EQUAL_EQUAL() { return getToken(WhixyParser::EQUAL_EQUAL, 0); }

WhixyParser::EqualityOpContext::EqualityOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::EqualityOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterEqualityOp(this);
}
void WhixyParser::EqualityOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitEqualityOp(this);
}
//----------------- LeftRotateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftRotateOpContext::LESSTHAN_LESSTHAN_PERCENT()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT, 0);
}

WhixyParser::LeftRotateOpContext::LeftRotateOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftRotateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftRotateOp(this);
}
void WhixyParser::LeftRotateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftRotateOp(this);
}
//----------------- AddOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddOpContext::PLUS() { return getToken(WhixyParser::PLUS, 0); }

WhixyParser::AddOpContext::AddOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddOp(this);
}
void WhixyParser::AddOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddOp(this);
}
//----------------- TimesOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TimesOpContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

WhixyParser::TimesOpContext::TimesOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::TimesOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTimesOp(this);
}
void WhixyParser::TimesOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTimesOp(this);
}
//----------------- SubOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::SubOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

WhixyParser::SubOpContext::SubOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::SubOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterSubOp(this);
}
void WhixyParser::SubOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitSubOp(this);
}
//----------------- WrappingAddOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingAddOpContext::PLUS_PERCENT() { return getToken(WhixyParser::PLUS_PERCENT, 0); }

WhixyParser::WrappingAddOpContext::WrappingAddOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingAddOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingAddOp(this);
}
void WhixyParser::WrappingAddOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingAddOp(this);
}
//----------------- LeftShiftOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftShiftOpContext::LESSTHAN_LESSTHAN()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN, 0);
}

WhixyParser::LeftShiftOpContext::LeftShiftOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LeftShiftOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLeftShiftOp(this);
}
void WhixyParser::LeftShiftOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLeftShiftOp(this);
}
//----------------- ConcatOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ConcatOpContext::PLUS_PLUS() { return getToken(WhixyParser::PLUS_PLUS, 0); }

WhixyParser::ConcatOpContext::ConcatOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ConcatOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterConcatOp(this);
}
void WhixyParser::ConcatOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitConcatOp(this);
}
//----------------- RepeatOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RepeatOpContext::ASTERISK_ASTERISK()
{
    return getToken(WhixyParser::ASTERISK_ASTERISK, 0);
}

WhixyParser::RepeatOpContext::RepeatOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RepeatOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRepeatOp(this);
}
void WhixyParser::RepeatOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRepeatOp(this);
}
//----------------- DivideOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DivideOpContext::SLASH() { return getToken(WhixyParser::SLASH, 0); }

WhixyParser::DivideOpContext::DivideOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DivideOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDivideOp(this);
}
void WhixyParser::DivideOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDivideOp(this);
}
//----------------- OrOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::OrOpContext::PIPE() { return getToken(WhixyParser::PIPE, 0); }

WhixyParser::OrOpContext::OrOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::OrOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOrOp(this);
}
void WhixyParser::OrOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOrOp(this);
}
//----------------- ModOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ModOpContext::PERCENT() { return getToken(WhixyParser::PERCENT, 0); }

WhixyParser::ModOpContext::ModOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::ModOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterModOp(this);
}
void WhixyParser::ModOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitModOp(this);
}
//----------------- AndOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AndOpContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

WhixyParser::AndOpContext::AndOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AndOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAndOp(this);
}
void WhixyParser::AndOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAndOp(this);
}
//----------------- XorOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::XorOpContext::CARROT() { return getToken(WhixyParser::CARROT, 0); }

WhixyParser::XorOpContext::XorOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::XorOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterXorOp(this);
}
void WhixyParser::XorOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitXorOp(this);
}
//----------------- WrappingSubOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingSubOpContext::MINUS_PERCENT()
{
    return getToken(WhixyParser::MINUS_PERCENT, 0);
}

WhixyParser::WrappingSubOpContext::WrappingSubOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingSubOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingSubOp(this);
}
void WhixyParser::WrappingSubOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingSubOp(this);
}
//----------------- LessThanOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LessThanOpContext::LESSTHAN() { return getToken(WhixyParser::LESSTHAN, 0); }

WhixyParser::LessThanOpContext::LessThanOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LessThanOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLessThanOp(this);
}
void WhixyParser::LessThanOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLessThanOp(this);
}
//----------------- RightShiftOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightShiftOpContext::GREATERTHAN_GREATERTHAN()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN, 0);
}

WhixyParser::RightShiftOpContext::RightShiftOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightShiftOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightShiftOp(this);
}
void WhixyParser::RightShiftOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightShiftOp(this);
}
//----------------- LessThanOrEqualToOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LessThanOrEqualToOpContext::LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_EQUAL, 0);
}

WhixyParser::LessThanOrEqualToOpContext::LessThanOrEqualToOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::LessThanOrEqualToOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterLessThanOrEqualToOp(this);
}
void WhixyParser::LessThanOrEqualToOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitLessThanOrEqualToOp(this);
}
//----------------- WrappingTimesOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingTimesOpContext::ASTERISK_PERCENT()
{
    return getToken(WhixyParser::ASTERISK_PERCENT, 0);
}

WhixyParser::WrappingTimesOpContext::WrappingTimesOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::WrappingTimesOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWrappingTimesOp(this);
}
void WhixyParser::WrappingTimesOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWrappingTimesOp(this);
}
//----------------- RightRotateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightRotateOpContext::GREATERTHAN_GREATERTHAN_PERCENT()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT, 0);
}

WhixyParser::RightRotateOpContext::RightRotateOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::RightRotateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterRightRotateOp(this);
}
void WhixyParser::RightRotateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitRightRotateOp(this);
}
//----------------- AsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AsOpContext::AS() { return getToken(WhixyParser::AS, 0); }

WhixyParser::AsOpContext::AsOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AsOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAsOp(this);
}
void WhixyParser::AsOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAsOp(this);
}
//----------------- InequalityOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InequalityOpContext::EXCLAMATION_EQUAL()
{
    return getToken(WhixyParser::EXCLAMATION_EQUAL, 0);
}

WhixyParser::InequalityOpContext::InequalityOpContext(BinaryOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::InequalityOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInequalityOp(this);
}
void WhixyParser::InequalityOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInequalityOp(this);
}
WhixyParser::BinaryOpContext* WhixyParser::binaryOp()
{
    BinaryOpContext* _localctx = _tracker.createInstance<BinaryOpContext>(_ctx, getState());
    enterRule(_localctx, 42, WhixyParser::RuleBinaryOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(356);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AS: {
            _localctx = _tracker.createInstance<WhixyParser::AsOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(332);
            match(WhixyParser::AS);
            break;
        }

        case WhixyParser::PLUS_PLUS: {
            _localctx = _tracker.createInstance<WhixyParser::ConcatOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(333);
            match(WhixyParser::PLUS_PLUS);
            break;
        }

        case WhixyParser::ASTERISK_ASTERISK: {
            _localctx = _tracker.createInstance<WhixyParser::RepeatOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(334);
            match(WhixyParser::ASTERISK_ASTERISK);
            break;
        }

        case WhixyParser::PLUS: {
            _localctx = _tracker.createInstance<WhixyParser::AddOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(335);
            match(WhixyParser::PLUS);
            break;
        }

        case WhixyParser::MINUS: {
            _localctx = _tracker.createInstance<WhixyParser::SubOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(336);
            match(WhixyParser::MINUS);
            break;
        }

        case WhixyParser::ASTERISK: {
            _localctx = _tracker.createInstance<WhixyParser::TimesOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(337);
            match(WhixyParser::ASTERISK);
            break;
        }

        case WhixyParser::SLASH: {
            _localctx = _tracker.createInstance<WhixyParser::DivideOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(338);
            match(WhixyParser::SLASH);
            break;
        }

        case WhixyParser::LESSTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::LessThanOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(339);
            match(WhixyParser::LESSTHAN);
            break;
        }

        case WhixyParser::GREATERTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::GreaterThanOpContext>(_localctx);
            enterOuterAlt(_localctx, 9);
            setState(340);
            match(WhixyParser::GREATERTHAN);
            break;
        }

        case WhixyParser::LESSTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LessThanOrEqualToOpContext>(_localctx);
            enterOuterAlt(_localctx, 10);
            setState(341);
            match(WhixyParser::LESSTHAN_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::GreaterThanOrEqualToOpContext>(_localctx);
            enterOuterAlt(_localctx, 11);
            setState(342);
            match(WhixyParser::GREATERTHAN_EQUAL);
            break;
        }

        case WhixyParser::PLUS_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingAddOpContext>(_localctx);
            enterOuterAlt(_localctx, 12);
            setState(343);
            match(WhixyParser::PLUS_PERCENT);
            break;
        }

        case WhixyParser::MINUS_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingSubOpContext>(_localctx);
            enterOuterAlt(_localctx, 13);
            setState(344);
            match(WhixyParser::MINUS_PERCENT);
            break;
        }

        case WhixyParser::ASTERISK_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingTimesOpContext>(_localctx);
            enterOuterAlt(_localctx, 14);
            setState(345);
            match(WhixyParser::ASTERISK_PERCENT);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::LeftShiftOpContext>(_localctx);
            enterOuterAlt(_localctx, 15);
            setState(346);
            match(WhixyParser::LESSTHAN_LESSTHAN);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN: {
            _localctx = _tracker.createInstance<WhixyParser::RightShiftOpContext>(_localctx);
            enterOuterAlt(_localctx, 16);
            setState(347);
            match(WhixyParser::GREATERTHAN_GREATERTHAN);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::LeftRotateOpContext>(_localctx);
            enterOuterAlt(_localctx, 17);
            setState(348);
            match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::RightRotateOpContext>(_localctx);
            enterOuterAlt(_localctx, 18);
            setState(349);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT);
            break;
        }

        case WhixyParser::EQUAL_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::EqualityOpContext>(_localctx);
            enterOuterAlt(_localctx, 19);
            setState(350);
            match(WhixyParser::EQUAL_EQUAL);
            break;
        }

        case WhixyParser::EXCLAMATION_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::InequalityOpContext>(_localctx);
            enterOuterAlt(_localctx, 20);
            setState(351);
            match(WhixyParser::EXCLAMATION_EQUAL);
            break;
        }

        case WhixyParser::AMPERSAND: {
            _localctx = _tracker.createInstance<WhixyParser::AndOpContext>(_localctx);
            enterOuterAlt(_localctx, 21);
            setState(352);
            match(WhixyParser::AMPERSAND);
            break;
        }

        case WhixyParser::PIPE: {
            _localctx = _tracker.createInstance<WhixyParser::OrOpContext>(_localctx);
            enterOuterAlt(_localctx, 22);
            setState(353);
            match(WhixyParser::PIPE);
            break;
        }

        case WhixyParser::PERCENT: {
            _localctx = _tracker.createInstance<WhixyParser::ModOpContext>(_localctx);
            enterOuterAlt(_localctx, 23);
            setState(354);
            match(WhixyParser::PERCENT);
            break;
        }

        case WhixyParser::CARROT: {
            _localctx = _tracker.createInstance<WhixyParser::XorOpContext>(_localctx);
            enterOuterAlt(_localctx, 24);
            setState(355);
            match(WhixyParser::CARROT);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostExprContext ------------------------------------------------------------------

WhixyParser::PostExprContext::PostExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::PostExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::PostOpContext* WhixyParser::PostExprContext::postOp()
{
    return getRuleContext<WhixyParser::PostOpContext>(0);
}

size_t WhixyParser::PostExprContext::getRuleIndex() const { return WhixyParser::RulePostExpr; }

void WhixyParser::PostExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPostExpr(this);
}

void WhixyParser::PostExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPostExpr(this);
}

WhixyParser::PostExprContext* WhixyParser::postExpr()
{
    PostExprContext* _localctx = _tracker.createInstance<PostExprContext>(_ctx, getState());
    enterRule(_localctx, 44, WhixyParser::RulePostExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(358);
        atom();
        setState(359);
        postOp();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostOpContext ------------------------------------------------------------------

WhixyParser::PostOpContext::PostOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PostOpContext::getRuleIndex() const { return WhixyParser::RulePostOp; }

void WhixyParser::PostOpContext::copyFrom(PostOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- AccessTypeOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessTypeOpContext::DOT_TYPE() { return getToken(WhixyParser::DOT_TYPE, 0); }

WhixyParser::AccessTypeOpContext::AccessTypeOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessTypeOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessTypeOp(this);
}
void WhixyParser::AccessTypeOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessTypeOp(this);
}
//----------------- AccessLengthOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessLengthOpContext::DOT_LEN() { return getToken(WhixyParser::DOT_LEN, 0); }

WhixyParser::AccessLengthOpContext::AccessLengthOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessLengthOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessLengthOp(this);
}
void WhixyParser::AccessLengthOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessLengthOp(this);
}
//----------------- AddressOfOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddressOfOpContext::DOT_AMPERSAND() { return getToken(WhixyParser::DOT_AMPERSAND, 0); }

WhixyParser::AddressOfOpContext::AddressOfOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AddressOfOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAddressOfOp(this);
}
void WhixyParser::AddressOfOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAddressOfOp(this);
}
//----------------- AccessIndexOpContext ------------------------------------------------------------------

WhixyParser::OBracketContext* WhixyParser::AccessIndexOpContext::oBracket()
{
    return getRuleContext<WhixyParser::OBracketContext>(0);
}

WhixyParser::ExprContext* WhixyParser::AccessIndexOpContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

WhixyParser::CBracketContext* WhixyParser::AccessIndexOpContext::cBracket()
{
    return getRuleContext<WhixyParser::CBracketContext>(0);
}

WhixyParser::AccessIndexOpContext::AccessIndexOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessIndexOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessIndexOp(this);
}
void WhixyParser::AccessIndexOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessIndexOp(this);
}
//----------------- UnwrapOptionalOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnwrapOptionalOpContext::DOT_QUESTION()
{
    return getToken(WhixyParser::DOT_QUESTION, 0);
}

WhixyParser::UnwrapOptionalOpContext::UnwrapOptionalOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnwrapOptionalOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnwrapOptionalOp(this);
}
void WhixyParser::UnwrapOptionalOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnwrapOptionalOp(this);
}
//----------------- AccessMemberOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessMemberOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

WhixyParser::AtomContext* WhixyParser::AccessMemberOpContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

WhixyParser::AccessMemberOpContext::AccessMemberOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::AccessMemberOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAccessMemberOp(this);
}
void WhixyParser::AccessMemberOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAccessMemberOp(this);
}
//----------------- DereferencePointerOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DereferencePointerOpContext::DOT_ASTERISK()
{
    return getToken(WhixyParser::DOT_ASTERISK, 0);
}

WhixyParser::DereferencePointerOpContext::DereferencePointerOpContext(PostOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::DereferencePointerOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDereferencePointerOp(this);
}
void WhixyParser::DereferencePointerOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDereferencePointerOp(this);
}
WhixyParser::PostOpContext* WhixyParser::postOp()
{
    PostOpContext* _localctx = _tracker.createInstance<PostOpContext>(_ctx, getState());
    enterRule(_localctx, 46, WhixyParser::RulePostOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(372);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::DOT: {
            _localctx = _tracker.createInstance<WhixyParser::AccessMemberOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(361);
            match(WhixyParser::DOT);
            setState(362);
            atom();
            break;
        }

        case WhixyParser::OPENBRACKET: {
            _localctx = _tracker.createInstance<WhixyParser::AccessIndexOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(363);
            oBracket();
            setState(364);
            expr();
            setState(365);
            cBracket();
            break;
        }

        case WhixyParser::DOT_TYPE: {
            _localctx = _tracker.createInstance<WhixyParser::AccessTypeOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(367);
            match(WhixyParser::DOT_TYPE);
            break;
        }

        case WhixyParser::DOT_LEN: {
            _localctx = _tracker.createInstance<WhixyParser::AccessLengthOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(368);
            match(WhixyParser::DOT_LEN);
            break;
        }

        case WhixyParser::DOT_ASTERISK: {
            _localctx = _tracker.createInstance<WhixyParser::DereferencePointerOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(369);
            match(WhixyParser::DOT_ASTERISK);
            break;
        }

        case WhixyParser::DOT_AMPERSAND: {
            _localctx = _tracker.createInstance<WhixyParser::AddressOfOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(370);
            match(WhixyParser::DOT_AMPERSAND);
            break;
        }

        case WhixyParser::DOT_QUESTION: {
            _localctx = _tracker.createInstance<WhixyParser::UnwrapOptionalOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(371);
            match(WhixyParser::DOT_QUESTION);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreExprContext ------------------------------------------------------------------

WhixyParser::PreExprContext::PreExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::PreOpContext* WhixyParser::PreExprContext::preOp() { return getRuleContext<WhixyParser::PreOpContext>(0); }

WhixyParser::AtomContext* WhixyParser::PreExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::PreExprContext::getRuleIndex() const { return WhixyParser::RulePreExpr; }

void WhixyParser::PreExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPreExpr(this);
}

void WhixyParser::PreExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPreExpr(this);
}

WhixyParser::PreExprContext* WhixyParser::preExpr()
{
    PreExprContext* _localctx = _tracker.createInstance<PreExprContext>(_ctx, getState());
    enterRule(_localctx, 48, WhixyParser::RulePreExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(374);
        preOp();
        setState(375);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreOpContext ------------------------------------------------------------------

WhixyParser::PreOpContext::PreOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PreOpContext::getRuleIndex() const { return WhixyParser::RulePreOp; }

void WhixyParser::PreOpContext::copyFrom(PreOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- NegateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NegateOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

WhixyParser::NegateOpContext::NegateOpContext(PreOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::NegateOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterNegateOp(this);
}
void WhixyParser::NegateOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitNegateOp(this);
}
//----------------- NotOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NotOpContext::EXCLAMATION() { return getToken(WhixyParser::EXCLAMATION, 0); }

WhixyParser::NotOpContext::NotOpContext(PreOpContext* ctx) { copyFrom(ctx); }

void WhixyParser::NotOpContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterNotOp(this);
}
void WhixyParser::NotOpContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitNotOp(this);
}
WhixyParser::PreOpContext* WhixyParser::preOp()
{
    PreOpContext* _localctx = _tracker.createInstance<PreOpContext>(_ctx, getState());
    enterRule(_localctx, 50, WhixyParser::RulePreOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(379);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::EXCLAMATION: {
            _localctx = _tracker.createInstance<WhixyParser::NotOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(377);
            match(WhixyParser::EXCLAMATION);
            break;
        }

        case WhixyParser::MINUS: {
            _localctx = _tracker.createInstance<WhixyParser::NegateOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(378);
            match(WhixyParser::MINUS);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfExprContext ------------------------------------------------------------------

WhixyParser::IfExprContext::IfExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfExprContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::IfExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::IfExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfExprContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfExprContext::getRuleIndex() const { return WhixyParser::RuleIfExpr; }

void WhixyParser::IfExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterIfExpr(this);
}

void WhixyParser::IfExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitIfExpr(this);
}

WhixyParser::IfExprContext* WhixyParser::ifExpr()
{
    IfExprContext* _localctx = _tracker.createInstance<IfExprContext>(_ctx, getState());
    enterRule(_localctx, 52, WhixyParser::RuleIfExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(381);
        match(WhixyParser::IF);
        setState(382);
        atom();
        setState(383);
        expr();
        setState(390);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(384);
                match(WhixyParser::ELSEIF);
                setState(385);
                atom();
                setState(386);
                expr();
            }
            setState(392);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
        }
        setState(395);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
        case 1: {
            setState(393);
            match(WhixyParser::ELSE);
            setState(394);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereExprContext ------------------------------------------------------------------

WhixyParser::WhereExprContext::WhereExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereExprContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereExprContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseExprBlockContext* WhixyParser::WhereExprContext::caseExprBlock()
{
    return getRuleContext<WhixyParser::CaseExprBlockContext>(0);
}

size_t WhixyParser::WhereExprContext::getRuleIndex() const { return WhixyParser::RuleWhereExpr; }

void WhixyParser::WhereExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterWhereExpr(this);
}

void WhixyParser::WhereExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitWhereExpr(this);
}

WhixyParser::WhereExprContext* WhixyParser::whereExpr()
{
    WhereExprContext* _localctx = _tracker.createInstance<WhereExprContext>(_ctx, getState());
    enterRule(_localctx, 54, WhixyParser::RuleWhereExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(397);
        match(WhixyParser::WHERE);
        setState(398);
        atom();
        setState(399);
        comparisonOp();
        setState(400);
        caseExprBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseExprBlockContext ------------------------------------------------------------------

WhixyParser::CaseExprBlockContext::CaseExprBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseExprBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseExprBlock; }

void WhixyParser::CaseExprBlockContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCaseExprBlock(this);
}

void WhixyParser::CaseExprBlockContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCaseExprBlock(this);
}

WhixyParser::CaseExprBlockContext* WhixyParser::caseExprBlock()
{
    CaseExprBlockContext* _localctx = _tracker.createInstance<CaseExprBlockContext>(_ctx, getState());
    enterRule(_localctx, 56, WhixyParser::RuleCaseExprBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LoopExprContext ------------------------------------------------------------------

WhixyParser::LoopExprContext::LoopExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::LoopExprContext::getRuleIndex() const { return WhixyParser::RuleLoopExpr; }

void WhixyParser::LoopExprContext::copyFrom(LoopExprContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- UnrollWhileExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollWhileExprContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollWhileExprContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::ExprContext* WhixyParser::UnrollWhileExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollWhileExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollWhileExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollWhileExprContext::UnrollWhileExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollWhileExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollWhileExpr(this);
}
void WhixyParser::UnrollWhileExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollWhileExpr(this);
}
//----------------- UnrollForExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollForExprContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollForExprContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::ExprContext* WhixyParser::UnrollForExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollForExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollForExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollForExprContext::UnrollForExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::UnrollForExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterUnrollForExpr(this);
}
void WhixyParser::UnrollForExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitUnrollForExpr(this);
}
//----------------- PlainForExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainForExprContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::ExprContext* WhixyParser::PlainForExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainForExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainForExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainForExprContext::PlainForExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainForExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainForExpr(this);
}
void WhixyParser::PlainForExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainForExpr(this);
}
//----------------- PlainWhileExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainWhileExprContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::ExprContext* WhixyParser::PlainWhileExprContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainWhileExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainWhileExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainWhileExprContext::PlainWhileExprContext(LoopExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainWhileExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainWhileExpr(this);
}
void WhixyParser::PlainWhileExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainWhileExpr(this);
}
WhixyParser::LoopExprContext* WhixyParser::loopExpr()
{
    LoopExprContext* _localctx = _tracker.createInstance<LoopExprContext>(_ctx, getState());
    enterRule(_localctx, 58, WhixyParser::RuleLoopExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(438);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollWhileExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(404);
            match(WhixyParser::UNROLL);
            setState(405);
            match(WhixyParser::WHILE);
            setState(407);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
            case 1: {
                setState(406);
                atom();
                break;
            }

            default: break;
            }
            setState(410);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
            case 1: {
                setState(409);
                atom();
                break;
            }

            default: break;
            }
            setState(412);
            expr();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollForExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(413);
            match(WhixyParser::UNROLL);
            setState(414);
            match(WhixyParser::FOR);
            setState(416);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
            case 1: {
                setState(415);
                atom();
                break;
            }

            default: break;
            }
            setState(419);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
            case 1: {
                setState(418);
                atom();
                break;
            }

            default: break;
            }
            setState(421);
            expr();
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::PlainWhileExprContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(422);
            match(WhixyParser::WHILE);
            setState(424);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
            case 1: {
                setState(423);
                atom();
                break;
            }

            default: break;
            }
            setState(427);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
            case 1: {
                setState(426);
                atom();
                break;
            }

            default: break;
            }
            setState(429);
            expr();
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::PlainForExprContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(430);
            match(WhixyParser::FOR);
            setState(432);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
            case 1: {
                setState(431);
                atom();
                break;
            }

            default: break;
            }
            setState(435);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
            case 1: {
                setState(434);
                atom();
                break;
            }

            default: break;
            }
            setState(437);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptExprContext ------------------------------------------------------------------

WhixyParser::ComptExprContext::ComptExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptExprContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::ExprContext* WhixyParser::ComptExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::ComptExprContext::getRuleIndex() const { return WhixyParser::RuleComptExpr; }

void WhixyParser::ComptExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterComptExpr(this);
}

void WhixyParser::ComptExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitComptExpr(this);
}

WhixyParser::ComptExprContext* WhixyParser::comptExpr()
{
    ComptExprContext* _localctx = _tracker.createInstance<ComptExprContext>(_ctx, getState());
    enterRule(_localctx, 60, WhixyParser::RuleComptExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(440);
        match(WhixyParser::COMPT);
        setState(441);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineExprContext ------------------------------------------------------------------

WhixyParser::RoutineExprContext::RoutineExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineExprContext::getRuleIndex() const { return WhixyParser::RuleRoutineExpr; }

void WhixyParser::RoutineExprContext::copyFrom(RoutineExprContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- InlineRoutineExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineExprContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::InlineRoutineExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::InlineRoutineExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineExprContext::InlineRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::InlineRoutineExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterInlineRoutineExpr(this);
}
void WhixyParser::InlineRoutineExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitInlineRoutineExpr(this);
}
//----------------- PlainRoutineExprContext ------------------------------------------------------------------

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainRoutineExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainRoutineExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineExprContext::PlainRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

void WhixyParser::PlainRoutineExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterPlainRoutineExpr(this);
}
void WhixyParser::PlainRoutineExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitPlainRoutineExpr(this);
}
WhixyParser::RoutineExprContext* WhixyParser::routineExpr()
{
    RoutineExprContext* _localctx = _tracker.createInstance<RoutineExprContext>(_ctx, getState());
    enterRule(_localctx, 62, WhixyParser::RuleRoutineExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(452);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::NEWLINE:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(443);
            atom();
            setState(444);
            atom();
            setState(445);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(447);
            match(WhixyParser::INLINE);
            setState(448);
            atom();
            setState(449);
            atom();
            setState(450);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

WhixyParser::StringContext::StringContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::StringContext::getRuleIndex() const { return WhixyParser::RuleString; }

void WhixyParser::StringContext::copyFrom(StringContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- DQStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DQStringExprContext::DOUBLEQUOTESTRING()
{
    return getToken(WhixyParser::DOUBLEQUOTESTRING, 0);
}

WhixyParser::DQStringExprContext::DQStringExprContext(StringContext* ctx) { copyFrom(ctx); }

void WhixyParser::DQStringExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDQStringExpr(this);
}
void WhixyParser::DQStringExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDQStringExpr(this);
}
//----------------- BTStringExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::BTStringExprContext::BACKTICKSTRING()
{
    return getToken(WhixyParser::BACKTICKSTRING, 0);
}

WhixyParser::BTStringExprContext::BTStringExprContext(StringContext* ctx) { copyFrom(ctx); }

void WhixyParser::BTStringExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBTStringExpr(this);
}
void WhixyParser::BTStringExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBTStringExpr(this);
}
WhixyParser::StringContext* WhixyParser::string()
{
    StringContext* _localctx = _tracker.createInstance<StringContext>(_ctx, getState());
    enterRule(_localctx, 64, WhixyParser::RuleString);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(456);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::DOUBLEQUOTESTRING: {
            _localctx = _tracker.createInstance<WhixyParser::DQStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(454);
            match(WhixyParser::DOUBLEQUOTESTRING);
            break;
        }

        case WhixyParser::BACKTICKSTRING: {
            _localctx = _tracker.createInstance<WhixyParser::BTStringExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(455);
            match(WhixyParser::BACKTICKSTRING);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

WhixyParser::AtomContext::AtomContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::TokenContext* WhixyParser::AtomContext::token() { return getRuleContext<WhixyParser::TokenContext>(0); }

WhixyParser::BlockExprContext* WhixyParser::AtomContext::blockExpr()
{
    return getRuleContext<WhixyParser::BlockExprContext>(0);
}

WhixyParser::TypeExprContext* WhixyParser::AtomContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TupleExprContext* WhixyParser::AtomContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

size_t WhixyParser::AtomContext::getRuleIndex() const { return WhixyParser::RuleAtom; }

void WhixyParser::AtomContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterAtom(this);
}

void WhixyParser::AtomContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitAtom(this);
}

WhixyParser::AtomContext* WhixyParser::atom()
{
    AtomContext* _localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
    enterRule(_localctx, 66, WhixyParser::RuleAtom);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(462);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(458);
            token();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(459);
            blockExpr();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(460);
            typeExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(461);
            tupleExpr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TokenContext ------------------------------------------------------------------

WhixyParser::TokenContext::TokenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TokenContext::TOKEN() { return getToken(WhixyParser::TOKEN, 0); }

size_t WhixyParser::TokenContext::getRuleIndex() const { return WhixyParser::RuleToken; }

void WhixyParser::TokenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterToken(this);
}

void WhixyParser::TokenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitToken(this);
}

WhixyParser::TokenContext* WhixyParser::token()
{
    TokenContext* _localctx = _tracker.createInstance<TokenContext>(_ctx, getState());
    enterRule(_localctx, 68, WhixyParser::RuleToken);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(464);
        match(WhixyParser::TOKEN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockExprContext ------------------------------------------------------------------

WhixyParser::BlockExprContext::BlockExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::BlockExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::BlockExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

WhixyParser::ExprContext* WhixyParser::BlockExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

std::vector<WhixyParser::StmtContext*> WhixyParser::BlockExprContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::BlockExprContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::BlockExprContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::BlockExprContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::BlockExprContext::getRuleIndex() const { return WhixyParser::RuleBlockExpr; }

void WhixyParser::BlockExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterBlockExpr(this);
}

void WhixyParser::BlockExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitBlockExpr(this);
}

WhixyParser::BlockExprContext* WhixyParser::blockExpr()
{
    BlockExprContext* _localctx = _tracker.createInstance<BlockExprContext>(_ctx, getState());
    enterRule(_localctx, 70, WhixyParser::RuleBlockExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(466);
        oParen();
        setState(481);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
        case 1: {
            setState(478);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
            case 1: {
                setState(467);
                stmt();
                setState(473);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(468);
                        stmtSep();
                        setState(469);
                        stmt();
                    }
                    setState(475);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
                }
                setState(476);
                stmtSep();
                break;
            }

            default: break;
            }
            setState(480);
            expr();
            break;
        }

        default: break;
        }
        setState(483);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeExprContext ------------------------------------------------------------------

WhixyParser::TypeExprContext::TypeExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OBraceContext* WhixyParser::TypeExprContext::oBrace()
{
    return getRuleContext<WhixyParser::OBraceContext>(0);
}

WhixyParser::CBraceContext* WhixyParser::TypeExprContext::cBrace()
{
    return getRuleContext<WhixyParser::CBraceContext>(0);
}

std::vector<WhixyParser::FieldContext*> WhixyParser::TypeExprContext::field()
{
    return getRuleContexts<WhixyParser::FieldContext>();
}

WhixyParser::FieldContext* WhixyParser::TypeExprContext::field(size_t i)
{
    return getRuleContext<WhixyParser::FieldContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TypeExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TypeExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TypeExprContext::getRuleIndex() const { return WhixyParser::RuleTypeExpr; }

void WhixyParser::TypeExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTypeExpr(this);
}

void WhixyParser::TypeExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTypeExpr(this);
}

WhixyParser::TypeExprContext* WhixyParser::typeExpr()
{
    TypeExprContext* _localctx = _tracker.createInstance<TypeExprContext>(_ctx, getState());
    enterRule(_localctx, 72, WhixyParser::RuleTypeExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(485);
        oBrace();
        setState(495);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
        case 1: {
            setState(486);
            field();
            setState(492);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(487);
                    exprSep();
                    setState(488);
                    field();
                }
                setState(494);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(497);
        cBrace();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TupleExprContext ------------------------------------------------------------------

WhixyParser::TupleExprContext::TupleExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::TupleExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::TupleExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::TupleExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::TupleExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TupleExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TupleExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TupleExprContext::getRuleIndex() const { return WhixyParser::RuleTupleExpr; }

void WhixyParser::TupleExprContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterTupleExpr(this);
}

void WhixyParser::TupleExprContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitTupleExpr(this);
}

WhixyParser::TupleExprContext* WhixyParser::tupleExpr()
{
    TupleExprContext* _localctx = _tracker.createInstance<TupleExprContext>(_ctx, getState());
    enterRule(_localctx, 74, WhixyParser::RuleTupleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(499);
        oParen();
        setState(509);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
        case 1: {
            setState(500);
            expr();
            setState(506);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(501);
                    exprSep();
                    setState(502);
                    expr();
                }
                setState(508);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(511);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBracketContext ------------------------------------------------------------------

WhixyParser::OBracketContext::OBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBracketContext::OPENBRACKET() { return getToken(WhixyParser::OPENBRACKET, 0); }

tree::TerminalNode* WhixyParser::OBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::OBracketContext::getRuleIndex() const { return WhixyParser::RuleOBracket; }

void WhixyParser::OBracketContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOBracket(this);
}

void WhixyParser::OBracketContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOBracket(this);
}

WhixyParser::OBracketContext* WhixyParser::oBracket()
{
    OBracketContext* _localctx = _tracker.createInstance<OBracketContext>(_ctx, getState());
    enterRule(_localctx, 76, WhixyParser::RuleOBracket);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(513);
        match(WhixyParser::OPENBRACKET);
        setState(515);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
        case 1: {
            setState(514);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBracketContext ------------------------------------------------------------------

WhixyParser::CBracketContext::CBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBracketContext::CLOSEDBRACKET() { return getToken(WhixyParser::CLOSEDBRACKET, 0); }

tree::TerminalNode* WhixyParser::CBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CBracketContext::getRuleIndex() const { return WhixyParser::RuleCBracket; }

void WhixyParser::CBracketContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCBracket(this);
}

void WhixyParser::CBracketContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCBracket(this);
}

WhixyParser::CBracketContext* WhixyParser::cBracket()
{
    CBracketContext* _localctx = _tracker.createInstance<CBracketContext>(_ctx, getState());
    enterRule(_localctx, 78, WhixyParser::RuleCBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(518);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(517);
            match(WhixyParser::NEWLINE);
        }
        setState(520);
        match(WhixyParser::CLOSEDBRACKET);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OAngleBracketContext ------------------------------------------------------------------

WhixyParser::OAngleBracketContext::OAngleBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OAngleBracketContext::LESSTHAN_OPENBRACKET()
{
    return getToken(WhixyParser::LESSTHAN_OPENBRACKET, 0);
}

tree::TerminalNode* WhixyParser::OAngleBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::OAngleBracketContext::getRuleIndex() const { return WhixyParser::RuleOAngleBracket; }

void WhixyParser::OAngleBracketContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOAngleBracket(this);
}

void WhixyParser::OAngleBracketContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOAngleBracket(this);
}

WhixyParser::OAngleBracketContext* WhixyParser::oAngleBracket()
{
    OAngleBracketContext* _localctx = _tracker.createInstance<OAngleBracketContext>(_ctx, getState());
    enterRule(_localctx, 80, WhixyParser::RuleOAngleBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(522);
        match(WhixyParser::LESSTHAN_OPENBRACKET);
        setState(524);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(523);
            match(WhixyParser::NEWLINE);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CAngleBracketContext ------------------------------------------------------------------

WhixyParser::CAngleBracketContext::CAngleBracketContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CAngleBracketContext::CLOSEDBRACKET_GREATERTHAN()
{
    return getToken(WhixyParser::CLOSEDBRACKET_GREATERTHAN, 0);
}

tree::TerminalNode* WhixyParser::CAngleBracketContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CAngleBracketContext::getRuleIndex() const { return WhixyParser::RuleCAngleBracket; }

void WhixyParser::CAngleBracketContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCAngleBracket(this);
}

void WhixyParser::CAngleBracketContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCAngleBracket(this);
}

WhixyParser::CAngleBracketContext* WhixyParser::cAngleBracket()
{
    CAngleBracketContext* _localctx = _tracker.createInstance<CAngleBracketContext>(_ctx, getState());
    enterRule(_localctx, 82, WhixyParser::RuleCAngleBracket);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(527);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(526);
            match(WhixyParser::NEWLINE);
        }
        setState(529);
        match(WhixyParser::CLOSEDBRACKET_GREATERTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DollarParenContext ------------------------------------------------------------------

WhixyParser::DollarParenContext::DollarParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::DollarParenContext::DOLLAR_OPENPARENTHESIS()
{
    return getToken(WhixyParser::DOLLAR_OPENPARENTHESIS, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::DollarParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::DollarParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::DollarParenContext::getRuleIndex() const { return WhixyParser::RuleDollarParen; }

void WhixyParser::DollarParenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterDollarParen(this);
}

void WhixyParser::DollarParenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitDollarParen(this);
}

WhixyParser::DollarParenContext* WhixyParser::dollarParen()
{
    DollarParenContext* _localctx = _tracker.createInstance<DollarParenContext>(_ctx, getState());
    enterRule(_localctx, 84, WhixyParser::RuleDollarParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(531);
            match(WhixyParser::NEWLINE);
        }
        setState(534);
        match(WhixyParser::DOLLAR_OPENPARENTHESIS);
        setState(536);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
        case 1: {
            setState(535);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OParenContext ------------------------------------------------------------------

WhixyParser::OParenContext::OParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OParenContext::OPENPARENTHESIS() { return getToken(WhixyParser::OPENPARENTHESIS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OParenContext::getRuleIndex() const { return WhixyParser::RuleOParen; }

void WhixyParser::OParenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOParen(this);
}

void WhixyParser::OParenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOParen(this);
}

WhixyParser::OParenContext* WhixyParser::oParen()
{
    OParenContext* _localctx = _tracker.createInstance<OParenContext>(_ctx, getState());
    enterRule(_localctx, 86, WhixyParser::RuleOParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(538);
            match(WhixyParser::NEWLINE);
        }
        setState(541);
        match(WhixyParser::OPENPARENTHESIS);
        setState(543);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
        case 1: {
            setState(542);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CParenContext ------------------------------------------------------------------

WhixyParser::CParenContext::CParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CParenContext::CLOSEDPARENTHESIS()
{
    return getToken(WhixyParser::CLOSEDPARENTHESIS, 0);
}

tree::TerminalNode* WhixyParser::CParenContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CParenContext::getRuleIndex() const { return WhixyParser::RuleCParen; }

void WhixyParser::CParenContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCParen(this);
}

void WhixyParser::CParenContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCParen(this);
}

WhixyParser::CParenContext* WhixyParser::cParen()
{
    CParenContext* _localctx = _tracker.createInstance<CParenContext>(_ctx, getState());
    enterRule(_localctx, 88, WhixyParser::RuleCParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(545);
            match(WhixyParser::NEWLINE);
        }
        setState(548);
        match(WhixyParser::CLOSEDPARENTHESIS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBraceContext ------------------------------------------------------------------

WhixyParser::OBraceContext::OBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBraceContext::OPENBRACE() { return getToken(WhixyParser::OPENBRACE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OBraceContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OBraceContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OBraceContext::getRuleIndex() const { return WhixyParser::RuleOBrace; }

void WhixyParser::OBraceContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterOBrace(this);
}

void WhixyParser::OBraceContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitOBrace(this);
}

WhixyParser::OBraceContext* WhixyParser::oBrace()
{
    OBraceContext* _localctx = _tracker.createInstance<OBraceContext>(_ctx, getState());
    enterRule(_localctx, 90, WhixyParser::RuleOBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(551);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(550);
            match(WhixyParser::NEWLINE);
        }
        setState(553);
        match(WhixyParser::OPENBRACE);
        setState(555);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
        case 1: {
            setState(554);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBraceContext ------------------------------------------------------------------

WhixyParser::CBraceContext::CBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBraceContext::CLOSEDBRACE() { return getToken(WhixyParser::CLOSEDBRACE, 0); }

tree::TerminalNode* WhixyParser::CBraceContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CBraceContext::getRuleIndex() const { return WhixyParser::RuleCBrace; }

void WhixyParser::CBraceContext::enterRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->enterCBrace(this);
}

void WhixyParser::CBraceContext::exitRule(tree::ParseTreeListener* listener)
{
    auto parserListener = dynamic_cast<WhixyParserListener*>(listener);
    if (parserListener != nullptr) parserListener->exitCBrace(this);
}

WhixyParser::CBraceContext* WhixyParser::cBrace()
{
    CBraceContext* _localctx = _tracker.createInstance<CBraceContext>(_ctx, getState());
    enterRule(_localctx, 92, WhixyParser::RuleCBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(558);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(557);
            match(WhixyParser::NEWLINE);
        }
        setState(560);
        match(WhixyParser::CLOSEDBRACE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

void WhixyParser::initialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    whixyparserParserInitialize();
#else
    ::antlr4::internal::call_once(whixyparserParserOnceFlag, whixyparserParserInitialize);
#endif
}
