
// Generated from WhixyParser.g4 by ANTLR 4.13.2

#include "WhixyParserVisitor.h"

#include "WhixyParser.h"

using namespace antlrcpp;
using namespace Whixy;

using namespace antlr4;

namespace {

struct WhixyParserStaticData final {
    WhixyParserStaticData(
        std::vector<std::string> ruleNames, std::vector<std::string> literalNames,
        std::vector<std::string> symbolicNames
    )
        : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
          symbolicNames(std::move(symbolicNames)), vocabulary(this->literalNames, this->symbolicNames)
    {}

    WhixyParserStaticData(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData(WhixyParserStaticData&&) = delete;
    WhixyParserStaticData& operator=(const WhixyParserStaticData&) = delete;
    WhixyParserStaticData& operator=(WhixyParserStaticData&&) = delete;

    std::vector<antlr4::dfa::DFA> decisionToDFA;
    antlr4::atn::PredictionContextCache sharedContextCache;
    const std::vector<std::string> ruleNames;
    const std::vector<std::string> literalNames;
    const std::vector<std::string> symbolicNames;
    const antlr4::dfa::Vocabulary vocabulary;
    antlr4::atn::SerializedATNView serializedATN;
    std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag whixyparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
    std::unique_ptr<WhixyParserStaticData>
        whixyparserParserStaticData = nullptr;

void whixyparserParserInitialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    if (whixyparserParserStaticData != nullptr) { return; }
#else
    assert(whixyparserParserStaticData == nullptr);
#endif
    auto staticData = std::make_unique<WhixyParserStaticData>(
        std::vector<std::string>{
            "srcFile",
            "stmtSep",
            "stmt",
            "field",
            "mutable",
            "volatile",
            "threadlocal",
            "assignStmt",
            "assignOp",
            "call",
            "blockStmt",
            "routineStmt",
            "returnStmt",
            "ifStmt",
            "whereStmt",
            "comparisonOp",
            "caseStmtBlock",
            "loopStmt",
            "comptStmt",
            "unreachable",
            "deferStmt",
            "errdeferStmt",
            "exprSep",
            "expr",
            "typeExpr",
            "binaryExpr",
            "asOp",
            "concatOp",
            "repeatOp",
            "addOp",
            "subOp",
            "timesOp",
            "divideOp",
            "lessThanOp",
            "greaterThanOp",
            "lessThanOrEqualToOp",
            "greaterThanOrEqualToOp",
            "wrappingAddOp",
            "wrappingSubOp",
            "wrappingTimesOp",
            "leftShiftOp",
            "rightShiftOp",
            "leftRotateOp",
            "rightRotateOp",
            "equalityOp",
            "inequalityOp",
            "logicalAndOp",
            "logicalOrOp",
            "bitwiseAndOp",
            "bitwiseOrOp",
            "modOp",
            "xorOp",
            "postExpr",
            "postOp",
            "preExpr",
            "preOp",
            "ifExpr",
            "whereExpr",
            "caseExprBlock",
            "comptExpr",
            "routineExpr",
            "string",
            "atom",
            "token",
            "tupleExpr",
            "blockExpr",
            "structExpr",
            "oParen",
            "cParen",
            "oBrace",
            "cBrace"
        },
        std::vector<std::string>{
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "'('",
            "')'",
            "'.'",
            "','",
            "'_'",
            "'!'",
            "'{'",
            "'}'",
            "'['",
            "']'",
            "';'",
            "'\\u003F'",
            "'$('",
            "'''",
            "'>>%='",
            "'>>%'",
            "'>>='",
            "'>>'",
            "'>='",
            "'>'",
            "'<<%='",
            "'<<%'",
            "'<<='",
            "'<<'",
            "'<='",
            "'<'",
            "'*%='",
            "'*%'",
            "'*='",
            "'**'",
            "'*'",
            "'+%='",
            "'+%'",
            "'+='",
            "'++'",
            "'+'",
            "'-%='",
            "'-%'",
            "'-='",
            "'-'",
            "'~='",
            "'~'",
            "'&='",
            "'&'",
            "'%='",
            "'%'",
            "'^='",
            "'^'",
            "'/='",
            "'/'",
            "'=='",
            "'='",
            "'|='",
            "'|'",
            "'and'",
            "'or'",
            "'type'",
            "'len'",
            "'this'",
            "'mut'",
            "'inline'",
            "'return'",
            "'continue'",
            "'break'",
            "'goto'",
            "'while'",
            "'for'",
            "'if'",
            "'elseif'",
            "'else'",
            "'where'",
            "'defer'",
            "'errdefer'",
            "'fast'",
            "'bare'",
            "'import'",
            "'align'",
            "'threadlocal'",
            "'unreachable'",
            "'volatile'",
            "'unroll'",
            "'compt'",
            "'test'",
            "'enum'",
            "'embed'",
            "'union'",
            "'std'",
            "'orelse'",
            "'catch'",
            "'as'"
        },
        std::vector<std::string>{
            "",
            "DOUBLEQUOTESTRING",
            "BACKTICKSTRING",
            "BACKSLASHSTRING",
            "BLOCKDOCCOMMENT",
            "BLOCKCOMMENT",
            "DOCCOMMENT",
            "COMMENT",
            "WHITESPACE",
            "NEWLINE",
            "OPENPARENTHESIS",
            "CLOSEDPARENTHESIS",
            "DOT",
            "COMMA",
            "UNDERSCORE",
            "EXCLAMATION",
            "OPENBRACE",
            "CLOSEDBRACE",
            "OPENBRACKET",
            "CLOSEDBRACKET",
            "SEMICOLON",
            "QUESTION",
            "DOLLAR_OPENPARENTHESIS",
            "SINGLEQUOTE",
            "GREATERTHAN_GREATERTHAN_PERCENT_EQUAL",
            "GREATERTHAN_GREATERTHAN_PERCENT",
            "GREATERTHAN_GREATERTHAN_EQUAL",
            "GREATERTHAN_GREATERTHAN",
            "GREATERTHAN_EQUAL",
            "GREATERTHAN",
            "LESSTHAN_LESSTHAN_PERCENT_EQUAL",
            "LESSTHAN_LESSTHAN_PERCENT",
            "LESSTHAN_LESSTHAN_EQUAL",
            "LESSTHAN_LESSTHAN",
            "LESSTHAN_EQUAL",
            "LESSTHAN",
            "ASTERISK_PERCENT_EQUAL",
            "ASTERISK_PERCENT",
            "ASTERISK_EQUAL",
            "ASTERISK_ASTERISK",
            "ASTERISK",
            "PLUS_PERCENT_EQUAL",
            "PLUS_PERCENT",
            "PLUS_EQUAL",
            "PLUS_PLUS",
            "PLUS",
            "MINUS_PERCENT_EQUAL",
            "MINUS_PERCENT",
            "MINUS_EQUAL",
            "MINUS",
            "TILDE_EQUAL",
            "TILDE",
            "AMPERSAND_EQUAL",
            "AMPERSAND",
            "PERCENT_EQUAL",
            "PERCENT",
            "CARROT_EQUAL",
            "CARROT",
            "SLASH_EQUAL",
            "SLASH",
            "EQUAL_EQUAL",
            "EQUAL",
            "PIPE_EQUAL",
            "PIPE",
            "AND",
            "OR",
            "TYPE",
            "LEN",
            "THIS",
            "MUT",
            "INLINE",
            "RETURN",
            "CONTINUE",
            "BREAK",
            "GOTO",
            "WHILE",
            "FOR",
            "IF",
            "ELSEIF",
            "ELSE",
            "WHERE",
            "DEFER",
            "ERRDEFER",
            "FAST",
            "BARE",
            "IMPORT",
            "ALIGN",
            "THREADLOCAL",
            "UNREACHABLE",
            "VOLATILE",
            "UNROLL",
            "COMPT",
            "TEST",
            "ENUM",
            "EMBED",
            "UNION",
            "STD",
            "ORELSE",
            "CATCH",
            "AS",
            "TOKEN"
        }
    );
    static const int32_t serializedATNSegment[] = {
        4,   1,   100, 637, 2,   0,   7,   0,   2,   1,   7,   1,   2,   2,   7,   2,   2,   3,   7,   3,   2,   4,
        7,   4,   2,   5,   7,   5,   2,   6,   7,   6,   2,   7,   7,   7,   2,   8,   7,   8,   2,   9,   7,   9,
        2,   10,  7,   10,  2,   11,  7,   11,  2,   12,  7,   12,  2,   13,  7,   13,  2,   14,  7,   14,  2,   15,
        7,   15,  2,   16,  7,   16,  2,   17,  7,   17,  2,   18,  7,   18,  2,   19,  7,   19,  2,   20,  7,   20,
        2,   21,  7,   21,  2,   22,  7,   22,  2,   23,  7,   23,  2,   24,  7,   24,  2,   25,  7,   25,  2,   26,
        7,   26,  2,   27,  7,   27,  2,   28,  7,   28,  2,   29,  7,   29,  2,   30,  7,   30,  2,   31,  7,   31,
        2,   32,  7,   32,  2,   33,  7,   33,  2,   34,  7,   34,  2,   35,  7,   35,  2,   36,  7,   36,  2,   37,
        7,   37,  2,   38,  7,   38,  2,   39,  7,   39,  2,   40,  7,   40,  2,   41,  7,   41,  2,   42,  7,   42,
        2,   43,  7,   43,  2,   44,  7,   44,  2,   45,  7,   45,  2,   46,  7,   46,  2,   47,  7,   47,  2,   48,
        7,   48,  2,   49,  7,   49,  2,   50,  7,   50,  2,   51,  7,   51,  2,   52,  7,   52,  2,   53,  7,   53,
        2,   54,  7,   54,  2,   55,  7,   55,  2,   56,  7,   56,  2,   57,  7,   57,  2,   58,  7,   58,  2,   59,
        7,   59,  2,   60,  7,   60,  2,   61,  7,   61,  2,   62,  7,   62,  2,   63,  7,   63,  2,   64,  7,   64,
        2,   65,  7,   65,  2,   66,  7,   66,  2,   67,  7,   67,  2,   68,  7,   68,  2,   69,  7,   69,  2,   70,
        7,   70,  1,   0,   3,   0,   144, 8,   0,   1,   0,   1,   0,   1,   0,   1,   0,   5,   0,   150, 8,   0,
        10,  0,   12,  0,   153, 9,   0,   1,   0,   3,   0,   156, 8,   0,   1,   0,   1,   0,   1,   1,   1,   1,
        1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,
        1,   2,   1,   2,   3,   2,   175, 8,   2,   1,   3,   3,   3,   178, 8,   3,   1,   3,   3,   3,   181, 8,
        3,   1,   3,   3,   3,   184, 8,   3,   1,   3,   1,   3,   4,   3,   188, 8,   3,   11,  3,   12,  3,   189,
        1,   3,   1,   3,   3,   3,   194, 8,   3,   1,   3,   3,   3,   197, 8,   3,   1,   4,   1,   4,   1,   5,
        1,   5,   1,   6,   1,   6,   1,   7,   1,   7,   1,   7,   1,   7,   1,   8,   1,   8,   1,   8,   1,   8,
        1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,   1,   8,
        3,   8,   224, 8,   8,   1,   9,   1,   9,   4,   9,   228, 8,   9,   11,  9,   12,  9,   229, 1,   9,   3,
        9,   233, 8,   9,   1,   10,  1,   10,  1,   10,  1,   10,  1,   10,  5,   10,  240, 8,   10,  10,  10,  12,
        10,  243, 9,   10,  3,   10,  245, 8,   10,  1,   10,  1,   10,  1,   10,  3,   10,  250, 8,   10,  1,   10,
        1,   10,  3,   10,  254, 8,   10,  1,   10,  1,   10,  1,   10,  1,   10,  5,   10,  260, 8,   10,  10,  10,
        12,  10,  263, 9,   10,  3,   10,  265, 8,   10,  1,   10,  3,   10,  268, 8,   10,  1,   11,  1,   11,  1,
        11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  1,   11,  3,   11,  281, 8,   11,
        1,   12,  1,   12,  4,   12,  285, 8,   12,  11,  12,  12,  12,  286, 1,   12,  3,   12,  290, 8,   12,  1,
        13,  1,   13,  1,   13,  1,   13,  1,   13,  1,   13,  1,   13,  5,   13,  299, 8,   13,  10,  13,  12,  13,
        302, 9,   13,  1,   13,  1,   13,  3,   13,  306, 8,   13,  1,   14,  1,   14,  1,   14,  1,   14,  1,   14,
        1,   15,  1,   15,  1,   16,  1,   16,  1,   17,  1,   17,  1,   17,  3,   17,  320, 8,   17,  1,   17,  3,
        17,  323, 8,   17,  1,   17,  1,   17,  1,   17,  1,   17,  3,   17,  329, 8,   17,  1,   17,  3,   17,  332,
        8,   17,  1,   17,  1,   17,  1,   17,  3,   17,  337, 8,   17,  1,   17,  3,   17,  340, 8,   17,  1,   17,
        1,   17,  1,   17,  3,   17,  345, 8,   17,  1,   17,  3,   17,  348, 8,   17,  1,   17,  3,   17,  351, 8,
        17,  1,   18,  1,   18,  1,   18,  1,   19,  1,   19,  1,   20,  1,   20,  1,   20,  1,   21,  1,   21,  1,
        21,  1,   22,  1,   22,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,   23,  1,
        23,  1,   23,  1,   23,  1,   23,  1,   23,  3,   23,  379, 8,   23,  1,   24,  1,   24,  3,   24,  383, 8,
        24,  1,   24,  1,   24,  3,   24,  387, 8,   24,  1,   25,  1,   25,  3,   25,  391, 8,   25,  1,   25,  1,
        25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  3,   25,  403, 8,   25,
        1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  1,   25,  3,   25,  411, 8,   25,  1,   25,  1,   25,  1,
        25,  1,   25,  1,   25,  1,   25,  3,   25,  419, 8,   25,  1,   25,  1,   25,  3,   25,  423, 8,   25,  1,
        25,  3,   25,  426, 8,   25,  1,   25,  1,   25,  1,   26,  1,   26,  1,   27,  1,   27,  1,   28,  1,   28,
        1,   29,  1,   29,  1,   30,  1,   30,  1,   31,  1,   31,  1,   32,  1,   32,  1,   33,  1,   33,  1,   34,
        1,   34,  1,   35,  1,   35,  1,   36,  1,   36,  1,   37,  1,   37,  1,   38,  1,   38,  1,   39,  1,   39,
        1,   40,  1,   40,  1,   41,  1,   41,  1,   42,  1,   42,  1,   43,  1,   43,  1,   44,  1,   44,  1,   45,
        1,   45,  1,   46,  1,   46,  1,   47,  1,   47,  1,   48,  1,   48,  1,   49,  1,   49,  1,   50,  1,   50,
        1,   51,  1,   51,  1,   52,  1,   52,  1,   52,  1,   53,  1,   53,  1,   53,  1,   53,  3,   53,  489, 8,
        53,  1,   53,  1,   53,  3,   53,  493, 8,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,
        1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  1,   53,  3,   53,  507, 8,   53,  1,   54,  1,   54,  1,
        54,  1,   55,  1,   55,  3,   55,  514, 8,   55,  1,   56,  1,   56,  1,   56,  1,   56,  1,   56,  1,   56,
        1,   56,  5,   56,  523, 8,   56,  10,  56,  12,  56,  526, 9,   56,  1,   56,  1,   56,  3,   56,  530, 8,
        56,  1,   57,  1,   57,  1,   57,  1,   57,  1,   57,  1,   58,  1,   58,  1,   59,  1,   59,  1,   59,  1,
        60,  1,   60,  1,   60,  1,   60,  1,   60,  1,   60,  1,   60,  1,   60,  1,   60,  3,   60,  551, 8,   60,
        1,   61,  1,   61,  1,   61,  3,   61,  556, 8,   61,  1,   62,  1,   62,  1,   62,  1,   62,  3,   62,  562,
        8,   62,  1,   63,  1,   63,  1,   64,  1,   64,  1,   64,  1,   64,  1,   64,  5,   64,  571, 8,   64,  10,
        64,  12,  64,  574, 9,   64,  3,   64,  576, 8,   64,  1,   64,  1,   64,  1,   65,  1,   65,  1,   65,  1,
        65,  1,   65,  5,   65,  585, 8,   65,  10,  65,  12,  65,  588, 9,   65,  1,   65,  1,   65,  3,   65,  592,
        8,   65,  1,   65,  3,   65,  595, 8,   65,  1,   65,  1,   65,  1,   66,  1,   66,  1,   66,  1,   66,  1,
        66,  5,   66,  604, 8,   66,  10,  66,  12,  66,  607, 9,   66,  3,   66,  609, 8,   66,  1,   66,  1,   66,
        1,   67,  3,   67,  614, 8,   67,  1,   67,  1,   67,  3,   67,  618, 8,   67,  1,   68,  3,   68,  621, 8,
        68,  1,   68,  1,   68,  1,   69,  3,   69,  626, 8,   69,  1,   69,  1,   69,  3,   69,  630, 8,   69,  1,
        70,  3,   70,  633, 8,   70,  1,   70,  1,   70,  1,   70,  0,   0,   71,  0,   2,   4,   6,   8,   10,  12,
        14,  16,  18,  20,  22,  24,  26,  28,  30,  32,  34,  36,  38,  40,  42,  44,  46,  48,  50,  52,  54,  56,
        58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,  80,  82,  84,  86,  88,  90,  92,  94,  96,  98,  100,
        102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 0,   2,
        2,   0,   9,   9,   20,  20,  2,   0,   9,   9,   13,  13,  696, 0,   143, 1,   0,   0,   0,   2,   159, 1,
        0,   0,   0,   4,   174, 1,   0,   0,   0,   6,   177, 1,   0,   0,   0,   8,   198, 1,   0,   0,   0,   10,
        200, 1,   0,   0,   0,   12,  202, 1,   0,   0,   0,   14,  204, 1,   0,   0,   0,   16,  223, 1,   0,   0,
        0,   18,  225, 1,   0,   0,   0,   20,  267, 1,   0,   0,   0,   22,  280, 1,   0,   0,   0,   24,  282, 1,
        0,   0,   0,   26,  291, 1,   0,   0,   0,   28,  307, 1,   0,   0,   0,   30,  312, 1,   0,   0,   0,   32,
        314, 1,   0,   0,   0,   34,  350, 1,   0,   0,   0,   36,  352, 1,   0,   0,   0,   38,  355, 1,   0,   0,
        0,   40,  357, 1,   0,   0,   0,   42,  360, 1,   0,   0,   0,   44,  363, 1,   0,   0,   0,   46,  378, 1,
        0,   0,   0,   48,  386, 1,   0,   0,   0,   50,  388, 1,   0,   0,   0,   52,  429, 1,   0,   0,   0,   54,
        431, 1,   0,   0,   0,   56,  433, 1,   0,   0,   0,   58,  435, 1,   0,   0,   0,   60,  437, 1,   0,   0,
        0,   62,  439, 1,   0,   0,   0,   64,  441, 1,   0,   0,   0,   66,  443, 1,   0,   0,   0,   68,  445, 1,
        0,   0,   0,   70,  447, 1,   0,   0,   0,   72,  449, 1,   0,   0,   0,   74,  451, 1,   0,   0,   0,   76,
        453, 1,   0,   0,   0,   78,  455, 1,   0,   0,   0,   80,  457, 1,   0,   0,   0,   82,  459, 1,   0,   0,
        0,   84,  461, 1,   0,   0,   0,   86,  463, 1,   0,   0,   0,   88,  465, 1,   0,   0,   0,   90,  467, 1,
        0,   0,   0,   92,  469, 1,   0,   0,   0,   94,  471, 1,   0,   0,   0,   96,  473, 1,   0,   0,   0,   98,
        475, 1,   0,   0,   0,   100, 477, 1,   0,   0,   0,   102, 479, 1,   0,   0,   0,   104, 481, 1,   0,   0,
        0,   106, 506, 1,   0,   0,   0,   108, 508, 1,   0,   0,   0,   110, 513, 1,   0,   0,   0,   112, 515, 1,
        0,   0,   0,   114, 531, 1,   0,   0,   0,   116, 536, 1,   0,   0,   0,   118, 538, 1,   0,   0,   0,   120,
        550, 1,   0,   0,   0,   122, 555, 1,   0,   0,   0,   124, 561, 1,   0,   0,   0,   126, 563, 1,   0,   0,
        0,   128, 565, 1,   0,   0,   0,   130, 579, 1,   0,   0,   0,   132, 598, 1,   0,   0,   0,   134, 613, 1,
        0,   0,   0,   136, 620, 1,   0,   0,   0,   138, 625, 1,   0,   0,   0,   140, 632, 1,   0,   0,   0,   142,
        144, 5,   9,   0,   0,   143, 142, 1,   0,   0,   0,   143, 144, 1,   0,   0,   0,   144, 145, 1,   0,   0,
        0,   145, 151, 3,   4,   2,   0,   146, 147, 3,   2,   1,   0,   147, 148, 3,   4,   2,   0,   148, 150, 1,
        0,   0,   0,   149, 146, 1,   0,   0,   0,   150, 153, 1,   0,   0,   0,   151, 149, 1,   0,   0,   0,   151,
        152, 1,   0,   0,   0,   152, 155, 1,   0,   0,   0,   153, 151, 1,   0,   0,   0,   154, 156, 5,   9,   0,
        0,   155, 154, 1,   0,   0,   0,   155, 156, 1,   0,   0,   0,   156, 157, 1,   0,   0,   0,   157, 158, 5,
        0,   0,   1,   158, 1,   1,   0,   0,   0,   159, 160, 7,   0,   0,   0,   160, 3,   1,   0,   0,   0,   161,
        175, 3,   6,   3,   0,   162, 175, 3,   14,  7,   0,   163, 175, 3,   18,  9,   0,   164, 175, 3,   20,  10,
        0,   165, 175, 3,   22,  11,  0,   166, 175, 3,   24,  12,  0,   167, 175, 3,   26,  13,  0,   168, 175, 3,
        28,  14,  0,   169, 175, 3,   34,  17,  0,   170, 175, 3,   36,  18,  0,   171, 175, 3,   38,  19,  0,   172,
        175, 3,   40,  20,  0,   173, 175, 3,   42,  21,  0,   174, 161, 1,   0,   0,   0,   174, 162, 1,   0,   0,
        0,   174, 163, 1,   0,   0,   0,   174, 164, 1,   0,   0,   0,   174, 165, 1,   0,   0,   0,   174, 166, 1,
        0,   0,   0,   174, 167, 1,   0,   0,   0,   174, 168, 1,   0,   0,   0,   174, 169, 1,   0,   0,   0,   174,
        170, 1,   0,   0,   0,   174, 171, 1,   0,   0,   0,   174, 172, 1,   0,   0,   0,   174, 173, 1,   0,   0,
        0,   175, 5,   1,   0,   0,   0,   176, 178, 3,   8,   4,   0,   177, 176, 1,   0,   0,   0,   177, 178, 1,
        0,   0,   0,   178, 180, 1,   0,   0,   0,   179, 181, 3,   10,  5,   0,   180, 179, 1,   0,   0,   0,   180,
        181, 1,   0,   0,   0,   181, 183, 1,   0,   0,   0,   182, 184, 3,   12,  6,   0,   183, 182, 1,   0,   0,
        0,   183, 184, 1,   0,   0,   0,   184, 185, 1,   0,   0,   0,   185, 187, 3,   124, 62,  0,   186, 188, 3,
        126, 63,  0,   187, 186, 1,   0,   0,   0,   188, 189, 1,   0,   0,   0,   189, 187, 1,   0,   0,   0,   189,
        190, 1,   0,   0,   0,   190, 196, 1,   0,   0,   0,   191, 193, 5,   61,  0,   0,   192, 194, 5,   9,   0,
        0,   193, 192, 1,   0,   0,   0,   193, 194, 1,   0,   0,   0,   194, 195, 1,   0,   0,   0,   195, 197, 3,
        46,  23,  0,   196, 191, 1,   0,   0,   0,   196, 197, 1,   0,   0,   0,   197, 7,   1,   0,   0,   0,   198,
        199, 5,   69,  0,   0,   199, 9,   1,   0,   0,   0,   200, 201, 5,   89,  0,   0,   201, 11,  1,   0,   0,
        0,   202, 203, 5,   87,  0,   0,   203, 13,  1,   0,   0,   0,   204, 205, 3,   124, 62,  0,   205, 206, 3,
        16,  8,   0,   206, 207, 3,   124, 62,  0,   207, 15,  1,   0,   0,   0,   208, 224, 5,   52,  0,   0,   209,
        224, 5,   62,  0,   0,   210, 224, 5,   54,  0,   0,   211, 224, 5,   56,  0,   0,   212, 224, 5,   58,  0,
        0,   213, 224, 5,   43,  0,   0,   214, 224, 5,   48,  0,   0,   215, 224, 5,   38,  0,   0,   216, 224, 5,
        32,  0,   0,   217, 224, 5,   26,  0,   0,   218, 224, 5,   36,  0,   0,   219, 224, 5,   41,  0,   0,   220,
        224, 5,   46,  0,   0,   221, 224, 5,   24,  0,   0,   222, 224, 5,   30,  0,   0,   223, 208, 1,   0,   0,
        0,   223, 209, 1,   0,   0,   0,   223, 210, 1,   0,   0,   0,   223, 211, 1,   0,   0,   0,   223, 212, 1,
        0,   0,   0,   223, 213, 1,   0,   0,   0,   223, 214, 1,   0,   0,   0,   223, 215, 1,   0,   0,   0,   223,
        216, 1,   0,   0,   0,   223, 217, 1,   0,   0,   0,   223, 218, 1,   0,   0,   0,   223, 219, 1,   0,   0,
        0,   223, 220, 1,   0,   0,   0,   223, 221, 1,   0,   0,   0,   223, 222, 1,   0,   0,   0,   224, 17,  1,
        0,   0,   0,   225, 232, 3,   124, 62,  0,   226, 228, 3,   124, 62,  0,   227, 226, 1,   0,   0,   0,   228,
        229, 1,   0,   0,   0,   229, 227, 1,   0,   0,   0,   229, 230, 1,   0,   0,   0,   230, 233, 1,   0,   0,
        0,   231, 233, 3,   46,  23,  0,   232, 227, 1,   0,   0,   0,   232, 231, 1,   0,   0,   0,   233, 19,  1,
        0,   0,   0,   234, 244, 3,   134, 67,  0,   235, 241, 3,   4,   2,   0,   236, 237, 3,   2,   1,   0,   237,
        238, 3,   4,   2,   0,   238, 240, 1,   0,   0,   0,   239, 236, 1,   0,   0,   0,   240, 243, 1,   0,   0,
        0,   241, 239, 1,   0,   0,   0,   241, 242, 1,   0,   0,   0,   242, 245, 1,   0,   0,   0,   243, 241, 1,
        0,   0,   0,   244, 235, 1,   0,   0,   0,   244, 245, 1,   0,   0,   0,   245, 246, 1,   0,   0,   0,   246,
        247, 3,   136, 68,  0,   247, 268, 1,   0,   0,   0,   248, 250, 5,   9,   0,   0,   249, 248, 1,   0,   0,
        0,   249, 250, 1,   0,   0,   0,   250, 251, 1,   0,   0,   0,   251, 253, 5,   22,  0,   0,   252, 254, 5,
        9,   0,   0,   253, 252, 1,   0,   0,   0,   253, 254, 1,   0,   0,   0,   254, 264, 1,   0,   0,   0,   255,
        261, 3,   4,   2,   0,   256, 257, 3,   2,   1,   0,   257, 258, 3,   4,   2,   0,   258, 260, 1,   0,   0,
        0,   259, 256, 1,   0,   0,   0,   260, 263, 1,   0,   0,   0,   261, 259, 1,   0,   0,   0,   261, 262, 1,
        0,   0,   0,   262, 265, 1,   0,   0,   0,   263, 261, 1,   0,   0,   0,   264, 255, 1,   0,   0,   0,   264,
        265, 1,   0,   0,   0,   265, 266, 1,   0,   0,   0,   266, 268, 3,   136, 68,  0,   267, 234, 1,   0,   0,
        0,   267, 249, 1,   0,   0,   0,   268, 21,  1,   0,   0,   0,   269, 270, 3,   48,  24,  0,   270, 271, 3,
        126, 63,  0,   271, 272, 3,   132, 66,  0,   272, 273, 3,   20,  10,  0,   273, 281, 1,   0,   0,   0,   274,
        275, 5,   70,  0,   0,   275, 276, 3,   48,  24,  0,   276, 277, 3,   126, 63,  0,   277, 278, 3,   132, 66,
        0,   278, 279, 3,   20,  10,  0,   279, 281, 1,   0,   0,   0,   280, 269, 1,   0,   0,   0,   280, 274, 1,
        0,   0,   0,   281, 23,  1,   0,   0,   0,   282, 289, 5,   71,  0,   0,   283, 285, 3,   124, 62,  0,   284,
        283, 1,   0,   0,   0,   285, 286, 1,   0,   0,   0,   286, 284, 1,   0,   0,   0,   286, 287, 1,   0,   0,
        0,   287, 290, 1,   0,   0,   0,   288, 290, 3,   46,  23,  0,   289, 284, 1,   0,   0,   0,   289, 288, 1,
        0,   0,   0,   290, 25,  1,   0,   0,   0,   291, 292, 5,   77,  0,   0,   292, 293, 3,   124, 62,  0,   293,
        300, 3,   4,   2,   0,   294, 295, 5,   78,  0,   0,   295, 296, 3,   124, 62,  0,   296, 297, 3,   4,   2,
        0,   297, 299, 1,   0,   0,   0,   298, 294, 1,   0,   0,   0,   299, 302, 1,   0,   0,   0,   300, 298, 1,
        0,   0,   0,   300, 301, 1,   0,   0,   0,   301, 305, 1,   0,   0,   0,   302, 300, 1,   0,   0,   0,   303,
        304, 5,   79,  0,   0,   304, 306, 3,   4,   2,   0,   305, 303, 1,   0,   0,   0,   305, 306, 1,   0,   0,
        0,   306, 27,  1,   0,   0,   0,   307, 308, 5,   80,  0,   0,   308, 309, 3,   124, 62,  0,   309, 310, 3,
        30,  15,  0,   310, 311, 3,   32,  16,  0,   311, 29,  1,   0,   0,   0,   312, 313, 1,   0,   0,   0,   313,
        31,  1,   0,   0,   0,   314, 315, 1,   0,   0,   0,   315, 33,  1,   0,   0,   0,   316, 317, 5,   90,  0,
        0,   317, 319, 5,   75,  0,   0,   318, 320, 3,   124, 62,  0,   319, 318, 1,   0,   0,   0,   319, 320, 1,
        0,   0,   0,   320, 322, 1,   0,   0,   0,   321, 323, 3,   124, 62,  0,   322, 321, 1,   0,   0,   0,   322,
        323, 1,   0,   0,   0,   323, 324, 1,   0,   0,   0,   324, 351, 3,   4,   2,   0,   325, 326, 5,   90,  0,
        0,   326, 328, 5,   76,  0,   0,   327, 329, 3,   124, 62,  0,   328, 327, 1,   0,   0,   0,   328, 329, 1,
        0,   0,   0,   329, 331, 1,   0,   0,   0,   330, 332, 3,   124, 62,  0,   331, 330, 1,   0,   0,   0,   331,
        332, 1,   0,   0,   0,   332, 333, 1,   0,   0,   0,   333, 351, 3,   4,   2,   0,   334, 336, 5,   75,  0,
        0,   335, 337, 3,   124, 62,  0,   336, 335, 1,   0,   0,   0,   336, 337, 1,   0,   0,   0,   337, 339, 1,
        0,   0,   0,   338, 340, 3,   124, 62,  0,   339, 338, 1,   0,   0,   0,   339, 340, 1,   0,   0,   0,   340,
        341, 1,   0,   0,   0,   341, 351, 3,   4,   2,   0,   342, 344, 5,   76,  0,   0,   343, 345, 3,   124, 62,
        0,   344, 343, 1,   0,   0,   0,   344, 345, 1,   0,   0,   0,   345, 347, 1,   0,   0,   0,   346, 348, 3,
        124, 62,  0,   347, 346, 1,   0,   0,   0,   347, 348, 1,   0,   0,   0,   348, 349, 1,   0,   0,   0,   349,
        351, 3,   4,   2,   0,   350, 316, 1,   0,   0,   0,   350, 325, 1,   0,   0,   0,   350, 334, 1,   0,   0,
        0,   350, 342, 1,   0,   0,   0,   351, 35,  1,   0,   0,   0,   352, 353, 5,   91,  0,   0,   353, 354, 3,
        4,   2,   0,   354, 37,  1,   0,   0,   0,   355, 356, 5,   88,  0,   0,   356, 39,  1,   0,   0,   0,   357,
        358, 5,   81,  0,   0,   358, 359, 3,   4,   2,   0,   359, 41,  1,   0,   0,   0,   360, 361, 5,   82,  0,
        0,   361, 362, 3,   4,   2,   0,   362, 43,  1,   0,   0,   0,   363, 364, 7,   1,   0,   0,   364, 45,  1,
        0,   0,   0,   365, 379, 3,   6,   3,   0,   366, 379, 3,   48,  24,  0,   367, 379, 3,   18,  9,   0,   368,
        379, 3,   50,  25,  0,   369, 379, 3,   104, 52,  0,   370, 379, 3,   108, 54,  0,   371, 379, 3,   112, 56,
        0,   372, 379, 3,   114, 57,  0,   373, 379, 3,   118, 59,  0,   374, 379, 3,   38,  19,  0,   375, 379, 3,
        120, 60,  0,   376, 379, 3,   122, 61,  0,   377, 379, 3,   124, 62,  0,   378, 365, 1,   0,   0,   0,   378,
        366, 1,   0,   0,   0,   378, 367, 1,   0,   0,   0,   378, 368, 1,   0,   0,   0,   378, 369, 1,   0,   0,
        0,   378, 370, 1,   0,   0,   0,   378, 371, 1,   0,   0,   0,   378, 372, 1,   0,   0,   0,   378, 373, 1,
        0,   0,   0,   378, 374, 1,   0,   0,   0,   378, 375, 1,   0,   0,   0,   378, 376, 1,   0,   0,   0,   378,
        377, 1,   0,   0,   0,   379, 47,  1,   0,   0,   0,   380, 387, 5,   14,  0,   0,   381, 383, 5,   40,  0,
        0,   382, 381, 1,   0,   0,   0,   382, 383, 1,   0,   0,   0,   383, 384, 1,   0,   0,   0,   384, 387, 5,
        68,  0,   0,   385, 387, 3,   124, 62,  0,   386, 380, 1,   0,   0,   0,   386, 382, 1,   0,   0,   0,   386,
        385, 1,   0,   0,   0,   387, 49,  1,   0,   0,   0,   388, 390, 3,   124, 62,  0,   389, 391, 5,   9,   0,
        0,   390, 389, 1,   0,   0,   0,   390, 391, 1,   0,   0,   0,   391, 422, 1,   0,   0,   0,   392, 423, 3,
        52,  26,  0,   393, 403, 3,   62,  31,  0,   394, 403, 3,   64,  32,  0,   395, 403, 3,   100, 50,  0,   396,
        403, 3,   96,  48,  0,   397, 403, 3,   80,  40,  0,   398, 403, 3,   82,  41,  0,   399, 403, 3,   78,  39,
        0,   400, 403, 3,   84,  42,  0,   401, 403, 3,   86,  43,  0,   402, 393, 1,   0,   0,   0,   402, 394, 1,
        0,   0,   0,   402, 395, 1,   0,   0,   0,   402, 396, 1,   0,   0,   0,   402, 397, 1,   0,   0,   0,   402,
        398, 1,   0,   0,   0,   402, 399, 1,   0,   0,   0,   402, 400, 1,   0,   0,   0,   402, 401, 1,   0,   0,
        0,   403, 423, 1,   0,   0,   0,   404, 411, 3,   58,  29,  0,   405, 411, 3,   60,  30,  0,   406, 411, 3,
        98,  49,  0,   407, 411, 3,   102, 51,  0,   408, 411, 3,   74,  37,  0,   409, 411, 3,   76,  38,  0,   410,
        404, 1,   0,   0,   0,   410, 405, 1,   0,   0,   0,   410, 406, 1,   0,   0,   0,   410, 407, 1,   0,   0,
        0,   410, 408, 1,   0,   0,   0,   410, 409, 1,   0,   0,   0,   411, 423, 1,   0,   0,   0,   412, 419, 3,
        88,  44,  0,   413, 419, 3,   90,  45,  0,   414, 419, 3,   66,  33,  0,   415, 419, 3,   68,  34,  0,   416,
        419, 3,   70,  35,  0,   417, 419, 3,   72,  36,  0,   418, 412, 1,   0,   0,   0,   418, 413, 1,   0,   0,
        0,   418, 414, 1,   0,   0,   0,   418, 415, 1,   0,   0,   0,   418, 416, 1,   0,   0,   0,   418, 417, 1,
        0,   0,   0,   419, 423, 1,   0,   0,   0,   420, 423, 3,   92,  46,  0,   421, 423, 3,   94,  47,  0,   422,
        392, 1,   0,   0,   0,   422, 402, 1,   0,   0,   0,   422, 410, 1,   0,   0,   0,   422, 418, 1,   0,   0,
        0,   422, 420, 1,   0,   0,   0,   422, 421, 1,   0,   0,   0,   423, 425, 1,   0,   0,   0,   424, 426, 5,
        9,   0,   0,   425, 424, 1,   0,   0,   0,   425, 426, 1,   0,   0,   0,   426, 427, 1,   0,   0,   0,   427,
        428, 3,   124, 62,  0,   428, 51,  1,   0,   0,   0,   429, 430, 5,   99,  0,   0,   430, 53,  1,   0,   0,
        0,   431, 432, 5,   44,  0,   0,   432, 55,  1,   0,   0,   0,   433, 434, 5,   39,  0,   0,   434, 57,  1,
        0,   0,   0,   435, 436, 5,   45,  0,   0,   436, 59,  1,   0,   0,   0,   437, 438, 5,   49,  0,   0,   438,
        61,  1,   0,   0,   0,   439, 440, 5,   40,  0,   0,   440, 63,  1,   0,   0,   0,   441, 442, 5,   59,  0,
        0,   442, 65,  1,   0,   0,   0,   443, 444, 5,   35,  0,   0,   444, 67,  1,   0,   0,   0,   445, 446, 5,
        29,  0,   0,   446, 69,  1,   0,   0,   0,   447, 448, 5,   34,  0,   0,   448, 71,  1,   0,   0,   0,   449,
        450, 5,   28,  0,   0,   450, 73,  1,   0,   0,   0,   451, 452, 5,   42,  0,   0,   452, 75,  1,   0,   0,
        0,   453, 454, 5,   47,  0,   0,   454, 77,  1,   0,   0,   0,   455, 456, 5,   37,  0,   0,   456, 79,  1,
        0,   0,   0,   457, 458, 5,   33,  0,   0,   458, 81,  1,   0,   0,   0,   459, 460, 5,   27,  0,   0,   460,
        83,  1,   0,   0,   0,   461, 462, 5,   31,  0,   0,   462, 85,  1,   0,   0,   0,   463, 464, 5,   25,  0,
        0,   464, 87,  1,   0,   0,   0,   465, 466, 5,   60,  0,   0,   466, 89,  1,   0,   0,   0,   467, 468, 5,
        50,  0,   0,   468, 91,  1,   0,   0,   0,   469, 470, 5,   64,  0,   0,   470, 93,  1,   0,   0,   0,   471,
        472, 5,   65,  0,   0,   472, 95,  1,   0,   0,   0,   473, 474, 5,   53,  0,   0,   474, 97,  1,   0,   0,
        0,   475, 476, 5,   63,  0,   0,   476, 99,  1,   0,   0,   0,   477, 478, 5,   55,  0,   0,   478, 101, 1,
        0,   0,   0,   479, 480, 5,   57,  0,   0,   480, 103, 1,   0,   0,   0,   481, 482, 3,   124, 62,  0,   482,
        483, 3,   106, 53,  0,   483, 105, 1,   0,   0,   0,   484, 485, 5,   12,  0,   0,   485, 507, 3,   124, 62,
        0,   486, 488, 5,   18,  0,   0,   487, 489, 5,   9,   0,   0,   488, 487, 1,   0,   0,   0,   488, 489, 1,
        0,   0,   0,   489, 490, 1,   0,   0,   0,   490, 492, 3,   46,  23,  0,   491, 493, 5,   9,   0,   0,   492,
        491, 1,   0,   0,   0,   492, 493, 1,   0,   0,   0,   493, 494, 1,   0,   0,   0,   494, 495, 5,   19,  0,
        0,   495, 507, 1,   0,   0,   0,   496, 497, 5,   12,  0,   0,   497, 507, 5,   66,  0,   0,   498, 499, 5,
        12,  0,   0,   499, 507, 5,   67,  0,   0,   500, 501, 5,   12,  0,   0,   501, 507, 5,   40,  0,   0,   502,
        503, 5,   12,  0,   0,   503, 507, 5,   53,  0,   0,   504, 507, 5,   21,  0,   0,   505, 507, 5,   15,  0,
        0,   506, 484, 1,   0,   0,   0,   506, 486, 1,   0,   0,   0,   506, 496, 1,   0,   0,   0,   506, 498, 1,
        0,   0,   0,   506, 500, 1,   0,   0,   0,   506, 502, 1,   0,   0,   0,   506, 504, 1,   0,   0,   0,   506,
        505, 1,   0,   0,   0,   507, 107, 1,   0,   0,   0,   508, 509, 3,   110, 55,  0,   509, 510, 3,   124, 62,
        0,   510, 109, 1,   0,   0,   0,   511, 514, 5,   51,  0,   0,   512, 514, 5,   49,  0,   0,   513, 511, 1,
        0,   0,   0,   513, 512, 1,   0,   0,   0,   514, 111, 1,   0,   0,   0,   515, 516, 5,   77,  0,   0,   516,
        517, 3,   124, 62,  0,   517, 524, 3,   46,  23,  0,   518, 519, 5,   78,  0,   0,   519, 520, 3,   124, 62,
        0,   520, 521, 3,   46,  23,  0,   521, 523, 1,   0,   0,   0,   522, 518, 1,   0,   0,   0,   523, 526, 1,
        0,   0,   0,   524, 522, 1,   0,   0,   0,   524, 525, 1,   0,   0,   0,   525, 529, 1,   0,   0,   0,   526,
        524, 1,   0,   0,   0,   527, 528, 5,   79,  0,   0,   528, 530, 3,   46,  23,  0,   529, 527, 1,   0,   0,
        0,   529, 530, 1,   0,   0,   0,   530, 113, 1,   0,   0,   0,   531, 532, 5,   80,  0,   0,   532, 533, 3,
        124, 62,  0,   533, 534, 3,   30,  15,  0,   534, 535, 3,   116, 58,  0,   535, 115, 1,   0,   0,   0,   536,
        537, 1,   0,   0,   0,   537, 117, 1,   0,   0,   0,   538, 539, 5,   91,  0,   0,   539, 540, 3,   46,  23,
        0,   540, 119, 1,   0,   0,   0,   541, 542, 3,   124, 62,  0,   542, 543, 3,   132, 66,  0,   543, 544, 3,
        20,  10,  0,   544, 551, 1,   0,   0,   0,   545, 546, 5,   70,  0,   0,   546, 547, 3,   124, 62,  0,   547,
        548, 3,   132, 66,  0,   548, 549, 3,   20,  10,  0,   549, 551, 1,   0,   0,   0,   550, 541, 1,   0,   0,
        0,   550, 545, 1,   0,   0,   0,   551, 121, 1,   0,   0,   0,   552, 556, 5,   1,   0,   0,   553, 556, 5,
        3,   0,   0,   554, 556, 5,   2,   0,   0,   555, 552, 1,   0,   0,   0,   555, 553, 1,   0,   0,   0,   555,
        554, 1,   0,   0,   0,   556, 123, 1,   0,   0,   0,   557, 562, 3,   126, 63,  0,   558, 562, 3,   128, 64,
        0,   559, 562, 3,   130, 65,  0,   560, 562, 3,   132, 66,  0,   561, 557, 1,   0,   0,   0,   561, 558, 1,
        0,   0,   0,   561, 559, 1,   0,   0,   0,   561, 560, 1,   0,   0,   0,   562, 125, 1,   0,   0,   0,   563,
        564, 5,   100, 0,   0,   564, 127, 1,   0,   0,   0,   565, 575, 3,   134, 67,  0,   566, 572, 3,   46,  23,
        0,   567, 568, 3,   44,  22,  0,   568, 569, 3,   46,  23,  0,   569, 571, 1,   0,   0,   0,   570, 567, 1,
        0,   0,   0,   571, 574, 1,   0,   0,   0,   572, 570, 1,   0,   0,   0,   572, 573, 1,   0,   0,   0,   573,
        576, 1,   0,   0,   0,   574, 572, 1,   0,   0,   0,   575, 566, 1,   0,   0,   0,   575, 576, 1,   0,   0,
        0,   576, 577, 1,   0,   0,   0,   577, 578, 3,   136, 68,  0,   578, 129, 1,   0,   0,   0,   579, 594, 3,
        134, 67,  0,   580, 586, 3,   4,   2,   0,   581, 582, 3,   2,   1,   0,   582, 583, 3,   4,   2,   0,   583,
        585, 1,   0,   0,   0,   584, 581, 1,   0,   0,   0,   585, 588, 1,   0,   0,   0,   586, 584, 1,   0,   0,
        0,   586, 587, 1,   0,   0,   0,   587, 589, 1,   0,   0,   0,   588, 586, 1,   0,   0,   0,   589, 590, 3,
        2,   1,   0,   590, 592, 1,   0,   0,   0,   591, 580, 1,   0,   0,   0,   591, 592, 1,   0,   0,   0,   592,
        593, 1,   0,   0,   0,   593, 595, 3,   46,  23,  0,   594, 591, 1,   0,   0,   0,   594, 595, 1,   0,   0,
        0,   595, 596, 1,   0,   0,   0,   596, 597, 3,   136, 68,  0,   597, 131, 1,   0,   0,   0,   598, 608, 3,
        138, 69,  0,   599, 605, 3,   6,   3,   0,   600, 601, 3,   44,  22,  0,   601, 602, 3,   6,   3,   0,   602,
        604, 1,   0,   0,   0,   603, 600, 1,   0,   0,   0,   604, 607, 1,   0,   0,   0,   605, 603, 1,   0,   0,
        0,   605, 606, 1,   0,   0,   0,   606, 609, 1,   0,   0,   0,   607, 605, 1,   0,   0,   0,   608, 599, 1,
        0,   0,   0,   608, 609, 1,   0,   0,   0,   609, 610, 1,   0,   0,   0,   610, 611, 3,   140, 70,  0,   611,
        133, 1,   0,   0,   0,   612, 614, 5,   9,   0,   0,   613, 612, 1,   0,   0,   0,   613, 614, 1,   0,   0,
        0,   614, 615, 1,   0,   0,   0,   615, 617, 5,   10,  0,   0,   616, 618, 5,   9,   0,   0,   617, 616, 1,
        0,   0,   0,   617, 618, 1,   0,   0,   0,   618, 135, 1,   0,   0,   0,   619, 621, 5,   9,   0,   0,   620,
        619, 1,   0,   0,   0,   620, 621, 1,   0,   0,   0,   621, 622, 1,   0,   0,   0,   622, 623, 5,   11,  0,
        0,   623, 137, 1,   0,   0,   0,   624, 626, 5,   9,   0,   0,   625, 624, 1,   0,   0,   0,   625, 626, 1,
        0,   0,   0,   626, 627, 1,   0,   0,   0,   627, 629, 5,   16,  0,   0,   628, 630, 5,   9,   0,   0,   629,
        628, 1,   0,   0,   0,   629, 630, 1,   0,   0,   0,   630, 139, 1,   0,   0,   0,   631, 633, 5,   9,   0,
        0,   632, 631, 1,   0,   0,   0,   632, 633, 1,   0,   0,   0,   633, 634, 1,   0,   0,   0,   634, 635, 5,
        17,  0,   0,   635, 141, 1,   0,   0,   0,   65,  143, 151, 155, 174, 177, 180, 183, 189, 193, 196, 223, 229,
        232, 241, 244, 249, 253, 261, 264, 267, 280, 286, 289, 300, 305, 319, 322, 328, 331, 336, 339, 344, 347, 350,
        378, 382, 386, 390, 402, 410, 418, 422, 425, 488, 492, 506, 513, 524, 529, 550, 555, 561, 572, 575, 586, 591,
        594, 605, 608, 613, 617, 620, 625, 629, 632
    };
    staticData->serializedATN = antlr4::atn::SerializedATNView(
        serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0])
    );

    antlr4::atn::ATNDeserializer deserializer;
    staticData->atn = deserializer.deserialize(staticData->serializedATN);

    const size_t count = staticData->atn->getNumberOfDecisions();
    staticData->decisionToDFA.reserve(count);
    for (size_t i = 0; i < count; i++) {
        staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
    }
    whixyparserParserStaticData = std::move(staticData);
}

} // namespace

WhixyParser::WhixyParser(TokenStream* input): WhixyParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WhixyParser::WhixyParser(TokenStream* input, const antlr4::atn::ParserATNSimulatorOptions& options): Parser(input)
{
    WhixyParser::initialize();
    _interpreter = new atn::ParserATNSimulator(
        this, *whixyparserParserStaticData->atn, whixyparserParserStaticData->decisionToDFA,
        whixyparserParserStaticData->sharedContextCache, options
    );
}

WhixyParser::~WhixyParser() { delete _interpreter; }

const atn::ATN& WhixyParser::getATN() const { return *whixyparserParserStaticData->atn; }

std::string WhixyParser::getGrammarFileName() const { return "WhixyParser.g4"; }

const std::vector<std::string>& WhixyParser::getRuleNames() const { return whixyparserParserStaticData->ruleNames; }

const dfa::Vocabulary& WhixyParser::getVocabulary() const { return whixyparserParserStaticData->vocabulary; }

antlr4::atn::SerializedATNView WhixyParser::getSerializedATN() const
{
    return whixyparserParserStaticData->serializedATN;
}

//----------------- SrcFileContext ------------------------------------------------------------------

WhixyParser::SrcFileContext::SrcFileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::StmtContext*> WhixyParser::SrcFileContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::SrcFileContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

tree::TerminalNode* WhixyParser::SrcFileContext::EOF() { return getToken(WhixyParser::EOF, 0); }

std::vector<tree::TerminalNode*> WhixyParser::SrcFileContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::SrcFileContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

std::vector<WhixyParser::StmtSepContext*> WhixyParser::SrcFileContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::SrcFileContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::SrcFileContext::getRuleIndex() const { return WhixyParser::RuleSrcFile; }

std::any WhixyParser::SrcFileContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSrcFile(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::SrcFileContext* WhixyParser::srcFile()
{
    SrcFileContext* _localctx = _tracker.createInstance<SrcFileContext>(_ctx, getState());
    enterRule(_localctx, 0, WhixyParser::RuleSrcFile);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(143);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
        case 1: {
            setState(142);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(145);
        stmt();
        setState(151);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(146);
                stmtSep();
                setState(147);
                stmt();
            }
            setState(153);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
        }
        setState(155);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(154);
            match(WhixyParser::NEWLINE);
        }
        setState(157);
        match(WhixyParser::EOF);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtSepContext ------------------------------------------------------------------

WhixyParser::StmtSepContext::StmtSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::StmtSepContext::SEMICOLON() { return getToken(WhixyParser::SEMICOLON, 0); }

tree::TerminalNode* WhixyParser::StmtSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::StmtSepContext::getRuleIndex() const { return WhixyParser::RuleStmtSep; }

std::any WhixyParser::StmtSepContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStmtSep(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StmtSepContext* WhixyParser::stmtSep()
{
    StmtSepContext* _localctx = _tracker.createInstance<StmtSepContext>(_ctx, getState());
    enterRule(_localctx, 2, WhixyParser::RuleStmtSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(159);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::NEWLINE

              || _la == WhixyParser::SEMICOLON)) {
            _errHandler->recoverInline(this);
        }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

WhixyParser::StmtContext::StmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::StmtContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::AssignStmtContext* WhixyParser::StmtContext::assignStmt()
{
    return getRuleContext<WhixyParser::AssignStmtContext>(0);
}

WhixyParser::CallContext* WhixyParser::StmtContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BlockStmtContext* WhixyParser::StmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::RoutineStmtContext* WhixyParser::StmtContext::routineStmt()
{
    return getRuleContext<WhixyParser::RoutineStmtContext>(0);
}

WhixyParser::ReturnStmtContext* WhixyParser::StmtContext::returnStmt()
{
    return getRuleContext<WhixyParser::ReturnStmtContext>(0);
}

WhixyParser::IfStmtContext* WhixyParser::StmtContext::ifStmt() { return getRuleContext<WhixyParser::IfStmtContext>(0); }

WhixyParser::WhereStmtContext* WhixyParser::StmtContext::whereStmt()
{
    return getRuleContext<WhixyParser::WhereStmtContext>(0);
}

WhixyParser::LoopStmtContext* WhixyParser::StmtContext::loopStmt()
{
    return getRuleContext<WhixyParser::LoopStmtContext>(0);
}

WhixyParser::ComptStmtContext* WhixyParser::StmtContext::comptStmt()
{
    return getRuleContext<WhixyParser::ComptStmtContext>(0);
}

WhixyParser::UnreachableContext* WhixyParser::StmtContext::unreachable()
{
    return getRuleContext<WhixyParser::UnreachableContext>(0);
}

WhixyParser::DeferStmtContext* WhixyParser::StmtContext::deferStmt()
{
    return getRuleContext<WhixyParser::DeferStmtContext>(0);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::StmtContext::errdeferStmt()
{
    return getRuleContext<WhixyParser::ErrdeferStmtContext>(0);
}

size_t WhixyParser::StmtContext::getRuleIndex() const { return WhixyParser::RuleStmt; }

std::any WhixyParser::StmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StmtContext* WhixyParser::stmt()
{
    StmtContext* _localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
    enterRule(_localctx, 4, WhixyParser::RuleStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(174);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(161);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(162);
            assignStmt();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(163);
            call();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(164);
            blockStmt();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(165);
            routineStmt();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(166);
            returnStmt();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(167);
            ifStmt();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(168);
            whereStmt();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(169);
            loopStmt();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(170);
            comptStmt();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(171);
            unreachable();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(172);
            deferStmt();
            break;
        }

        case 13: {
            enterOuterAlt(_localctx, 13);
            setState(173);
            errdeferStmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- FieldContext ------------------------------------------------------------------

WhixyParser::FieldContext::FieldContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::FieldContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::MutableContext* WhixyParser::FieldContext::mutable_()
{
    return getRuleContext<WhixyParser::MutableContext>(0);
}

WhixyParser::VolatileContext* WhixyParser::FieldContext::volatile_()
{
    return getRuleContext<WhixyParser::VolatileContext>(0);
}

WhixyParser::ThreadlocalContext* WhixyParser::FieldContext::threadlocal()
{
    return getRuleContext<WhixyParser::ThreadlocalContext>(0);
}

std::vector<WhixyParser::TokenContext*> WhixyParser::FieldContext::token()
{
    return getRuleContexts<WhixyParser::TokenContext>();
}

WhixyParser::TokenContext* WhixyParser::FieldContext::token(size_t i)
{
    return getRuleContext<WhixyParser::TokenContext>(i);
}

tree::TerminalNode* WhixyParser::FieldContext::EQUAL() { return getToken(WhixyParser::EQUAL, 0); }

WhixyParser::ExprContext* WhixyParser::FieldContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

tree::TerminalNode* WhixyParser::FieldContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::FieldContext::getRuleIndex() const { return WhixyParser::RuleField; }

std::any WhixyParser::FieldContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitField(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::FieldContext* WhixyParser::field()
{
    FieldContext* _localctx = _tracker.createInstance<FieldContext>(_ctx, getState());
    enterRule(_localctx, 6, WhixyParser::RuleField);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(177);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::MUT) {
            setState(176);
            mutable_();
        }
        setState(180);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::VOLATILE) {
            setState(179);
            volatile_();
        }
        setState(183);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::THREADLOCAL) {
            setState(182);
            threadlocal();
        }
        setState(185);
        atom();
        setState(187);
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
            setState(186);
            token();
            setState(189);
            _errHandler->sync(this);
            _la = _input->LA(1);
        }
        while (_la == WhixyParser::TOKEN);
        setState(196);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::EQUAL) {
            setState(191);
            match(WhixyParser::EQUAL);
            setState(193);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
            case 1: {
                setState(192);
                match(WhixyParser::NEWLINE);
                break;
            }

            default: break;
            }
            setState(195);
            expr();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- MutableContext ------------------------------------------------------------------

WhixyParser::MutableContext::MutableContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::MutableContext::MUT() { return getToken(WhixyParser::MUT, 0); }

size_t WhixyParser::MutableContext::getRuleIndex() const { return WhixyParser::RuleMutable; }

std::any WhixyParser::MutableContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitMutable(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::MutableContext* WhixyParser::mutable_()
{
    MutableContext* _localctx = _tracker.createInstance<MutableContext>(_ctx, getState());
    enterRule(_localctx, 8, WhixyParser::RuleMutable);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(198);
        match(WhixyParser::MUT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- VolatileContext ------------------------------------------------------------------

WhixyParser::VolatileContext::VolatileContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::VolatileContext::VOLATILE() { return getToken(WhixyParser::VOLATILE, 0); }

size_t WhixyParser::VolatileContext::getRuleIndex() const { return WhixyParser::RuleVolatile; }

std::any WhixyParser::VolatileContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitVolatile(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::VolatileContext* WhixyParser::volatile_()
{
    VolatileContext* _localctx = _tracker.createInstance<VolatileContext>(_ctx, getState());
    enterRule(_localctx, 10, WhixyParser::RuleVolatile);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(200);
        match(WhixyParser::VOLATILE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ThreadlocalContext ------------------------------------------------------------------

WhixyParser::ThreadlocalContext::ThreadlocalContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ThreadlocalContext::THREADLOCAL() { return getToken(WhixyParser::THREADLOCAL, 0); }

size_t WhixyParser::ThreadlocalContext::getRuleIndex() const { return WhixyParser::RuleThreadlocal; }

std::any WhixyParser::ThreadlocalContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitThreadlocal(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ThreadlocalContext* WhixyParser::threadlocal()
{
    ThreadlocalContext* _localctx = _tracker.createInstance<ThreadlocalContext>(_ctx, getState());
    enterRule(_localctx, 12, WhixyParser::RuleThreadlocal);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(202);
        match(WhixyParser::THREADLOCAL);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignStmtContext ------------------------------------------------------------------

WhixyParser::AssignStmtContext::AssignStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::AssignStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::AssignStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::AssignOpContext* WhixyParser::AssignStmtContext::assignOp()
{
    return getRuleContext<WhixyParser::AssignOpContext>(0);
}

size_t WhixyParser::AssignStmtContext::getRuleIndex() const { return WhixyParser::RuleAssignStmt; }

std::any WhixyParser::AssignStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAssignStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AssignStmtContext* WhixyParser::assignStmt()
{
    AssignStmtContext* _localctx = _tracker.createInstance<AssignStmtContext>(_ctx, getState());
    enterRule(_localctx, 14, WhixyParser::RuleAssignStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(204);
        atom();
        setState(205);
        assignOp();
        setState(206);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AssignOpContext ------------------------------------------------------------------

WhixyParser::AssignOpContext::AssignOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::AssignOpContext::getRuleIndex() const { return WhixyParser::RuleAssignOp; }

void WhixyParser::AssignOpContext::copyFrom(AssignOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- SubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::SubEqualsOpContext::MINUS_EQUAL() { return getToken(WhixyParser::MINUS_EQUAL, 0); }

WhixyParser::SubEqualsOpContext::SubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::SubEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSubEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- WrappingTimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingTimesEqualsOpContext::ASTERISK_PERCENT_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingTimesEqualsOpContext::WrappingTimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::WrappingTimesEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingTimesEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AndEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AndEqualsOpContext::AMPERSAND_EQUAL()
{
    return getToken(WhixyParser::AMPERSAND_EQUAL, 0);
}

WhixyParser::AndEqualsOpContext::AndEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AndEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAndEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- LeftRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftRotateEqualsOpContext::LESSTHAN_LESSTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::LeftRotateEqualsOpContext::LeftRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::LeftRotateEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLeftRotateEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- LeftShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::LeftShiftEqualsOpContext::LESSTHAN_LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_EQUAL, 0);
}

WhixyParser::LeftShiftEqualsOpContext::LeftShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::LeftShiftEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLeftShiftEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- OrEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::OrEqualsOpContext::PIPE_EQUAL() { return getToken(WhixyParser::PIPE_EQUAL, 0); }

WhixyParser::OrEqualsOpContext::OrEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::OrEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOrEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- RightRotateEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightRotateEqualsOpContext::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL, 0);
}

WhixyParser::RightRotateEqualsOpContext::RightRotateEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::RightRotateEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitRightRotateEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- TimesEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TimesEqualsOpContext::ASTERISK_EQUAL()
{
    return getToken(WhixyParser::ASTERISK_EQUAL, 0);
}

WhixyParser::TimesEqualsOpContext::TimesEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::TimesEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTimesEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddEqualsOpContext::PLUS_EQUAL() { return getToken(WhixyParser::PLUS_EQUAL, 0); }

WhixyParser::AddEqualsOpContext::AddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AddEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAddEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- RightShiftEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::RightShiftEqualsOpContext::GREATERTHAN_GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL, 0);
}

WhixyParser::RightShiftEqualsOpContext::RightShiftEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::RightShiftEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitRightShiftEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- WrappingAddEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingAddEqualsOpContext::PLUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::PLUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingAddEqualsOpContext::WrappingAddEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::WrappingAddEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingAddEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- ModEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ModEqualsOpContext::PERCENT_EQUAL() { return getToken(WhixyParser::PERCENT_EQUAL, 0); }

WhixyParser::ModEqualsOpContext::ModEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::ModEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitModEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- DivideEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DivideEqualsOpContext::SLASH_EQUAL() { return getToken(WhixyParser::SLASH_EQUAL, 0); }

WhixyParser::DivideEqualsOpContext::DivideEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::DivideEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDivideEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- WrappingSubEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::WrappingSubEqualsOpContext::MINUS_PERCENT_EQUAL()
{
    return getToken(WhixyParser::MINUS_PERCENT_EQUAL, 0);
}

WhixyParser::WrappingSubEqualsOpContext::WrappingSubEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::WrappingSubEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingSubEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- XorEqualsOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::XorEqualsOpContext::CARROT_EQUAL() { return getToken(WhixyParser::CARROT_EQUAL, 0); }

WhixyParser::XorEqualsOpContext::XorEqualsOpContext(AssignOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::XorEqualsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitXorEqualsOp(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::AssignOpContext* WhixyParser::assignOp()
{
    AssignOpContext* _localctx = _tracker.createInstance<AssignOpContext>(_ctx, getState());
    enterRule(_localctx, 16, WhixyParser::RuleAssignOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(223);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AMPERSAND_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AndEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(208);
            match(WhixyParser::AMPERSAND_EQUAL);
            break;
        }

        case WhixyParser::PIPE_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::OrEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(209);
            match(WhixyParser::PIPE_EQUAL);
            break;
        }

        case WhixyParser::PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::ModEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(210);
            match(WhixyParser::PERCENT_EQUAL);
            break;
        }

        case WhixyParser::CARROT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::XorEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(211);
            match(WhixyParser::CARROT_EQUAL);
            break;
        }

        case WhixyParser::SLASH_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::DivideEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(212);
            match(WhixyParser::SLASH_EQUAL);
            break;
        }

        case WhixyParser::PLUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::AddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(213);
            match(WhixyParser::PLUS_EQUAL);
            break;
        }

        case WhixyParser::MINUS_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::SubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(214);
            match(WhixyParser::MINUS_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::TimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(215);
            match(WhixyParser::ASTERISK_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 9);
            setState(216);
            match(WhixyParser::LESSTHAN_LESSTHAN_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightShiftEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 10);
            setState(217);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_EQUAL);
            break;
        }

        case WhixyParser::ASTERISK_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingTimesEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 11);
            setState(218);
            match(WhixyParser::ASTERISK_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::PLUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingAddEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 12);
            setState(219);
            match(WhixyParser::PLUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::MINUS_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::WrappingSubEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 13);
            setState(220);
            match(WhixyParser::MINUS_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::RightRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 14);
            setState(221);
            match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT_EQUAL);
            break;
        }

        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL: {
            _localctx = _tracker.createInstance<WhixyParser::LeftRotateEqualsOpContext>(_localctx);
            enterOuterAlt(_localctx, 15);
            setState(222);
            match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT_EQUAL);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CallContext ------------------------------------------------------------------

WhixyParser::CallContext::CallContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::CallContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::CallContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::ExprContext* WhixyParser::CallContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::CallContext::getRuleIndex() const { return WhixyParser::RuleCall; }

std::any WhixyParser::CallContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCall(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CallContext* WhixyParser::call()
{
    CallContext* _localctx = _tracker.createInstance<CallContext>(_ctx, getState());
    enterRule(_localctx, 18, WhixyParser::RuleCall);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(225);
        atom();
        setState(232);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
        case 1: {
            setState(227);
            _errHandler->sync(this);
            alt = 1;
            do {
                switch (alt) {
                case 1: {
                    setState(226);
                    atom();
                    break;
                }

                default: throw NoViableAltException(this);
                }
                setState(229);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
            }
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
            break;
        }

        case 2: {
            setState(231);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockStmtContext ------------------------------------------------------------------

WhixyParser::BlockStmtContext::BlockStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::BlockStmtContext::getRuleIndex() const { return WhixyParser::RuleBlockStmt; }

void WhixyParser::BlockStmtContext::copyFrom(BlockStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- FuncBlockStmtContext ------------------------------------------------------------------

WhixyParser::OParenContext* WhixyParser::FuncBlockStmtContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::FuncBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::FuncBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::FuncBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::FuncBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::FuncBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::FuncBlockStmtContext::FuncBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::FuncBlockStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitFuncBlockStmt(this);
    else
        return visitor->visitChildren(this);
}
//----------------- ProcBlockStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::ProcBlockStmtContext::DOLLAR_OPENPARENTHESIS()
{
    return getToken(WhixyParser::DOLLAR_OPENPARENTHESIS, 0);
}

WhixyParser::CParenContext* WhixyParser::ProcBlockStmtContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<tree::TerminalNode*> WhixyParser::ProcBlockStmtContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::ProcBlockStmtContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

std::vector<WhixyParser::StmtContext*> WhixyParser::ProcBlockStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::ProcBlockStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::ProcBlockStmtContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::ProcBlockStmtContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

WhixyParser::ProcBlockStmtContext::ProcBlockStmtContext(BlockStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::ProcBlockStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitProcBlockStmt(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::BlockStmtContext* WhixyParser::blockStmt()
{
    BlockStmtContext* _localctx = _tracker.createInstance<BlockStmtContext>(_ctx, getState());
    enterRule(_localctx, 20, WhixyParser::RuleBlockStmt);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        setState(267);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::FuncBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(234);
            oParen();
            setState(244);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
            case 1: {
                setState(235);
                stmt();
                setState(241);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(236);
                        stmtSep();
                        setState(237);
                        stmt();
                    }
                    setState(243);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(246);
            cParen();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::ProcBlockStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(249);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::NEWLINE) {
                setState(248);
                match(WhixyParser::NEWLINE);
            }
            setState(251);
            match(WhixyParser::DOLLAR_OPENPARENTHESIS);
            setState(253);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
            case 1: {
                setState(252);
                match(WhixyParser::NEWLINE);
                break;
            }

            default: break;
            }
            setState(264);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
            case 1: {
                setState(255);
                stmt();
                setState(261);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(256);
                        stmtSep();
                        setState(257);
                        stmt();
                    }
                    setState(263);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
                }
                break;
            }

            default: break;
            }
            setState(266);
            cParen();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineStmtContext ------------------------------------------------------------------

WhixyParser::RoutineStmtContext::RoutineStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineStmtContext::getRuleIndex() const { return WhixyParser::RuleRoutineStmt; }

void WhixyParser::RoutineStmtContext::copyFrom(RoutineStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainRoutineStmtContext ------------------------------------------------------------------

WhixyParser::TypeExprContext* WhixyParser::PlainRoutineStmtContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TokenContext* WhixyParser::PlainRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::PlainRoutineStmtContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineStmtContext::PlainRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::PlainRoutineStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlainRoutineStmt(this);
    else
        return visitor->visitChildren(this);
}
//----------------- InlineRoutineStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineStmtContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

WhixyParser::TypeExprContext* WhixyParser::InlineRoutineStmtContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::TokenContext* WhixyParser::InlineRoutineStmtContext::token()
{
    return getRuleContext<WhixyParser::TokenContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::InlineRoutineStmtContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineStmtContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineStmtContext::InlineRoutineStmtContext(RoutineStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::InlineRoutineStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitInlineRoutineStmt(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::RoutineStmtContext* WhixyParser::routineStmt()
{
    RoutineStmtContext* _localctx = _tracker.createInstance<RoutineStmtContext>(_ctx, getState());
    enterRule(_localctx, 22, WhixyParser::RuleRoutineStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(280);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::NEWLINE:
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::UNDERSCORE:
        case WhixyParser::OPENBRACE:
        case WhixyParser::ASTERISK:
        case WhixyParser::THIS:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(269);
            typeExpr();
            setState(270);
            token();
            setState(271);
            structExpr();
            setState(272);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(274);
            match(WhixyParser::INLINE);
            setState(275);
            typeExpr();
            setState(276);
            token();
            setState(277);
            structExpr();
            setState(278);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

WhixyParser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ReturnStmtContext::RETURN() { return getToken(WhixyParser::RETURN, 0); }

WhixyParser::ExprContext* WhixyParser::ReturnStmtContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::ReturnStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::ReturnStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

size_t WhixyParser::ReturnStmtContext::getRuleIndex() const { return WhixyParser::RuleReturnStmt; }

std::any WhixyParser::ReturnStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitReturnStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ReturnStmtContext* WhixyParser::returnStmt()
{
    ReturnStmtContext* _localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
    enterRule(_localctx, 24, WhixyParser::RuleReturnStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(282);
        match(WhixyParser::RETURN);
        setState(289);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
        case 1: {
            setState(284);
            _errHandler->sync(this);
            alt = 1;
            do {
                switch (alt) {
                case 1: {
                    setState(283);
                    atom();
                    break;
                }

                default: throw NoViableAltException(this);
                }
                setState(286);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
            }
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
            break;
        }

        case 2: {
            setState(288);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

WhixyParser::IfStmtContext::IfStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfStmtContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::StmtContext*> WhixyParser::IfStmtContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::IfStmtContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfStmtContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfStmtContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfStmtContext::getRuleIndex() const { return WhixyParser::RuleIfStmt; }

std::any WhixyParser::IfStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitIfStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::IfStmtContext* WhixyParser::ifStmt()
{
    IfStmtContext* _localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
    enterRule(_localctx, 26, WhixyParser::RuleIfStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(291);
        match(WhixyParser::IF);
        setState(292);
        atom();
        setState(293);
        stmt();
        setState(300);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(294);
                match(WhixyParser::ELSEIF);
                setState(295);
                atom();
                setState(296);
                stmt();
            }
            setState(302);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
        }
        setState(305);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
        case 1: {
            setState(303);
            match(WhixyParser::ELSE);
            setState(304);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereStmtContext ------------------------------------------------------------------

WhixyParser::WhereStmtContext::WhereStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereStmtContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereStmtContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereStmtContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::WhereStmtContext::caseStmtBlock()
{
    return getRuleContext<WhixyParser::CaseStmtBlockContext>(0);
}

size_t WhixyParser::WhereStmtContext::getRuleIndex() const { return WhixyParser::RuleWhereStmt; }

std::any WhixyParser::WhereStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWhereStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WhereStmtContext* WhixyParser::whereStmt()
{
    WhereStmtContext* _localctx = _tracker.createInstance<WhereStmtContext>(_ctx, getState());
    enterRule(_localctx, 28, WhixyParser::RuleWhereStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(307);
        match(WhixyParser::WHERE);
        setState(308);
        atom();
        setState(309);
        comparisonOp();
        setState(310);
        caseStmtBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComparisonOpContext ------------------------------------------------------------------

WhixyParser::ComparisonOpContext::ComparisonOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::ComparisonOpContext::getRuleIndex() const { return WhixyParser::RuleComparisonOp; }

std::any WhixyParser::ComparisonOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitComparisonOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ComparisonOpContext* WhixyParser::comparisonOp()
{
    ComparisonOpContext* _localctx = _tracker.createInstance<ComparisonOpContext>(_ctx, getState());
    enterRule(_localctx, 30, WhixyParser::RuleComparisonOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseStmtBlockContext ------------------------------------------------------------------

WhixyParser::CaseStmtBlockContext::CaseStmtBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseStmtBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseStmtBlock; }

std::any WhixyParser::CaseStmtBlockContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCaseStmtBlock(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CaseStmtBlockContext* WhixyParser::caseStmtBlock()
{
    CaseStmtBlockContext* _localctx = _tracker.createInstance<CaseStmtBlockContext>(_ctx, getState());
    enterRule(_localctx, 32, WhixyParser::RuleCaseStmtBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

WhixyParser::LoopStmtContext::LoopStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::LoopStmtContext::getRuleIndex() const { return WhixyParser::RuleLoopStmt; }

void WhixyParser::LoopStmtContext::copyFrom(LoopStmtContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- PlainForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::PlainForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainForStmtContext::PlainForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::PlainForStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlainForStmt(this);
    else
        return visitor->visitChildren(this);
}
//----------------- UnrollWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollWhileStmtContext::UnrollWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::UnrollWhileStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitUnrollWhileStmt(this);
    else
        return visitor->visitChildren(this);
}
//----------------- PlainWhileStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::PlainWhileStmtContext::WHILE() { return getToken(WhixyParser::WHILE, 0); }

WhixyParser::StmtContext* WhixyParser::PlainWhileStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::PlainWhileStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::PlainWhileStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::PlainWhileStmtContext::PlainWhileStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::PlainWhileStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlainWhileStmt(this);
    else
        return visitor->visitChildren(this);
}
//----------------- UnrollForStmtContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnrollForStmtContext::UNROLL() { return getToken(WhixyParser::UNROLL, 0); }

tree::TerminalNode* WhixyParser::UnrollForStmtContext::FOR() { return getToken(WhixyParser::FOR, 0); }

WhixyParser::StmtContext* WhixyParser::UnrollForStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

std::vector<WhixyParser::AtomContext*> WhixyParser::UnrollForStmtContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::UnrollForStmtContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::UnrollForStmtContext::UnrollForStmtContext(LoopStmtContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::UnrollForStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitUnrollForStmt(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::LoopStmtContext* WhixyParser::loopStmt()
{
    LoopStmtContext* _localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
    enterRule(_localctx, 34, WhixyParser::RuleLoopStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(350);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(316);
            match(WhixyParser::UNROLL);
            setState(317);
            match(WhixyParser::WHILE);
            setState(319);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
            case 1: {
                setState(318);
                atom();
                break;
            }

            default: break;
            }
            setState(322);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
            case 1: {
                setState(321);
                atom();
                break;
            }

            default: break;
            }
            setState(324);
            stmt();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::UnrollForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(325);
            match(WhixyParser::UNROLL);
            setState(326);
            match(WhixyParser::FOR);
            setState(328);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
            case 1: {
                setState(327);
                atom();
                break;
            }

            default: break;
            }
            setState(331);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
            case 1: {
                setState(330);
                atom();
                break;
            }

            default: break;
            }
            setState(333);
            stmt();
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::PlainWhileStmtContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(334);
            match(WhixyParser::WHILE);
            setState(336);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
            case 1: {
                setState(335);
                atom();
                break;
            }

            default: break;
            }
            setState(339);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
            case 1: {
                setState(338);
                atom();
                break;
            }

            default: break;
            }
            setState(341);
            stmt();
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::PlainForStmtContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(342);
            match(WhixyParser::FOR);
            setState(344);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
            case 1: {
                setState(343);
                atom();
                break;
            }

            default: break;
            }
            setState(347);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
            case 1: {
                setState(346);
                atom();
                break;
            }

            default: break;
            }
            setState(349);
            stmt();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptStmtContext ------------------------------------------------------------------

WhixyParser::ComptStmtContext::ComptStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptStmtContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::StmtContext* WhixyParser::ComptStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::ComptStmtContext::getRuleIndex() const { return WhixyParser::RuleComptStmt; }

std::any WhixyParser::ComptStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitComptStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ComptStmtContext* WhixyParser::comptStmt()
{
    ComptStmtContext* _localctx = _tracker.createInstance<ComptStmtContext>(_ctx, getState());
    enterRule(_localctx, 36, WhixyParser::RuleComptStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(352);
        match(WhixyParser::COMPT);
        setState(353);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- UnreachableContext ------------------------------------------------------------------

WhixyParser::UnreachableContext::UnreachableContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::UnreachableContext::UNREACHABLE() { return getToken(WhixyParser::UNREACHABLE, 0); }

size_t WhixyParser::UnreachableContext::getRuleIndex() const { return WhixyParser::RuleUnreachable; }

std::any WhixyParser::UnreachableContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitUnreachable(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::UnreachableContext* WhixyParser::unreachable()
{
    UnreachableContext* _localctx = _tracker.createInstance<UnreachableContext>(_ctx, getState());
    enterRule(_localctx, 38, WhixyParser::RuleUnreachable);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(355);
        match(WhixyParser::UNREACHABLE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DeferStmtContext ------------------------------------------------------------------

WhixyParser::DeferStmtContext::DeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::DeferStmtContext::DEFER() { return getToken(WhixyParser::DEFER, 0); }

WhixyParser::StmtContext* WhixyParser::DeferStmtContext::stmt() { return getRuleContext<WhixyParser::StmtContext>(0); }

size_t WhixyParser::DeferStmtContext::getRuleIndex() const { return WhixyParser::RuleDeferStmt; }

std::any WhixyParser::DeferStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDeferStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::DeferStmtContext* WhixyParser::deferStmt()
{
    DeferStmtContext* _localctx = _tracker.createInstance<DeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 40, WhixyParser::RuleDeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(357);
        match(WhixyParser::DEFER);
        setState(358);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ErrdeferStmtContext ------------------------------------------------------------------

WhixyParser::ErrdeferStmtContext::ErrdeferStmtContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ErrdeferStmtContext::ERRDEFER() { return getToken(WhixyParser::ERRDEFER, 0); }

WhixyParser::StmtContext* WhixyParser::ErrdeferStmtContext::stmt()
{
    return getRuleContext<WhixyParser::StmtContext>(0);
}

size_t WhixyParser::ErrdeferStmtContext::getRuleIndex() const { return WhixyParser::RuleErrdeferStmt; }

std::any WhixyParser::ErrdeferStmtContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitErrdeferStmt(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ErrdeferStmtContext* WhixyParser::errdeferStmt()
{
    ErrdeferStmtContext* _localctx = _tracker.createInstance<ErrdeferStmtContext>(_ctx, getState());
    enterRule(_localctx, 42, WhixyParser::RuleErrdeferStmt);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(360);
        match(WhixyParser::ERRDEFER);
        setState(361);
        stmt();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprSepContext ------------------------------------------------------------------

WhixyParser::ExprSepContext::ExprSepContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ExprSepContext::COMMA() { return getToken(WhixyParser::COMMA, 0); }

tree::TerminalNode* WhixyParser::ExprSepContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::ExprSepContext::getRuleIndex() const { return WhixyParser::RuleExprSep; }

std::any WhixyParser::ExprSepContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExprSep(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExprSepContext* WhixyParser::exprSep()
{
    ExprSepContext* _localctx = _tracker.createInstance<ExprSepContext>(_ctx, getState());
    enterRule(_localctx, 44, WhixyParser::RuleExprSep);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(363);
        _la = _input->LA(1);
        if (!(_la == WhixyParser::NEWLINE

              || _la == WhixyParser::COMMA)) {
            _errHandler->recoverInline(this);
        }
        else {
            _errHandler->reportMatch(this);
            consume();
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WhixyParser::ExprContext::ExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::FieldContext* WhixyParser::ExprContext::field() { return getRuleContext<WhixyParser::FieldContext>(0); }

WhixyParser::TypeExprContext* WhixyParser::ExprContext::typeExpr()
{
    return getRuleContext<WhixyParser::TypeExprContext>(0);
}

WhixyParser::CallContext* WhixyParser::ExprContext::call() { return getRuleContext<WhixyParser::CallContext>(0); }

WhixyParser::BinaryExprContext* WhixyParser::ExprContext::binaryExpr()
{
    return getRuleContext<WhixyParser::BinaryExprContext>(0);
}

WhixyParser::PostExprContext* WhixyParser::ExprContext::postExpr()
{
    return getRuleContext<WhixyParser::PostExprContext>(0);
}

WhixyParser::PreExprContext* WhixyParser::ExprContext::preExpr()
{
    return getRuleContext<WhixyParser::PreExprContext>(0);
}

WhixyParser::IfExprContext* WhixyParser::ExprContext::ifExpr() { return getRuleContext<WhixyParser::IfExprContext>(0); }

WhixyParser::WhereExprContext* WhixyParser::ExprContext::whereExpr()
{
    return getRuleContext<WhixyParser::WhereExprContext>(0);
}

WhixyParser::ComptExprContext* WhixyParser::ExprContext::comptExpr()
{
    return getRuleContext<WhixyParser::ComptExprContext>(0);
}

WhixyParser::UnreachableContext* WhixyParser::ExprContext::unreachable()
{
    return getRuleContext<WhixyParser::UnreachableContext>(0);
}

WhixyParser::RoutineExprContext* WhixyParser::ExprContext::routineExpr()
{
    return getRuleContext<WhixyParser::RoutineExprContext>(0);
}

WhixyParser::StringContext* WhixyParser::ExprContext::string() { return getRuleContext<WhixyParser::StringContext>(0); }

WhixyParser::AtomContext* WhixyParser::ExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::ExprContext::getRuleIndex() const { return WhixyParser::RuleExpr; }

std::any WhixyParser::ExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ExprContext* WhixyParser::expr()
{
    ExprContext* _localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
    enterRule(_localctx, 46, WhixyParser::RuleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(378);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(365);
            field();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(366);
            typeExpr();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(367);
            call();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(368);
            binaryExpr();
            break;
        }

        case 5: {
            enterOuterAlt(_localctx, 5);
            setState(369);
            postExpr();
            break;
        }

        case 6: {
            enterOuterAlt(_localctx, 6);
            setState(370);
            preExpr();
            break;
        }

        case 7: {
            enterOuterAlt(_localctx, 7);
            setState(371);
            ifExpr();
            break;
        }

        case 8: {
            enterOuterAlt(_localctx, 8);
            setState(372);
            whereExpr();
            break;
        }

        case 9: {
            enterOuterAlt(_localctx, 9);
            setState(373);
            comptExpr();
            break;
        }

        case 10: {
            enterOuterAlt(_localctx, 10);
            setState(374);
            unreachable();
            break;
        }

        case 11: {
            enterOuterAlt(_localctx, 11);
            setState(375);
            routineExpr();
            break;
        }

        case 12: {
            enterOuterAlt(_localctx, 12);
            setState(376);
            string();
            break;
        }

        case 13: {
            enterOuterAlt(_localctx, 13);
            setState(377);
            atom();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TypeExprContext ------------------------------------------------------------------

WhixyParser::TypeExprContext::TypeExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TypeExprContext::UNDERSCORE() { return getToken(WhixyParser::UNDERSCORE, 0); }

tree::TerminalNode* WhixyParser::TypeExprContext::THIS() { return getToken(WhixyParser::THIS, 0); }

tree::TerminalNode* WhixyParser::TypeExprContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

WhixyParser::AtomContext* WhixyParser::TypeExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::TypeExprContext::getRuleIndex() const { return WhixyParser::RuleTypeExpr; }

std::any WhixyParser::TypeExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTypeExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TypeExprContext* WhixyParser::typeExpr()
{
    TypeExprContext* _localctx = _tracker.createInstance<TypeExprContext>(_ctx, getState());
    enterRule(_localctx, 48, WhixyParser::RuleTypeExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(386);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::UNDERSCORE: {
            enterOuterAlt(_localctx, 1);
            setState(380);
            match(WhixyParser::UNDERSCORE);
            break;
        }

        case WhixyParser::ASTERISK:
        case WhixyParser::THIS: {
            enterOuterAlt(_localctx, 2);
            setState(382);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::ASTERISK) {
                setState(381);
                match(WhixyParser::ASTERISK);
            }
            setState(384);
            match(WhixyParser::THIS);
            break;
        }

        case WhixyParser::NEWLINE:
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::TOKEN: {
            enterOuterAlt(_localctx, 3);
            setState(385);
            atom();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BinaryExprContext ------------------------------------------------------------------

WhixyParser::BinaryExprContext::BinaryExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

std::vector<WhixyParser::AtomContext*> WhixyParser::BinaryExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::BinaryExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

WhixyParser::AsOpContext* WhixyParser::BinaryExprContext::asOp() { return getRuleContext<WhixyParser::AsOpContext>(0); }

WhixyParser::LogicalAndOpContext* WhixyParser::BinaryExprContext::logicalAndOp()
{
    return getRuleContext<WhixyParser::LogicalAndOpContext>(0);
}

WhixyParser::LogicalOrOpContext* WhixyParser::BinaryExprContext::logicalOrOp()
{
    return getRuleContext<WhixyParser::LogicalOrOpContext>(0);
}

std::vector<tree::TerminalNode*> WhixyParser::BinaryExprContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::BinaryExprContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

WhixyParser::TimesOpContext* WhixyParser::BinaryExprContext::timesOp()
{
    return getRuleContext<WhixyParser::TimesOpContext>(0);
}

WhixyParser::DivideOpContext* WhixyParser::BinaryExprContext::divideOp()
{
    return getRuleContext<WhixyParser::DivideOpContext>(0);
}

WhixyParser::ModOpContext* WhixyParser::BinaryExprContext::modOp()
{
    return getRuleContext<WhixyParser::ModOpContext>(0);
}

WhixyParser::BitwiseAndOpContext* WhixyParser::BinaryExprContext::bitwiseAndOp()
{
    return getRuleContext<WhixyParser::BitwiseAndOpContext>(0);
}

WhixyParser::LeftShiftOpContext* WhixyParser::BinaryExprContext::leftShiftOp()
{
    return getRuleContext<WhixyParser::LeftShiftOpContext>(0);
}

WhixyParser::RightShiftOpContext* WhixyParser::BinaryExprContext::rightShiftOp()
{
    return getRuleContext<WhixyParser::RightShiftOpContext>(0);
}

WhixyParser::WrappingTimesOpContext* WhixyParser::BinaryExprContext::wrappingTimesOp()
{
    return getRuleContext<WhixyParser::WrappingTimesOpContext>(0);
}

WhixyParser::LeftRotateOpContext* WhixyParser::BinaryExprContext::leftRotateOp()
{
    return getRuleContext<WhixyParser::LeftRotateOpContext>(0);
}

WhixyParser::RightRotateOpContext* WhixyParser::BinaryExprContext::rightRotateOp()
{
    return getRuleContext<WhixyParser::RightRotateOpContext>(0);
}

WhixyParser::AddOpContext* WhixyParser::BinaryExprContext::addOp()
{
    return getRuleContext<WhixyParser::AddOpContext>(0);
}

WhixyParser::SubOpContext* WhixyParser::BinaryExprContext::subOp()
{
    return getRuleContext<WhixyParser::SubOpContext>(0);
}

WhixyParser::BitwiseOrOpContext* WhixyParser::BinaryExprContext::bitwiseOrOp()
{
    return getRuleContext<WhixyParser::BitwiseOrOpContext>(0);
}

WhixyParser::XorOpContext* WhixyParser::BinaryExprContext::xorOp()
{
    return getRuleContext<WhixyParser::XorOpContext>(0);
}

WhixyParser::WrappingAddOpContext* WhixyParser::BinaryExprContext::wrappingAddOp()
{
    return getRuleContext<WhixyParser::WrappingAddOpContext>(0);
}

WhixyParser::WrappingSubOpContext* WhixyParser::BinaryExprContext::wrappingSubOp()
{
    return getRuleContext<WhixyParser::WrappingSubOpContext>(0);
}

WhixyParser::EqualityOpContext* WhixyParser::BinaryExprContext::equalityOp()
{
    return getRuleContext<WhixyParser::EqualityOpContext>(0);
}

WhixyParser::InequalityOpContext* WhixyParser::BinaryExprContext::inequalityOp()
{
    return getRuleContext<WhixyParser::InequalityOpContext>(0);
}

WhixyParser::LessThanOpContext* WhixyParser::BinaryExprContext::lessThanOp()
{
    return getRuleContext<WhixyParser::LessThanOpContext>(0);
}

WhixyParser::GreaterThanOpContext* WhixyParser::BinaryExprContext::greaterThanOp()
{
    return getRuleContext<WhixyParser::GreaterThanOpContext>(0);
}

WhixyParser::LessThanOrEqualToOpContext* WhixyParser::BinaryExprContext::lessThanOrEqualToOp()
{
    return getRuleContext<WhixyParser::LessThanOrEqualToOpContext>(0);
}

WhixyParser::GreaterThanOrEqualToOpContext* WhixyParser::BinaryExprContext::greaterThanOrEqualToOp()
{
    return getRuleContext<WhixyParser::GreaterThanOrEqualToOpContext>(0);
}

size_t WhixyParser::BinaryExprContext::getRuleIndex() const { return WhixyParser::RuleBinaryExpr; }

std::any WhixyParser::BinaryExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBinaryExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BinaryExprContext* WhixyParser::binaryExpr()
{
    BinaryExprContext* _localctx = _tracker.createInstance<BinaryExprContext>(_ctx, getState());
    enterRule(_localctx, 50, WhixyParser::RuleBinaryExpr);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(388);
        atom();
        setState(390);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(389);
            match(WhixyParser::NEWLINE);
        }
        setState(422);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::AS: {
            setState(392);
            asOp();
            break;
        }

        case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT:
        case WhixyParser::GREATERTHAN_GREATERTHAN:
        case WhixyParser::LESSTHAN_LESSTHAN_PERCENT:
        case WhixyParser::LESSTHAN_LESSTHAN:
        case WhixyParser::ASTERISK_PERCENT:
        case WhixyParser::ASTERISK:
        case WhixyParser::AMPERSAND:
        case WhixyParser::PERCENT:
        case WhixyParser::SLASH: {
            setState(402);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::ASTERISK: {
                setState(393);
                timesOp();
                break;
            }

            case WhixyParser::SLASH: {
                setState(394);
                divideOp();
                break;
            }

            case WhixyParser::PERCENT: {
                setState(395);
                modOp();
                break;
            }

            case WhixyParser::AMPERSAND: {
                setState(396);
                bitwiseAndOp();
                break;
            }

            case WhixyParser::LESSTHAN_LESSTHAN: {
                setState(397);
                leftShiftOp();
                break;
            }

            case WhixyParser::GREATERTHAN_GREATERTHAN: {
                setState(398);
                rightShiftOp();
                break;
            }

            case WhixyParser::ASTERISK_PERCENT: {
                setState(399);
                wrappingTimesOp();
                break;
            }

            case WhixyParser::LESSTHAN_LESSTHAN_PERCENT: {
                setState(400);
                leftRotateOp();
                break;
            }

            case WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT: {
                setState(401);
                rightRotateOp();
                break;
            }

            default: throw NoViableAltException(this);
            }
            break;
        }

        case WhixyParser::PLUS_PERCENT:
        case WhixyParser::PLUS:
        case WhixyParser::MINUS_PERCENT:
        case WhixyParser::MINUS:
        case WhixyParser::CARROT:
        case WhixyParser::PIPE: {
            setState(410);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::PLUS: {
                setState(404);
                addOp();
                break;
            }

            case WhixyParser::MINUS: {
                setState(405);
                subOp();
                break;
            }

            case WhixyParser::PIPE: {
                setState(406);
                bitwiseOrOp();
                break;
            }

            case WhixyParser::CARROT: {
                setState(407);
                xorOp();
                break;
            }

            case WhixyParser::PLUS_PERCENT: {
                setState(408);
                wrappingAddOp();
                break;
            }

            case WhixyParser::MINUS_PERCENT: {
                setState(409);
                wrappingSubOp();
                break;
            }

            default: throw NoViableAltException(this);
            }
            break;
        }

        case WhixyParser::GREATERTHAN_EQUAL:
        case WhixyParser::GREATERTHAN:
        case WhixyParser::LESSTHAN_EQUAL:
        case WhixyParser::LESSTHAN:
        case WhixyParser::TILDE_EQUAL:
        case WhixyParser::EQUAL_EQUAL: {
            setState(418);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
            case WhixyParser::EQUAL_EQUAL: {
                setState(412);
                equalityOp();
                break;
            }

            case WhixyParser::TILDE_EQUAL: {
                setState(413);
                inequalityOp();
                break;
            }

            case WhixyParser::LESSTHAN: {
                setState(414);
                lessThanOp();
                break;
            }

            case WhixyParser::GREATERTHAN: {
                setState(415);
                greaterThanOp();
                break;
            }

            case WhixyParser::LESSTHAN_EQUAL: {
                setState(416);
                lessThanOrEqualToOp();
                break;
            }

            case WhixyParser::GREATERTHAN_EQUAL: {
                setState(417);
                greaterThanOrEqualToOp();
                break;
            }

            default: throw NoViableAltException(this);
            }
            break;
        }

        case WhixyParser::AND: {
            setState(420);
            logicalAndOp();
            break;
        }

        case WhixyParser::OR: {
            setState(421);
            logicalOrOp();
            break;
        }

        default: throw NoViableAltException(this);
        }
        setState(425);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
        case 1: {
            setState(424);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }
        setState(427);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AsOpContext ------------------------------------------------------------------

WhixyParser::AsOpContext::AsOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::AsOpContext::AS() { return getToken(WhixyParser::AS, 0); }

size_t WhixyParser::AsOpContext::getRuleIndex() const { return WhixyParser::RuleAsOp; }

std::any WhixyParser::AsOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAsOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AsOpContext* WhixyParser::asOp()
{
    AsOpContext* _localctx = _tracker.createInstance<AsOpContext>(_ctx, getState());
    enterRule(_localctx, 52, WhixyParser::RuleAsOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(429);
        match(WhixyParser::AS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ConcatOpContext ------------------------------------------------------------------

WhixyParser::ConcatOpContext::ConcatOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ConcatOpContext::PLUS_PLUS() { return getToken(WhixyParser::PLUS_PLUS, 0); }

size_t WhixyParser::ConcatOpContext::getRuleIndex() const { return WhixyParser::RuleConcatOp; }

std::any WhixyParser::ConcatOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitConcatOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ConcatOpContext* WhixyParser::concatOp()
{
    ConcatOpContext* _localctx = _tracker.createInstance<ConcatOpContext>(_ctx, getState());
    enterRule(_localctx, 54, WhixyParser::RuleConcatOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(431);
        match(WhixyParser::PLUS_PLUS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RepeatOpContext ------------------------------------------------------------------

WhixyParser::RepeatOpContext::RepeatOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::RepeatOpContext::ASTERISK_ASTERISK()
{
    return getToken(WhixyParser::ASTERISK_ASTERISK, 0);
}

size_t WhixyParser::RepeatOpContext::getRuleIndex() const { return WhixyParser::RuleRepeatOp; }

std::any WhixyParser::RepeatOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitRepeatOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::RepeatOpContext* WhixyParser::repeatOp()
{
    RepeatOpContext* _localctx = _tracker.createInstance<RepeatOpContext>(_ctx, getState());
    enterRule(_localctx, 56, WhixyParser::RuleRepeatOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(433);
        match(WhixyParser::ASTERISK_ASTERISK);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AddOpContext ------------------------------------------------------------------

WhixyParser::AddOpContext::AddOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::AddOpContext::PLUS() { return getToken(WhixyParser::PLUS, 0); }

size_t WhixyParser::AddOpContext::getRuleIndex() const { return WhixyParser::RuleAddOp; }

std::any WhixyParser::AddOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAddOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AddOpContext* WhixyParser::addOp()
{
    AddOpContext* _localctx = _tracker.createInstance<AddOpContext>(_ctx, getState());
    enterRule(_localctx, 58, WhixyParser::RuleAddOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(435);
        match(WhixyParser::PLUS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- SubOpContext ------------------------------------------------------------------

WhixyParser::SubOpContext::SubOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::SubOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

size_t WhixyParser::SubOpContext::getRuleIndex() const { return WhixyParser::RuleSubOp; }

std::any WhixyParser::SubOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitSubOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::SubOpContext* WhixyParser::subOp()
{
    SubOpContext* _localctx = _tracker.createInstance<SubOpContext>(_ctx, getState());
    enterRule(_localctx, 60, WhixyParser::RuleSubOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(437);
        match(WhixyParser::MINUS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TimesOpContext ------------------------------------------------------------------

WhixyParser::TimesOpContext::TimesOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TimesOpContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

size_t WhixyParser::TimesOpContext::getRuleIndex() const { return WhixyParser::RuleTimesOp; }

std::any WhixyParser::TimesOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTimesOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TimesOpContext* WhixyParser::timesOp()
{
    TimesOpContext* _localctx = _tracker.createInstance<TimesOpContext>(_ctx, getState());
    enterRule(_localctx, 62, WhixyParser::RuleTimesOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(439);
        match(WhixyParser::ASTERISK);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- DivideOpContext ------------------------------------------------------------------

WhixyParser::DivideOpContext::DivideOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::DivideOpContext::SLASH() { return getToken(WhixyParser::SLASH, 0); }

size_t WhixyParser::DivideOpContext::getRuleIndex() const { return WhixyParser::RuleDivideOp; }

std::any WhixyParser::DivideOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDivideOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::DivideOpContext* WhixyParser::divideOp()
{
    DivideOpContext* _localctx = _tracker.createInstance<DivideOpContext>(_ctx, getState());
    enterRule(_localctx, 64, WhixyParser::RuleDivideOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(441);
        match(WhixyParser::SLASH);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LessThanOpContext ------------------------------------------------------------------

WhixyParser::LessThanOpContext::LessThanOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LessThanOpContext::LESSTHAN() { return getToken(WhixyParser::LESSTHAN, 0); }

size_t WhixyParser::LessThanOpContext::getRuleIndex() const { return WhixyParser::RuleLessThanOp; }

std::any WhixyParser::LessThanOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLessThanOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LessThanOpContext* WhixyParser::lessThanOp()
{
    LessThanOpContext* _localctx = _tracker.createInstance<LessThanOpContext>(_ctx, getState());
    enterRule(_localctx, 66, WhixyParser::RuleLessThanOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(443);
        match(WhixyParser::LESSTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GreaterThanOpContext ------------------------------------------------------------------

WhixyParser::GreaterThanOpContext::GreaterThanOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GreaterThanOpContext::GREATERTHAN() { return getToken(WhixyParser::GREATERTHAN, 0); }

size_t WhixyParser::GreaterThanOpContext::getRuleIndex() const { return WhixyParser::RuleGreaterThanOp; }

std::any WhixyParser::GreaterThanOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGreaterThanOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GreaterThanOpContext* WhixyParser::greaterThanOp()
{
    GreaterThanOpContext* _localctx = _tracker.createInstance<GreaterThanOpContext>(_ctx, getState());
    enterRule(_localctx, 68, WhixyParser::RuleGreaterThanOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(445);
        match(WhixyParser::GREATERTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LessThanOrEqualToOpContext ------------------------------------------------------------------

WhixyParser::LessThanOrEqualToOpContext::LessThanOrEqualToOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LessThanOrEqualToOpContext::LESSTHAN_EQUAL()
{
    return getToken(WhixyParser::LESSTHAN_EQUAL, 0);
}

size_t WhixyParser::LessThanOrEqualToOpContext::getRuleIndex() const { return WhixyParser::RuleLessThanOrEqualToOp; }

std::any WhixyParser::LessThanOrEqualToOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLessThanOrEqualToOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LessThanOrEqualToOpContext* WhixyParser::lessThanOrEqualToOp()
{
    LessThanOrEqualToOpContext* _localctx = _tracker.createInstance<LessThanOrEqualToOpContext>(_ctx, getState());
    enterRule(_localctx, 70, WhixyParser::RuleLessThanOrEqualToOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(447);
        match(WhixyParser::LESSTHAN_EQUAL);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- GreaterThanOrEqualToOpContext ------------------------------------------------------------------

WhixyParser::GreaterThanOrEqualToOpContext::GreaterThanOrEqualToOpContext(
    ParserRuleContext* parent, size_t invokingState
)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::GreaterThanOrEqualToOpContext::GREATERTHAN_EQUAL()
{
    return getToken(WhixyParser::GREATERTHAN_EQUAL, 0);
}

size_t WhixyParser::GreaterThanOrEqualToOpContext::getRuleIndex() const
{
    return WhixyParser::RuleGreaterThanOrEqualToOp;
}

std::any WhixyParser::GreaterThanOrEqualToOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitGreaterThanOrEqualToOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::GreaterThanOrEqualToOpContext* WhixyParser::greaterThanOrEqualToOp()
{
    GreaterThanOrEqualToOpContext* _localctx = _tracker.createInstance<GreaterThanOrEqualToOpContext>(_ctx, getState());
    enterRule(_localctx, 72, WhixyParser::RuleGreaterThanOrEqualToOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(449);
        match(WhixyParser::GREATERTHAN_EQUAL);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WrappingAddOpContext ------------------------------------------------------------------

WhixyParser::WrappingAddOpContext::WrappingAddOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WrappingAddOpContext::PLUS_PERCENT() { return getToken(WhixyParser::PLUS_PERCENT, 0); }

size_t WhixyParser::WrappingAddOpContext::getRuleIndex() const { return WhixyParser::RuleWrappingAddOp; }

std::any WhixyParser::WrappingAddOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingAddOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WrappingAddOpContext* WhixyParser::wrappingAddOp()
{
    WrappingAddOpContext* _localctx = _tracker.createInstance<WrappingAddOpContext>(_ctx, getState());
    enterRule(_localctx, 74, WhixyParser::RuleWrappingAddOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(451);
        match(WhixyParser::PLUS_PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WrappingSubOpContext ------------------------------------------------------------------

WhixyParser::WrappingSubOpContext::WrappingSubOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WrappingSubOpContext::MINUS_PERCENT()
{
    return getToken(WhixyParser::MINUS_PERCENT, 0);
}

size_t WhixyParser::WrappingSubOpContext::getRuleIndex() const { return WhixyParser::RuleWrappingSubOp; }

std::any WhixyParser::WrappingSubOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingSubOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WrappingSubOpContext* WhixyParser::wrappingSubOp()
{
    WrappingSubOpContext* _localctx = _tracker.createInstance<WrappingSubOpContext>(_ctx, getState());
    enterRule(_localctx, 76, WhixyParser::RuleWrappingSubOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(453);
        match(WhixyParser::MINUS_PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WrappingTimesOpContext ------------------------------------------------------------------

WhixyParser::WrappingTimesOpContext::WrappingTimesOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WrappingTimesOpContext::ASTERISK_PERCENT()
{
    return getToken(WhixyParser::ASTERISK_PERCENT, 0);
}

size_t WhixyParser::WrappingTimesOpContext::getRuleIndex() const { return WhixyParser::RuleWrappingTimesOp; }

std::any WhixyParser::WrappingTimesOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWrappingTimesOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WrappingTimesOpContext* WhixyParser::wrappingTimesOp()
{
    WrappingTimesOpContext* _localctx = _tracker.createInstance<WrappingTimesOpContext>(_ctx, getState());
    enterRule(_localctx, 78, WhixyParser::RuleWrappingTimesOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(455);
        match(WhixyParser::ASTERISK_PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LeftShiftOpContext ------------------------------------------------------------------

WhixyParser::LeftShiftOpContext::LeftShiftOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LeftShiftOpContext::LESSTHAN_LESSTHAN()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN, 0);
}

size_t WhixyParser::LeftShiftOpContext::getRuleIndex() const { return WhixyParser::RuleLeftShiftOp; }

std::any WhixyParser::LeftShiftOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLeftShiftOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LeftShiftOpContext* WhixyParser::leftShiftOp()
{
    LeftShiftOpContext* _localctx = _tracker.createInstance<LeftShiftOpContext>(_ctx, getState());
    enterRule(_localctx, 80, WhixyParser::RuleLeftShiftOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(457);
        match(WhixyParser::LESSTHAN_LESSTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RightShiftOpContext ------------------------------------------------------------------

WhixyParser::RightShiftOpContext::RightShiftOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::RightShiftOpContext::GREATERTHAN_GREATERTHAN()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN, 0);
}

size_t WhixyParser::RightShiftOpContext::getRuleIndex() const { return WhixyParser::RuleRightShiftOp; }

std::any WhixyParser::RightShiftOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitRightShiftOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::RightShiftOpContext* WhixyParser::rightShiftOp()
{
    RightShiftOpContext* _localctx = _tracker.createInstance<RightShiftOpContext>(_ctx, getState());
    enterRule(_localctx, 82, WhixyParser::RuleRightShiftOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(459);
        match(WhixyParser::GREATERTHAN_GREATERTHAN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LeftRotateOpContext ------------------------------------------------------------------

WhixyParser::LeftRotateOpContext::LeftRotateOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LeftRotateOpContext::LESSTHAN_LESSTHAN_PERCENT()
{
    return getToken(WhixyParser::LESSTHAN_LESSTHAN_PERCENT, 0);
}

size_t WhixyParser::LeftRotateOpContext::getRuleIndex() const { return WhixyParser::RuleLeftRotateOp; }

std::any WhixyParser::LeftRotateOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLeftRotateOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LeftRotateOpContext* WhixyParser::leftRotateOp()
{
    LeftRotateOpContext* _localctx = _tracker.createInstance<LeftRotateOpContext>(_ctx, getState());
    enterRule(_localctx, 84, WhixyParser::RuleLeftRotateOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(461);
        match(WhixyParser::LESSTHAN_LESSTHAN_PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RightRotateOpContext ------------------------------------------------------------------

WhixyParser::RightRotateOpContext::RightRotateOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::RightRotateOpContext::GREATERTHAN_GREATERTHAN_PERCENT()
{
    return getToken(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT, 0);
}

size_t WhixyParser::RightRotateOpContext::getRuleIndex() const { return WhixyParser::RuleRightRotateOp; }

std::any WhixyParser::RightRotateOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitRightRotateOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::RightRotateOpContext* WhixyParser::rightRotateOp()
{
    RightRotateOpContext* _localctx = _tracker.createInstance<RightRotateOpContext>(_ctx, getState());
    enterRule(_localctx, 86, WhixyParser::RuleRightRotateOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(463);
        match(WhixyParser::GREATERTHAN_GREATERTHAN_PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- EqualityOpContext ------------------------------------------------------------------

WhixyParser::EqualityOpContext::EqualityOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::EqualityOpContext::EQUAL_EQUAL() { return getToken(WhixyParser::EQUAL_EQUAL, 0); }

size_t WhixyParser::EqualityOpContext::getRuleIndex() const { return WhixyParser::RuleEqualityOp; }

std::any WhixyParser::EqualityOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitEqualityOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::EqualityOpContext* WhixyParser::equalityOp()
{
    EqualityOpContext* _localctx = _tracker.createInstance<EqualityOpContext>(_ctx, getState());
    enterRule(_localctx, 88, WhixyParser::RuleEqualityOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(465);
        match(WhixyParser::EQUAL_EQUAL);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- InequalityOpContext ------------------------------------------------------------------

WhixyParser::InequalityOpContext::InequalityOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::InequalityOpContext::TILDE_EQUAL() { return getToken(WhixyParser::TILDE_EQUAL, 0); }

size_t WhixyParser::InequalityOpContext::getRuleIndex() const { return WhixyParser::RuleInequalityOp; }

std::any WhixyParser::InequalityOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitInequalityOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::InequalityOpContext* WhixyParser::inequalityOp()
{
    InequalityOpContext* _localctx = _tracker.createInstance<InequalityOpContext>(_ctx, getState());
    enterRule(_localctx, 90, WhixyParser::RuleInequalityOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(467);
        match(WhixyParser::TILDE_EQUAL);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LogicalAndOpContext ------------------------------------------------------------------

WhixyParser::LogicalAndOpContext::LogicalAndOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LogicalAndOpContext::AND() { return getToken(WhixyParser::AND, 0); }

size_t WhixyParser::LogicalAndOpContext::getRuleIndex() const { return WhixyParser::RuleLogicalAndOp; }

std::any WhixyParser::LogicalAndOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLogicalAndOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LogicalAndOpContext* WhixyParser::logicalAndOp()
{
    LogicalAndOpContext* _localctx = _tracker.createInstance<LogicalAndOpContext>(_ctx, getState());
    enterRule(_localctx, 92, WhixyParser::RuleLogicalAndOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(469);
        match(WhixyParser::AND);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- LogicalOrOpContext ------------------------------------------------------------------

WhixyParser::LogicalOrOpContext::LogicalOrOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::LogicalOrOpContext::OR() { return getToken(WhixyParser::OR, 0); }

size_t WhixyParser::LogicalOrOpContext::getRuleIndex() const { return WhixyParser::RuleLogicalOrOp; }

std::any WhixyParser::LogicalOrOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitLogicalOrOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::LogicalOrOpContext* WhixyParser::logicalOrOp()
{
    LogicalOrOpContext* _localctx = _tracker.createInstance<LogicalOrOpContext>(_ctx, getState());
    enterRule(_localctx, 94, WhixyParser::RuleLogicalOrOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(471);
        match(WhixyParser::OR);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BitwiseAndOpContext ------------------------------------------------------------------

WhixyParser::BitwiseAndOpContext::BitwiseAndOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::BitwiseAndOpContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

size_t WhixyParser::BitwiseAndOpContext::getRuleIndex() const { return WhixyParser::RuleBitwiseAndOp; }

std::any WhixyParser::BitwiseAndOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBitwiseAndOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BitwiseAndOpContext* WhixyParser::bitwiseAndOp()
{
    BitwiseAndOpContext* _localctx = _tracker.createInstance<BitwiseAndOpContext>(_ctx, getState());
    enterRule(_localctx, 96, WhixyParser::RuleBitwiseAndOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(473);
        match(WhixyParser::AMPERSAND);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BitwiseOrOpContext ------------------------------------------------------------------

WhixyParser::BitwiseOrOpContext::BitwiseOrOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::BitwiseOrOpContext::PIPE() { return getToken(WhixyParser::PIPE, 0); }

size_t WhixyParser::BitwiseOrOpContext::getRuleIndex() const { return WhixyParser::RuleBitwiseOrOp; }

std::any WhixyParser::BitwiseOrOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBitwiseOrOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BitwiseOrOpContext* WhixyParser::bitwiseOrOp()
{
    BitwiseOrOpContext* _localctx = _tracker.createInstance<BitwiseOrOpContext>(_ctx, getState());
    enterRule(_localctx, 98, WhixyParser::RuleBitwiseOrOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(475);
        match(WhixyParser::PIPE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ModOpContext ------------------------------------------------------------------

WhixyParser::ModOpContext::ModOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ModOpContext::PERCENT() { return getToken(WhixyParser::PERCENT, 0); }

size_t WhixyParser::ModOpContext::getRuleIndex() const { return WhixyParser::RuleModOp; }

std::any WhixyParser::ModOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitModOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ModOpContext* WhixyParser::modOp()
{
    ModOpContext* _localctx = _tracker.createInstance<ModOpContext>(_ctx, getState());
    enterRule(_localctx, 100, WhixyParser::RuleModOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(477);
        match(WhixyParser::PERCENT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- XorOpContext ------------------------------------------------------------------

WhixyParser::XorOpContext::XorOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::XorOpContext::CARROT() { return getToken(WhixyParser::CARROT, 0); }

size_t WhixyParser::XorOpContext::getRuleIndex() const { return WhixyParser::RuleXorOp; }

std::any WhixyParser::XorOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitXorOp(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::XorOpContext* WhixyParser::xorOp()
{
    XorOpContext* _localctx = _tracker.createInstance<XorOpContext>(_ctx, getState());
    enterRule(_localctx, 102, WhixyParser::RuleXorOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(479);
        match(WhixyParser::CARROT);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostExprContext ------------------------------------------------------------------

WhixyParser::PostExprContext::PostExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::AtomContext* WhixyParser::PostExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::PostOpContext* WhixyParser::PostExprContext::postOp()
{
    return getRuleContext<WhixyParser::PostOpContext>(0);
}

size_t WhixyParser::PostExprContext::getRuleIndex() const { return WhixyParser::RulePostExpr; }

std::any WhixyParser::PostExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPostExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PostExprContext* WhixyParser::postExpr()
{
    PostExprContext* _localctx = _tracker.createInstance<PostExprContext>(_ctx, getState());
    enterRule(_localctx, 104, WhixyParser::RulePostExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(481);
        atom();
        setState(482);
        postOp();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PostOpContext ------------------------------------------------------------------

WhixyParser::PostOpContext::PostOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PostOpContext::getRuleIndex() const { return WhixyParser::RulePostOp; }

void WhixyParser::PostOpContext::copyFrom(PostOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- AccessTypeOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessTypeOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AccessTypeOpContext::TYPE() { return getToken(WhixyParser::TYPE, 0); }

WhixyParser::AccessTypeOpContext::AccessTypeOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AccessTypeOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAccessTypeOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- TryOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::TryOpContext::EXCLAMATION() { return getToken(WhixyParser::EXCLAMATION, 0); }

WhixyParser::TryOpContext::TryOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::TryOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTryOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AccessLengthOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessLengthOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AccessLengthOpContext::LEN() { return getToken(WhixyParser::LEN, 0); }

WhixyParser::AccessLengthOpContext::AccessLengthOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AccessLengthOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAccessLengthOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AddressOfOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AddressOfOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::AddressOfOpContext::AMPERSAND() { return getToken(WhixyParser::AMPERSAND, 0); }

WhixyParser::AddressOfOpContext::AddressOfOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AddressOfOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAddressOfOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AccessIndexOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessIndexOpContext::OPENBRACKET() { return getToken(WhixyParser::OPENBRACKET, 0); }

WhixyParser::ExprContext* WhixyParser::AccessIndexOpContext::expr()
{
    return getRuleContext<WhixyParser::ExprContext>(0);
}

tree::TerminalNode* WhixyParser::AccessIndexOpContext::CLOSEDBRACKET()
{
    return getToken(WhixyParser::CLOSEDBRACKET, 0);
}

std::vector<tree::TerminalNode*> WhixyParser::AccessIndexOpContext::NEWLINE()
{
    return getTokens(WhixyParser::NEWLINE);
}

tree::TerminalNode* WhixyParser::AccessIndexOpContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

WhixyParser::AccessIndexOpContext::AccessIndexOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AccessIndexOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAccessIndexOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- UnwrapOptionalOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::UnwrapOptionalOpContext::QUESTION() { return getToken(WhixyParser::QUESTION, 0); }

WhixyParser::UnwrapOptionalOpContext::UnwrapOptionalOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::UnwrapOptionalOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitUnwrapOptionalOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- AccessMemberOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::AccessMemberOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

WhixyParser::AtomContext* WhixyParser::AccessMemberOpContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

WhixyParser::AccessMemberOpContext::AccessMemberOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::AccessMemberOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAccessMemberOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- DereferencePointerOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DereferencePointerOpContext::DOT() { return getToken(WhixyParser::DOT, 0); }

tree::TerminalNode* WhixyParser::DereferencePointerOpContext::ASTERISK() { return getToken(WhixyParser::ASTERISK, 0); }

WhixyParser::DereferencePointerOpContext::DereferencePointerOpContext(PostOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::DereferencePointerOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDereferencePointerOp(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::PostOpContext* WhixyParser::postOp()
{
    PostOpContext* _localctx = _tracker.createInstance<PostOpContext>(_ctx, getState());
    enterRule(_localctx, 106, WhixyParser::RulePostOp);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(506);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
        case 1: {
            _localctx = _tracker.createInstance<WhixyParser::AccessMemberOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(484);
            match(WhixyParser::DOT);
            setState(485);
            atom();
            break;
        }

        case 2: {
            _localctx = _tracker.createInstance<WhixyParser::AccessIndexOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(486);
            match(WhixyParser::OPENBRACKET);
            setState(488);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
            case 1: {
                setState(487);
                match(WhixyParser::NEWLINE);
                break;
            }

            default: break;
            }
            setState(490);
            expr();
            setState(492);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == WhixyParser::NEWLINE) {
                setState(491);
                match(WhixyParser::NEWLINE);
            }
            setState(494);
            match(WhixyParser::CLOSEDBRACKET);
            break;
        }

        case 3: {
            _localctx = _tracker.createInstance<WhixyParser::AccessTypeOpContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(496);
            match(WhixyParser::DOT);
            setState(497);
            match(WhixyParser::TYPE);
            break;
        }

        case 4: {
            _localctx = _tracker.createInstance<WhixyParser::AccessLengthOpContext>(_localctx);
            enterOuterAlt(_localctx, 4);
            setState(498);
            match(WhixyParser::DOT);
            setState(499);
            match(WhixyParser::LEN);
            break;
        }

        case 5: {
            _localctx = _tracker.createInstance<WhixyParser::DereferencePointerOpContext>(_localctx);
            enterOuterAlt(_localctx, 5);
            setState(500);
            match(WhixyParser::DOT);
            setState(501);
            match(WhixyParser::ASTERISK);
            break;
        }

        case 6: {
            _localctx = _tracker.createInstance<WhixyParser::AddressOfOpContext>(_localctx);
            enterOuterAlt(_localctx, 6);
            setState(502);
            match(WhixyParser::DOT);
            setState(503);
            match(WhixyParser::AMPERSAND);
            break;
        }

        case 7: {
            _localctx = _tracker.createInstance<WhixyParser::UnwrapOptionalOpContext>(_localctx);
            enterOuterAlt(_localctx, 7);
            setState(504);
            match(WhixyParser::QUESTION);
            break;
        }

        case 8: {
            _localctx = _tracker.createInstance<WhixyParser::TryOpContext>(_localctx);
            enterOuterAlt(_localctx, 8);
            setState(505);
            match(WhixyParser::EXCLAMATION);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreExprContext ------------------------------------------------------------------

WhixyParser::PreExprContext::PreExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::PreOpContext* WhixyParser::PreExprContext::preOp() { return getRuleContext<WhixyParser::PreOpContext>(0); }

WhixyParser::AtomContext* WhixyParser::PreExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

size_t WhixyParser::PreExprContext::getRuleIndex() const { return WhixyParser::RulePreExpr; }

std::any WhixyParser::PreExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPreExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::PreExprContext* WhixyParser::preExpr()
{
    PreExprContext* _localctx = _tracker.createInstance<PreExprContext>(_ctx, getState());
    enterRule(_localctx, 108, WhixyParser::RulePreExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(508);
        preOp();
        setState(509);
        atom();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- PreOpContext ------------------------------------------------------------------

WhixyParser::PreOpContext::PreOpContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::PreOpContext::getRuleIndex() const { return WhixyParser::RulePreOp; }

void WhixyParser::PreOpContext::copyFrom(PreOpContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- NegateOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NegateOpContext::MINUS() { return getToken(WhixyParser::MINUS, 0); }

WhixyParser::NegateOpContext::NegateOpContext(PreOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::NegateOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitNegateOp(this);
    else
        return visitor->visitChildren(this);
}
//----------------- NotOpContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::NotOpContext::TILDE() { return getToken(WhixyParser::TILDE, 0); }

WhixyParser::NotOpContext::NotOpContext(PreOpContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::NotOpContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitNotOp(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::PreOpContext* WhixyParser::preOp()
{
    PreOpContext* _localctx = _tracker.createInstance<PreOpContext>(_ctx, getState());
    enterRule(_localctx, 110, WhixyParser::RulePreOp);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(513);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::TILDE: {
            _localctx = _tracker.createInstance<WhixyParser::NotOpContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(511);
            match(WhixyParser::TILDE);
            break;
        }

        case WhixyParser::MINUS: {
            _localctx = _tracker.createInstance<WhixyParser::NegateOpContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(512);
            match(WhixyParser::MINUS);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- IfExprContext ------------------------------------------------------------------

WhixyParser::IfExprContext::IfExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::IfExprContext::IF() { return getToken(WhixyParser::IF, 0); }

std::vector<WhixyParser::AtomContext*> WhixyParser::IfExprContext::atom()
{
    return getRuleContexts<WhixyParser::AtomContext>();
}

WhixyParser::AtomContext* WhixyParser::IfExprContext::atom(size_t i)
{
    return getRuleContext<WhixyParser::AtomContext>(i);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::IfExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::IfExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<tree::TerminalNode*> WhixyParser::IfExprContext::ELSEIF() { return getTokens(WhixyParser::ELSEIF); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSEIF(size_t i) { return getToken(WhixyParser::ELSEIF, i); }

tree::TerminalNode* WhixyParser::IfExprContext::ELSE() { return getToken(WhixyParser::ELSE, 0); }

size_t WhixyParser::IfExprContext::getRuleIndex() const { return WhixyParser::RuleIfExpr; }

std::any WhixyParser::IfExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitIfExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::IfExprContext* WhixyParser::ifExpr()
{
    IfExprContext* _localctx = _tracker.createInstance<IfExprContext>(_ctx, getState());
    enterRule(_localctx, 112, WhixyParser::RuleIfExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(515);
        match(WhixyParser::IF);
        setState(516);
        atom();
        setState(517);
        expr();
        setState(524);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
                setState(518);
                match(WhixyParser::ELSEIF);
                setState(519);
                atom();
                setState(520);
                expr();
            }
            setState(526);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
        }
        setState(529);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
        case 1: {
            setState(527);
            match(WhixyParser::ELSE);
            setState(528);
            expr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- WhereExprContext ------------------------------------------------------------------

WhixyParser::WhereExprContext::WhereExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::WhereExprContext::WHERE() { return getToken(WhixyParser::WHERE, 0); }

WhixyParser::AtomContext* WhixyParser::WhereExprContext::atom() { return getRuleContext<WhixyParser::AtomContext>(0); }

WhixyParser::ComparisonOpContext* WhixyParser::WhereExprContext::comparisonOp()
{
    return getRuleContext<WhixyParser::ComparisonOpContext>(0);
}

WhixyParser::CaseExprBlockContext* WhixyParser::WhereExprContext::caseExprBlock()
{
    return getRuleContext<WhixyParser::CaseExprBlockContext>(0);
}

size_t WhixyParser::WhereExprContext::getRuleIndex() const { return WhixyParser::RuleWhereExpr; }

std::any WhixyParser::WhereExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitWhereExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::WhereExprContext* WhixyParser::whereExpr()
{
    WhereExprContext* _localctx = _tracker.createInstance<WhereExprContext>(_ctx, getState());
    enterRule(_localctx, 114, WhixyParser::RuleWhereExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(531);
        match(WhixyParser::WHERE);
        setState(532);
        atom();
        setState(533);
        comparisonOp();
        setState(534);
        caseExprBlock();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CaseExprBlockContext ------------------------------------------------------------------

WhixyParser::CaseExprBlockContext::CaseExprBlockContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::CaseExprBlockContext::getRuleIndex() const { return WhixyParser::RuleCaseExprBlock; }

std::any WhixyParser::CaseExprBlockContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCaseExprBlock(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CaseExprBlockContext* WhixyParser::caseExprBlock()
{
    CaseExprBlockContext* _localctx = _tracker.createInstance<CaseExprBlockContext>(_ctx, getState());
    enterRule(_localctx, 116, WhixyParser::RuleCaseExprBlock);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- ComptExprContext ------------------------------------------------------------------

WhixyParser::ComptExprContext::ComptExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::ComptExprContext::COMPT() { return getToken(WhixyParser::COMPT, 0); }

WhixyParser::ExprContext* WhixyParser::ComptExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

size_t WhixyParser::ComptExprContext::getRuleIndex() const { return WhixyParser::RuleComptExpr; }

std::any WhixyParser::ComptExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitComptExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::ComptExprContext* WhixyParser::comptExpr()
{
    ComptExprContext* _localctx = _tracker.createInstance<ComptExprContext>(_ctx, getState());
    enterRule(_localctx, 118, WhixyParser::RuleComptExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(538);
        match(WhixyParser::COMPT);
        setState(539);
        expr();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- RoutineExprContext ------------------------------------------------------------------

WhixyParser::RoutineExprContext::RoutineExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::RoutineExprContext::getRuleIndex() const { return WhixyParser::RuleRoutineExpr; }

void WhixyParser::RoutineExprContext::copyFrom(RoutineExprContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- InlineRoutineExprContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::InlineRoutineExprContext::INLINE() { return getToken(WhixyParser::INLINE, 0); }

WhixyParser::AtomContext* WhixyParser::InlineRoutineExprContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::InlineRoutineExprContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::InlineRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::InlineRoutineExprContext::InlineRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::InlineRoutineExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitInlineRoutineExpr(this);
    else
        return visitor->visitChildren(this);
}
//----------------- PlainRoutineExprContext ------------------------------------------------------------------

WhixyParser::AtomContext* WhixyParser::PlainRoutineExprContext::atom()
{
    return getRuleContext<WhixyParser::AtomContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::PlainRoutineExprContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

WhixyParser::BlockStmtContext* WhixyParser::PlainRoutineExprContext::blockStmt()
{
    return getRuleContext<WhixyParser::BlockStmtContext>(0);
}

WhixyParser::PlainRoutineExprContext::PlainRoutineExprContext(RoutineExprContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::PlainRoutineExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitPlainRoutineExpr(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::RoutineExprContext* WhixyParser::routineExpr()
{
    RoutineExprContext* _localctx = _tracker.createInstance<RoutineExprContext>(_ctx, getState());
    enterRule(_localctx, 120, WhixyParser::RuleRoutineExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(550);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::NEWLINE:
        case WhixyParser::OPENPARENTHESIS:
        case WhixyParser::OPENBRACE:
        case WhixyParser::TOKEN: {
            _localctx = _tracker.createInstance<WhixyParser::PlainRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(541);
            atom();
            setState(542);
            structExpr();
            setState(543);
            blockStmt();
            break;
        }

        case WhixyParser::INLINE: {
            _localctx = _tracker.createInstance<WhixyParser::InlineRoutineExprContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(545);
            match(WhixyParser::INLINE);
            setState(546);
            atom();
            setState(547);
            structExpr();
            setState(548);
            blockStmt();
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

WhixyParser::StringContext::StringContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

size_t WhixyParser::StringContext::getRuleIndex() const { return WhixyParser::RuleString; }

void WhixyParser::StringContext::copyFrom(StringContext* ctx) { ParserRuleContext::copyFrom(ctx); }

//----------------- BSStringContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::BSStringContext::BACKSLASHSTRING()
{
    return getToken(WhixyParser::BACKSLASHSTRING, 0);
}

WhixyParser::BSStringContext::BSStringContext(StringContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::BSStringContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBSString(this);
    else
        return visitor->visitChildren(this);
}
//----------------- DQStringContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::DQStringContext::DOUBLEQUOTESTRING()
{
    return getToken(WhixyParser::DOUBLEQUOTESTRING, 0);
}

WhixyParser::DQStringContext::DQStringContext(StringContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::DQStringContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitDQString(this);
    else
        return visitor->visitChildren(this);
}
//----------------- BTStringContext ------------------------------------------------------------------

tree::TerminalNode* WhixyParser::BTStringContext::BACKTICKSTRING() { return getToken(WhixyParser::BACKTICKSTRING, 0); }

WhixyParser::BTStringContext::BTStringContext(StringContext* ctx) { copyFrom(ctx); }

std::any WhixyParser::BTStringContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBTString(this);
    else
        return visitor->visitChildren(this);
}
WhixyParser::StringContext* WhixyParser::string()
{
    StringContext* _localctx = _tracker.createInstance<StringContext>(_ctx, getState());
    enterRule(_localctx, 122, WhixyParser::RuleString);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(555);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
        case WhixyParser::DOUBLEQUOTESTRING: {
            _localctx = _tracker.createInstance<WhixyParser::DQStringContext>(_localctx);
            enterOuterAlt(_localctx, 1);
            setState(552);
            match(WhixyParser::DOUBLEQUOTESTRING);
            break;
        }

        case WhixyParser::BACKSLASHSTRING: {
            _localctx = _tracker.createInstance<WhixyParser::BSStringContext>(_localctx);
            enterOuterAlt(_localctx, 2);
            setState(553);
            match(WhixyParser::BACKSLASHSTRING);
            break;
        }

        case WhixyParser::BACKTICKSTRING: {
            _localctx = _tracker.createInstance<WhixyParser::BTStringContext>(_localctx);
            enterOuterAlt(_localctx, 3);
            setState(554);
            match(WhixyParser::BACKTICKSTRING);
            break;
        }

        default: throw NoViableAltException(this);
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

WhixyParser::AtomContext::AtomContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::TokenContext* WhixyParser::AtomContext::token() { return getRuleContext<WhixyParser::TokenContext>(0); }

WhixyParser::TupleExprContext* WhixyParser::AtomContext::tupleExpr()
{
    return getRuleContext<WhixyParser::TupleExprContext>(0);
}

WhixyParser::BlockExprContext* WhixyParser::AtomContext::blockExpr()
{
    return getRuleContext<WhixyParser::BlockExprContext>(0);
}

WhixyParser::StructExprContext* WhixyParser::AtomContext::structExpr()
{
    return getRuleContext<WhixyParser::StructExprContext>(0);
}

size_t WhixyParser::AtomContext::getRuleIndex() const { return WhixyParser::RuleAtom; }

std::any WhixyParser::AtomContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitAtom(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::AtomContext* WhixyParser::atom()
{
    AtomContext* _localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
    enterRule(_localctx, 124, WhixyParser::RuleAtom);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        setState(561);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
        case 1: {
            enterOuterAlt(_localctx, 1);
            setState(557);
            token();
            break;
        }

        case 2: {
            enterOuterAlt(_localctx, 2);
            setState(558);
            tupleExpr();
            break;
        }

        case 3: {
            enterOuterAlt(_localctx, 3);
            setState(559);
            blockExpr();
            break;
        }

        case 4: {
            enterOuterAlt(_localctx, 4);
            setState(560);
            structExpr();
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TokenContext ------------------------------------------------------------------

WhixyParser::TokenContext::TokenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::TokenContext::TOKEN() { return getToken(WhixyParser::TOKEN, 0); }

size_t WhixyParser::TokenContext::getRuleIndex() const { return WhixyParser::RuleToken; }

std::any WhixyParser::TokenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitToken(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TokenContext* WhixyParser::token()
{
    TokenContext* _localctx = _tracker.createInstance<TokenContext>(_ctx, getState());
    enterRule(_localctx, 126, WhixyParser::RuleToken);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(563);
        match(WhixyParser::TOKEN);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- TupleExprContext ------------------------------------------------------------------

WhixyParser::TupleExprContext::TupleExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::TupleExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::TupleExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

std::vector<WhixyParser::ExprContext*> WhixyParser::TupleExprContext::expr()
{
    return getRuleContexts<WhixyParser::ExprContext>();
}

WhixyParser::ExprContext* WhixyParser::TupleExprContext::expr(size_t i)
{
    return getRuleContext<WhixyParser::ExprContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::TupleExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::TupleExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::TupleExprContext::getRuleIndex() const { return WhixyParser::RuleTupleExpr; }

std::any WhixyParser::TupleExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitTupleExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::TupleExprContext* WhixyParser::tupleExpr()
{
    TupleExprContext* _localctx = _tracker.createInstance<TupleExprContext>(_ctx, getState());
    enterRule(_localctx, 128, WhixyParser::RuleTupleExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(565);
        oParen();
        setState(575);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
        case 1: {
            setState(566);
            expr();
            setState(572);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(567);
                    exprSep();
                    setState(568);
                    expr();
                }
                setState(574);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(577);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- BlockExprContext ------------------------------------------------------------------

WhixyParser::BlockExprContext::BlockExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OParenContext* WhixyParser::BlockExprContext::oParen()
{
    return getRuleContext<WhixyParser::OParenContext>(0);
}

WhixyParser::CParenContext* WhixyParser::BlockExprContext::cParen()
{
    return getRuleContext<WhixyParser::CParenContext>(0);
}

WhixyParser::ExprContext* WhixyParser::BlockExprContext::expr() { return getRuleContext<WhixyParser::ExprContext>(0); }

std::vector<WhixyParser::StmtContext*> WhixyParser::BlockExprContext::stmt()
{
    return getRuleContexts<WhixyParser::StmtContext>();
}

WhixyParser::StmtContext* WhixyParser::BlockExprContext::stmt(size_t i)
{
    return getRuleContext<WhixyParser::StmtContext>(i);
}

std::vector<WhixyParser::StmtSepContext*> WhixyParser::BlockExprContext::stmtSep()
{
    return getRuleContexts<WhixyParser::StmtSepContext>();
}

WhixyParser::StmtSepContext* WhixyParser::BlockExprContext::stmtSep(size_t i)
{
    return getRuleContext<WhixyParser::StmtSepContext>(i);
}

size_t WhixyParser::BlockExprContext::getRuleIndex() const { return WhixyParser::RuleBlockExpr; }

std::any WhixyParser::BlockExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitBlockExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::BlockExprContext* WhixyParser::blockExpr()
{
    BlockExprContext* _localctx = _tracker.createInstance<BlockExprContext>(_ctx, getState());
    enterRule(_localctx, 130, WhixyParser::RuleBlockExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(579);
        oParen();
        setState(594);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
        case 1: {
            setState(591);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
            case 1: {
                setState(580);
                stmt();
                setState(586);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
                while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                    if (alt == 1) {
                        setState(581);
                        stmtSep();
                        setState(582);
                        stmt();
                    }
                    setState(588);
                    _errHandler->sync(this);
                    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
                }
                setState(589);
                stmtSep();
                break;
            }

            default: break;
            }
            setState(593);
            expr();
            break;
        }

        default: break;
        }
        setState(596);
        cParen();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- StructExprContext ------------------------------------------------------------------

WhixyParser::StructExprContext::StructExprContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

WhixyParser::OBraceContext* WhixyParser::StructExprContext::oBrace()
{
    return getRuleContext<WhixyParser::OBraceContext>(0);
}

WhixyParser::CBraceContext* WhixyParser::StructExprContext::cBrace()
{
    return getRuleContext<WhixyParser::CBraceContext>(0);
}

std::vector<WhixyParser::FieldContext*> WhixyParser::StructExprContext::field()
{
    return getRuleContexts<WhixyParser::FieldContext>();
}

WhixyParser::FieldContext* WhixyParser::StructExprContext::field(size_t i)
{
    return getRuleContext<WhixyParser::FieldContext>(i);
}

std::vector<WhixyParser::ExprSepContext*> WhixyParser::StructExprContext::exprSep()
{
    return getRuleContexts<WhixyParser::ExprSepContext>();
}

WhixyParser::ExprSepContext* WhixyParser::StructExprContext::exprSep(size_t i)
{
    return getRuleContext<WhixyParser::ExprSepContext>(i);
}

size_t WhixyParser::StructExprContext::getRuleIndex() const { return WhixyParser::RuleStructExpr; }

std::any WhixyParser::StructExprContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitStructExpr(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::StructExprContext* WhixyParser::structExpr()
{
    StructExprContext* _localctx = _tracker.createInstance<StructExprContext>(_ctx, getState());
    enterRule(_localctx, 132, WhixyParser::RuleStructExpr);

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        size_t alt;
        enterOuterAlt(_localctx, 1);
        setState(598);
        oBrace();
        setState(608);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
        case 1: {
            setState(599);
            field();
            setState(605);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
                if (alt == 1) {
                    setState(600);
                    exprSep();
                    setState(601);
                    field();
                }
                setState(607);
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
            }
            break;
        }

        default: break;
        }
        setState(610);
        cBrace();

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OParenContext ------------------------------------------------------------------

WhixyParser::OParenContext::OParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OParenContext::OPENPARENTHESIS() { return getToken(WhixyParser::OPENPARENTHESIS, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OParenContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OParenContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OParenContext::getRuleIndex() const { return WhixyParser::RuleOParen; }

std::any WhixyParser::OParenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOParen(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OParenContext* WhixyParser::oParen()
{
    OParenContext* _localctx = _tracker.createInstance<OParenContext>(_ctx, getState());
    enterRule(_localctx, 134, WhixyParser::RuleOParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(613);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(612);
            match(WhixyParser::NEWLINE);
        }
        setState(615);
        match(WhixyParser::OPENPARENTHESIS);
        setState(617);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
        case 1: {
            setState(616);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CParenContext ------------------------------------------------------------------

WhixyParser::CParenContext::CParenContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CParenContext::CLOSEDPARENTHESIS()
{
    return getToken(WhixyParser::CLOSEDPARENTHESIS, 0);
}

tree::TerminalNode* WhixyParser::CParenContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CParenContext::getRuleIndex() const { return WhixyParser::RuleCParen; }

std::any WhixyParser::CParenContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCParen(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CParenContext* WhixyParser::cParen()
{
    CParenContext* _localctx = _tracker.createInstance<CParenContext>(_ctx, getState());
    enterRule(_localctx, 136, WhixyParser::RuleCParen);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(620);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(619);
            match(WhixyParser::NEWLINE);
        }
        setState(622);
        match(WhixyParser::CLOSEDPARENTHESIS);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- OBraceContext ------------------------------------------------------------------

WhixyParser::OBraceContext::OBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::OBraceContext::OPENBRACE() { return getToken(WhixyParser::OPENBRACE, 0); }

std::vector<tree::TerminalNode*> WhixyParser::OBraceContext::NEWLINE() { return getTokens(WhixyParser::NEWLINE); }

tree::TerminalNode* WhixyParser::OBraceContext::NEWLINE(size_t i) { return getToken(WhixyParser::NEWLINE, i); }

size_t WhixyParser::OBraceContext::getRuleIndex() const { return WhixyParser::RuleOBrace; }

std::any WhixyParser::OBraceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitOBrace(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::OBraceContext* WhixyParser::oBrace()
{
    OBraceContext* _localctx = _tracker.createInstance<OBraceContext>(_ctx, getState());
    enterRule(_localctx, 138, WhixyParser::RuleOBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(624);
            match(WhixyParser::NEWLINE);
        }
        setState(627);
        match(WhixyParser::OPENBRACE);
        setState(629);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
        case 1: {
            setState(628);
            match(WhixyParser::NEWLINE);
            break;
        }

        default: break;
        }

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

//----------------- CBraceContext ------------------------------------------------------------------

WhixyParser::CBraceContext::CBraceContext(ParserRuleContext* parent, size_t invokingState)
    : ParserRuleContext(parent, invokingState)
{}

tree::TerminalNode* WhixyParser::CBraceContext::CLOSEDBRACE() { return getToken(WhixyParser::CLOSEDBRACE, 0); }

tree::TerminalNode* WhixyParser::CBraceContext::NEWLINE() { return getToken(WhixyParser::NEWLINE, 0); }

size_t WhixyParser::CBraceContext::getRuleIndex() const { return WhixyParser::RuleCBrace; }

std::any WhixyParser::CBraceContext::accept(tree::ParseTreeVisitor* visitor)
{
    if (auto parserVisitor = dynamic_cast<WhixyParserVisitor*>(visitor))
        return parserVisitor->visitCBrace(this);
    else
        return visitor->visitChildren(this);
}

WhixyParser::CBraceContext* WhixyParser::cBrace()
{
    CBraceContext* _localctx = _tracker.createInstance<CBraceContext>(_ctx, getState());
    enterRule(_localctx, 140, WhixyParser::RuleCBrace);
    size_t _la = 0;

#if __cplusplus > 201703L
    auto onExit = finally(
        [=, this]
        {
#else
    auto onExit = finally(
        [=]
        {
#endif
            exitRule();
        }
    );
    try {
        enterOuterAlt(_localctx, 1);
        setState(632);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WhixyParser::NEWLINE) {
            setState(631);
            match(WhixyParser::NEWLINE);
        }
        setState(634);
        match(WhixyParser::CLOSEDBRACE);

    } catch (RecognitionException& e) {
        _errHandler->reportError(this, e);
        _localctx->exception = std::current_exception();
        _errHandler->recover(this, _localctx->exception);
    }

    return _localctx;
}

void WhixyParser::initialize()
{
#if ANTLR4_USE_THREAD_LOCAL_CACHE
    whixyparserParserInitialize();
#else
    ::antlr4::internal::call_once(whixyparserParserOnceFlag, whixyparserParserInitialize);
#endif
}
