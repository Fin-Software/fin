# SPDX-License-Identifier: Apache-2.0
# Copyright Â© 2024 The Whixy Authors. All rights reserved.
# Contributors responsible for this file:
# @p7r0x7 <mattrbonnette@pm.me>
#
# THE FOLLOWING LOGIC MAY BE FLAWED IN PROPOSED IMPLEMENTATION:
# ()                 == block of statements expression syntax
# id                 == func or proc call statement syntax
# id@arity_if_finite == func or proc value syntax
# {}                 == container expression literal syntax
# []                 == type or type indexing syntax
#
# THE FOLLOWING LOGIC MAY BE FLAWED IN PROPOSED IMPLEMENTATION:
# When programmers employ `func`, and separately, `proc`, in their code, they guarantee to the
# compiler that the following code either exhibits referential transparency (by means of NOT
# influencing or being influenced by any mutable values that have existed before that code was
# called), or, respectively, does not. The compiler will attempt to catch referential transparency
# violations at compiletime. Any expressions meeting the following criteria-as a compiletime
# optimization-must be lazily evaluated: all top-level parameters must have been sourced from pure
# functions. All other expressions cannot be reordered for *this* reason (but may be by language-
# agnostic optimization passes). Given this logic: funcs MAY INCLUDE proc calls, but only those
# whose side-effects only impact the calling scope; examples include all language prodecures.
# Separately, volatile types may not be reordered or optimized away by ANY optimization pass.
#
# Values whose identifier begins with capital letters are exported/made public.
# Most things that exist in Zig will have an equivalent in this language.
# Statically-dispatched parametric polymorphism in the form of generics.
# Statically-dispatched ad hoc polymorphism in the form of interfaces.
# Values are immutable by default, but may also be made mutable.
# Just-in-Time or Ahead-of-Time compilation.
# Types do not exist at runtime.
#
# Compiler requirements:
# Basic integer operations must be constant-time for all operand bitpatterns, so non-security-
# critical codepaths should use the arbitrary-scale arithmetic and bitwise operation stdlib.
#
# THE FOLLOWING LOGIC MAY BE FLAWED IN PROPOSED IMPLEMENTATION:
# When programmers employ `func`, and separately, `proc`, in their code, they guarantee to the
# compiler that the following code either exhibits referential transparency (by means of NOT
# influencing or being influenced by any mutable values that have existed before that code was
# called), or, respectively, does not. The compiler will attempt to catch referential transparency
# violations at compiletime. Any expressions meeting the following criteria-as a compiletime
# optimization-may be lazily evaluated: all top-level parameters must have been sourced from pure
# functions. All other expressions cannot be reordered for *this* reason (but may be by language-
# agnostic optimization passes). Given this logic: funcs MAY INCLUDE proc calls, but only those
# whose side-effects only impact the calling scope; examples include all language prodecures.
# Separately, volatile types may not be reordered or optimized away by ANY optimization pass.
#
#
# universal type qualifiers:  mayhaps ("compt " or "volatile ") and mayhaps "mut " and mayhaps "?"
# and mayhaps "*" and mayhaps "[" ++ integer ++ "]"
#
# `func` or `proc` type qualifiers:  universal type qualifiers and mayhaps "inline "
#
# basic language types:  `type` `face` `func` `proc` `enum`|`error` `union` `block` 
#
# basic word-sized integer types:  `uptr` `iptr`
#
# basic integer types:  `u0` `bool`|`u1` through `u65536` and `i1` through `i65536`
#
# basic floating-point types:  `f16` `f32` `f64` `f80` `f128`
#
# basic posit types:  `p8_0` `p16_1` `p32_2`
#
# zero-bit types:  `u0` noret
#
# language functions:  `inline` `volatile` `func` `proc` `enum` `error` `union` `is` `==` `!=` `<<`
# `>>` `<=` `>=` `as` `face` `_` `+` `+%` `-` `-%` `*` `*%` `/` `%` `~` `&` `|` `^` `<` `>` `<%`
# `>%`
#
# comptime language functions:  `compt` `++` `**`
#
# THE FOLLOWING LOGIC MAY BE IN THE WRONG CATEGORY:
# language procedures:  `let` `for` `while` `ret` `break` `next` `defer` `=` `+=` `+%=` `-=` `-%=`
# `*=` `*%=` `/=` `%=` `&=` `|=` `^=` `<=` `>=` `<%=` `>%=`
#
# variadic callables: `is` `==` `!=` `_` `+` `+%` `-` `-%` `*` `*%` `~` `&` `|` `^`


Bitwise := {
    Not := inline func [a: a.type] a.type ( ret ! a )
    Or := inline func [a b: a.type] a.type ( ret | a b )
    And := inline func [a b: a.type] a.type ( ret & a b )
    Xor := inline func [a b: a.type] a.type ( ret ^ a b )
    Shl := inline func [a b: a.type] a.type ( ret < a b )
    Shr := inline func [a b: a.type] a.type ( ret > a b )
    Rotl := inline func [a b: a.type] a.type ( ret <% a b )
    Rotr := inline func [a b: a.type] a.type ( ret >% a b )
}

Arithmetic := {
    OverflowBehavior := enum {WrapOnOverflow PanicOnOverflow: []u8}
    #
    # The following functions are generic and improper usage will be caught at comptime:
    #
    Add := inline func [a b: a.type, of: compt OverflowBehavior] a.type (
        ret is of == {.WrapOnOverflow, ( +% a b )} {.PanicOnOverflow, ( + a b )}
    )
    Sub := inline func [a b: a.type, of: compt OverflowBehavior] a.type (
        ret is of == {.WrapOnOverflow, ( -% a b )} {.PanicOnOverflow, ( - a b )}
    )
    Mul := inline func [a b: a.type, of: compt OverflowBehavior] a.type (
        ret is of == {
            .WrapOnOverflow, (
                *% a b
            )
        } {
            .PanicOnOverflow
            ( * a b )
        }
    )
    Div := inline func [a b: a.type] a.type ( ret / a b )
    Mod := inline func [a b: a.type] a.type ( ret % a b )
    Neg := inline func [a: a.type] a.type ( ret _ a )
}

Main := func [] ![] (
    Arithmetic.Add
)



Bitwise := struct {
    Not := inline func {a: a.type} a.type ( return ! a )
    Or := inline func {a b: a.type} a.type ( return | a b )
    And := inline func {a b: a.type} a.type ( return & a b )
    Xor := inline func {a b: a.type} a.type ( return ^ a b )
    Shl := inline func {a b: a.type} a.type ( return < a b )
    Shr := inline func {a b: a.type} a.type ( return > a b )
    Rotl := inline func {a b: a.type} a.type ( return <% a b )
    Rotr := inline func {a b: a.type} a.type ( return >% a b )
}

Bitwise
{

}



Main := proc() uptr {

	return 0
}