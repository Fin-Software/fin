# SPDX-License-Identifier: Apache-2.0
# Copyright Â© 2025 The Whixy Authors. All rights reserved.
# Contributors responsible for this file:
# @p7r0x7 <mattrbonnette@pm.me>

__ cpu = std.Hw.Cpu

# This file is heavily based on Go's math/big implementation.

bool IsPrime(x uptr) { return !TrivialCompositeness(x) && BailliePSWPrimality(x) }

## TrivialCompositeness returns true if it can be trivially confirmed that x is composite.
bool TrivialCompositeness(x uptr) {
    u32 (comp1, comp2) = (3*5*7*11*13*17*19*23*37, 29*31*41*43*47*53)
    u64 smallPrimes = 1<<2 | 1<<3 | 1<<5 | 1<<7 | 1<<11 | 1<<13 | 1<<17 | 1<<19 \
        | 1<<23 | 1<<29 | 1<<31 | 1<<37 | 1<<41 | 1<<43 | 1<<47 | 1<<53 | 1<<59 | 1<<61

    if (x < 64) return smallPrimes&(1<<x) != 0; if (x&1 == 0) return true
    u32 a = x % comp1; if (a%3 | a%5 | a%7 | a%11 | a%13 | a%17 | a%19 | a%23 | a%37 == 0) return true
    u32 b = x % comp2; if (b%29 | b%31 | b%41 | b%43 | b%47 | b%53 == 0) return true
    false
}

bool BailliePSWPrimality(x uptr) {
    # Base-2 Miller-Rabin/Fermat Test
    nm1

    # Baillie-PSW Test: Lucas Prime Test
    mut uptr (p, d, t1) = (3, 1, 0)

    while (true) ${p += 1} {
        if (p > 1e4) panic()
        d = p *% p -% 4
    }
}